// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "FNR.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic FNR::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic FNR::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> FNR::ap_ST_fsm_state1 = "1";
const sc_lv<4> FNR::ap_ST_fsm_state2 = "10";
const sc_lv<4> FNR::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> FNR::ap_ST_fsm_state5 = "1000";
const bool FNR::ap_const_boolean_1 = true;
const sc_lv<32> FNR::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> FNR::ap_const_lv32_2 = "10";
const bool FNR::ap_const_boolean_0 = false;
const sc_lv<1> FNR::ap_const_lv1_0 = "0";
const sc_lv<1> FNR::ap_const_lv1_1 = "1";
const sc_lv<32> FNR::ap_const_lv32_1 = "1";
const sc_lv<32> FNR::ap_const_lv32_40 = "1000000";
const sc_lv<32> FNR::ap_const_lv32_47 = "1000111";
const sc_lv<32> FNR::ap_const_lv32_48 = "1001000";
const sc_lv<32> FNR::ap_const_lv32_4F = "1001111";
const sc_lv<32> FNR::ap_const_lv32_50 = "1010000";
const sc_lv<32> FNR::ap_const_lv32_51 = "1010001";
const sc_lv<32> FNR::ap_const_lv32_58 = "1011000";
const sc_lv<32> FNR::ap_const_lv32_5D = "1011101";
const sc_lv<32> FNR::ap_const_lv32_60 = "1100000";
const sc_lv<4> FNR::ap_const_lv4_0 = "0000";
const sc_lv<32> FNR::ap_const_lv32_59 = "1011001";
const sc_lv<32> FNR::ap_const_lv32_5C = "1011100";
const sc_lv<32> FNR::ap_const_lv32_38 = "111000";
const sc_lv<32> FNR::ap_const_lv32_3F = "111111";
const sc_lv<4> FNR::ap_const_lv4_1 = "1";
const sc_lv<32> FNR::ap_const_lv32_61 = "1100001";
const sc_lv<32> FNR::ap_const_lv32_70 = "1110000";
const sc_lv<8> FNR::ap_const_lv8_2 = "10";
const sc_lv<9> FNR::ap_const_lv9_1FE = "111111110";

FNR::FNR(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op50_read_state3 );
    sensitive << ( ap_predicate_op60_write_state4 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op50_read_state3 );
    sensitive << ( ap_predicate_op60_write_state4 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op50_read_state3 );
    sensitive << ( ap_predicate_op60_write_state4 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( stream_out_V_full_n );
    sensitive << ( tmp_2_fu_266_p2 );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( stream_out_V_full_n );
    sensitive << ( tmp_2_reg_398 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( ap_predicate_op50_read_state3 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_predicate_op60_write_state4 );

    SC_METHOD(thread_ap_condition_104);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( ap_phi_mux_p_s_phi_fu_154_p4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_p_s_phi_fu_154_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( p_s_reg_151 );
    sensitive << ( p_077_1_reg_161 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_p_077_1_reg_161);

    SC_METHOD(thread_ap_predicate_op50_read_state3);
    sensitive << ( ap_phi_mux_p_s_phi_fu_154_p4 );
    sensitive << ( tmp_3_nbreadreq_fu_143_p3 );

    SC_METHOD(thread_ap_predicate_op60_write_state4);
    sensitive << ( p_s_reg_151 );
    sensitive << ( tmp_3_reg_407 );

    SC_METHOD(thread_currPayloadOut_data_1_fu_377_p1);
    sensitive << ( stream_in_V_dout );

    SC_METHOD(thread_currPayloadOut_data_s_fu_334_p3);
    sensitive << ( p_Val2_s_fu_210_p1 );
    sensitive << ( sel_tmp2_fu_328_p2 );
    sensitive << ( sel_tmp_fu_314_p3 );

    SC_METHOD(thread_grp_fu_173_p4);
    sensitive << ( stream_in_V_dout );

    SC_METHOD(thread_grp_fu_183_p4);
    sensitive << ( stream_in_V_dout );

    SC_METHOD(thread_grp_fu_193_p3);
    sensitive << ( stream_in_V_dout );

    SC_METHOD(thread_loc_V_1_trunc_fu_272_p1);
    sensitive << ( grp_fu_173_p4 );

    SC_METHOD(thread_loc_V_trunc_fu_250_p1);
    sensitive << ( p_Result_1_fu_240_p4 );

    SC_METHOD(thread_p_Result_1_fu_240_p4);
    sensitive << ( stream_in_V_dout );

    SC_METHOD(thread_p_Result_2_fu_276_p4);
    sensitive << ( stream_in_V_dout );

    SC_METHOD(thread_p_Result_4_fu_310_p1);
    sensitive << ( tmp_7_fu_302_p3 );

    SC_METHOD(thread_p_Result_s_46_fu_254_p5);
    sensitive << ( p_Val2_s_fu_210_p1 );
    sensitive << ( loc_V_trunc_fu_250_p1 );

    SC_METHOD(thread_p_Result_s_fu_224_p4);
    sensitive << ( stream_in_V_dout );

    SC_METHOD(thread_p_Val2_s_fu_210_p1);
    sensitive << ( stream_in_V_dout );

    SC_METHOD(thread_sel_tmp1_fu_322_p2);
    sensitive << ( tmp_1_fu_234_p2 );

    SC_METHOD(thread_sel_tmp2_fu_328_p2);
    sensitive << ( tmp_2_fu_266_p2 );
    sensitive << ( sel_tmp1_fu_322_p2 );

    SC_METHOD(thread_sel_tmp_fu_314_p3);
    sensitive << ( p_Val2_s_fu_210_p1 );
    sensitive << ( tmp_1_fu_234_p2 );
    sensitive << ( p_Result_s_46_fu_254_p5 );

    SC_METHOD(thread_stream_in_V_blk_n);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_phi_mux_p_s_phi_fu_154_p4 );
    sensitive << ( tmp_3_nbreadreq_fu_143_p3 );

    SC_METHOD(thread_stream_in_V_read);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_fu_266_p2 );
    sensitive << ( ap_predicate_op50_read_state3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_stream_out_V_blk_n);
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_2_fu_266_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_reg_398 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( p_s_reg_151 );
    sensitive << ( tmp_3_reg_407 );

    SC_METHOD(thread_stream_out_V_din);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_2_fu_266_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_reg_398 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op60_write_state4 );
    sensitive << ( tmp_320_fu_342_p5 );
    sensitive << ( tmp_11_fu_355_p4 );
    sensitive << ( tmp_210_fu_366_p5 );
    sensitive << ( tmp_5_fu_381_p5 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_stream_out_V_write);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_2_fu_266_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_reg_398 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op60_write_state4 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_tmp_11_fu_355_p4);
    sensitive << ( grp_fu_173_p4 );
    sensitive << ( p_Result_4_fu_310_p1 );

    SC_METHOD(thread_tmp_1_fu_234_p2);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_2_fu_266_p2 );
    sensitive << ( p_Result_s_fu_224_p4 );

    SC_METHOD(thread_tmp_210_fu_366_p5);
    sensitive << ( reg_202 );
    sensitive << ( reg_206 );
    sensitive << ( last_V_1_reg_392 );
    sensitive << ( currPayloadOut_data_s_reg_402 );

    SC_METHOD(thread_tmp_2_fu_266_p2);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_2_fu_266_p2 );
    sensitive << ( p_Result_s_fu_224_p4 );

    SC_METHOD(thread_tmp_320_fu_342_p5);
    sensitive << ( grp_fu_173_p4 );
    sensitive << ( grp_fu_183_p4 );
    sensitive << ( grp_fu_193_p3 );
    sensitive << ( currPayloadOut_data_s_fu_334_p3 );

    SC_METHOD(thread_tmp_3_nbreadreq_fu_143_p3);
    sensitive << ( stream_in_V_empty_n );

    SC_METHOD(thread_tmp_5_fu_381_p5);
    sensitive << ( reg_202 );
    sensitive << ( reg_206 );
    sensitive << ( currPayloadOut_data_1_reg_411 );
    sensitive << ( currPayloadOut_last_s_reg_416 );

    SC_METHOD(thread_tmp_6_fu_298_p1);
    sensitive << ( tmp_fu_286_p5 );

    SC_METHOD(thread_tmp_7_fu_302_p3);
    sensitive << ( p_Result_1_fu_240_p4 );
    sensitive << ( tmp_6_fu_298_p1 );

    SC_METHOD(thread_tmp_fu_286_p5);
    sensitive << ( p_Result_2_fu_276_p4 );
    sensitive << ( tmp_id_V_load_new_fu_214_p4 );
    sensitive << ( loc_V_1_trunc_fu_272_p1 );

    SC_METHOD(thread_tmp_id_V_load_new_fu_214_p4);
    sensitive << ( stream_in_V_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( stream_in_V_empty_n );
    sensitive << ( stream_out_V_full_n );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_p_s_phi_fu_154_p4 );
    sensitive << ( tmp_2_fu_266_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_reg_398 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "FNR_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, stream_in_V_dout, "(port)stream_in_V_dout");
    sc_trace(mVcdFile, stream_in_V_empty_n, "(port)stream_in_V_empty_n");
    sc_trace(mVcdFile, stream_in_V_read, "(port)stream_in_V_read");
    sc_trace(mVcdFile, stream_out_V_din, "(port)stream_out_V_din");
    sc_trace(mVcdFile, stream_out_V_full_n, "(port)stream_out_V_full_n");
    sc_trace(mVcdFile, stream_out_V_write, "(port)stream_out_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, stream_in_V_blk_n, "stream_in_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_mux_p_s_phi_fu_154_p4, "ap_phi_mux_p_s_phi_fu_154_p4");
    sc_trace(mVcdFile, tmp_3_nbreadreq_fu_143_p3, "tmp_3_nbreadreq_fu_143_p3");
    sc_trace(mVcdFile, stream_out_V_blk_n, "stream_out_V_blk_n");
    sc_trace(mVcdFile, tmp_2_fu_266_p2, "tmp_2_fu_266_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_2_reg_398, "tmp_2_reg_398");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, p_s_reg_151, "p_s_reg_151");
    sc_trace(mVcdFile, tmp_3_reg_407, "tmp_3_reg_407");
    sc_trace(mVcdFile, p_077_1_reg_161, "p_077_1_reg_161");
    sc_trace(mVcdFile, grp_fu_173_p4, "grp_fu_173_p4");
    sc_trace(mVcdFile, reg_202, "reg_202");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_predicate_op50_read_state3, "ap_predicate_op50_read_state3");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_predicate_op60_write_state4, "ap_predicate_op60_write_state4");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, grp_fu_183_p4, "grp_fu_183_p4");
    sc_trace(mVcdFile, reg_206, "reg_206");
    sc_trace(mVcdFile, grp_fu_193_p3, "grp_fu_193_p3");
    sc_trace(mVcdFile, last_V_1_reg_392, "last_V_1_reg_392");
    sc_trace(mVcdFile, currPayloadOut_data_s_fu_334_p3, "currPayloadOut_data_s_fu_334_p3");
    sc_trace(mVcdFile, currPayloadOut_data_s_reg_402, "currPayloadOut_data_s_reg_402");
    sc_trace(mVcdFile, currPayloadOut_data_1_fu_377_p1, "currPayloadOut_data_1_fu_377_p1");
    sc_trace(mVcdFile, currPayloadOut_data_1_reg_411, "currPayloadOut_data_1_reg_411");
    sc_trace(mVcdFile, currPayloadOut_last_s_reg_416, "currPayloadOut_last_s_reg_416");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_p_077_1_reg_161, "ap_phi_reg_pp0_iter0_p_077_1_reg_161");
    sc_trace(mVcdFile, tmp_320_fu_342_p5, "tmp_320_fu_342_p5");
    sc_trace(mVcdFile, tmp_11_fu_355_p4, "tmp_11_fu_355_p4");
    sc_trace(mVcdFile, tmp_210_fu_366_p5, "tmp_210_fu_366_p5");
    sc_trace(mVcdFile, tmp_5_fu_381_p5, "tmp_5_fu_381_p5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, p_Result_s_fu_224_p4, "p_Result_s_fu_224_p4");
    sc_trace(mVcdFile, p_Result_1_fu_240_p4, "p_Result_1_fu_240_p4");
    sc_trace(mVcdFile, p_Val2_s_fu_210_p1, "p_Val2_s_fu_210_p1");
    sc_trace(mVcdFile, loc_V_trunc_fu_250_p1, "loc_V_trunc_fu_250_p1");
    sc_trace(mVcdFile, p_Result_2_fu_276_p4, "p_Result_2_fu_276_p4");
    sc_trace(mVcdFile, tmp_id_V_load_new_fu_214_p4, "tmp_id_V_load_new_fu_214_p4");
    sc_trace(mVcdFile, loc_V_1_trunc_fu_272_p1, "loc_V_1_trunc_fu_272_p1");
    sc_trace(mVcdFile, tmp_fu_286_p5, "tmp_fu_286_p5");
    sc_trace(mVcdFile, tmp_6_fu_298_p1, "tmp_6_fu_298_p1");
    sc_trace(mVcdFile, tmp_7_fu_302_p3, "tmp_7_fu_302_p3");
    sc_trace(mVcdFile, tmp_1_fu_234_p2, "tmp_1_fu_234_p2");
    sc_trace(mVcdFile, p_Result_s_46_fu_254_p5, "p_Result_s_46_fu_254_p5");
    sc_trace(mVcdFile, sel_tmp1_fu_322_p2, "sel_tmp1_fu_322_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_328_p2, "sel_tmp2_fu_328_p2");
    sc_trace(mVcdFile, sel_tmp_fu_314_p3, "sel_tmp_fu_314_p3");
    sc_trace(mVcdFile, p_Result_4_fu_310_p1, "p_Result_4_fu_310_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_104, "ap_condition_104");
#endif

    }
    mHdltvinHandle.open("FNR.hdltvin.dat");
    mHdltvoutHandle.open("FNR.hdltvout.dat");
}

FNR::~FNR() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void FNR::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(tmp_2_reg_398.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((!(esl_seteq<1,1,1>(tmp_2_reg_398.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_104.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(ap_phi_mux_p_s_phi_fu_154_p4.read(), ap_const_lv1_0) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_nbreadreq_fu_143_p3.read()))) {
            p_077_1_reg_161 = ap_const_lv1_0;
        } else if ((esl_seteq<1,1,1>(ap_phi_mux_p_s_phi_fu_154_p4.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(tmp_3_nbreadreq_fu_143_p3.read(), ap_const_lv1_1))) {
            p_077_1_reg_161 = stream_in_V_dout.read().range(80, 80);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            p_077_1_reg_161 = ap_phi_reg_pp0_iter0_p_077_1_reg_161.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, p_s_reg_151.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_s_reg_151 = p_077_1_reg_161.read();
    } else if ((!(esl_seteq<1,1,1>(tmp_2_reg_398.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        p_s_reg_151 = last_V_1_reg_392.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op50_read_state3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        currPayloadOut_data_1_reg_411 = currPayloadOut_data_1_fu_377_p1.read();
    }
    if ((!(esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        currPayloadOut_data_s_reg_402 = currPayloadOut_data_s_fu_334_p3.read();
        last_V_1_reg_392 = stream_in_V_dout.read().range(80, 80);
        tmp_2_reg_398 = tmp_2_fu_266_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op50_read_state3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        currPayloadOut_last_s_reg_416 = stream_in_V_dout.read().range(80, 80);
    }
    if (((!(esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op50_read_state3.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_202 = stream_in_V_dout.read().range(71, 64);
        reg_206 = stream_in_V_dout.read().range(79, 72);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_phi_mux_p_s_phi_fu_154_p4.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_3_reg_407 =  (sc_lv<1>) (stream_in_V_empty_n.read());
    }
}

void FNR::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void FNR::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void FNR::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void FNR::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void FNR::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op50_read_state3.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op60_write_state4.read())));
}

void FNR::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op50_read_state3.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op60_write_state4.read())));
}

void FNR::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op50_read_state3.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op60_write_state4.read())));
}

void FNR::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)));
}

void FNR::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(tmp_2_reg_398.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0));
}

void FNR::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = (esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op50_read_state3.read()));
}

void FNR::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = (esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op60_write_state4.read()));
}

void FNR::thread_ap_condition_104() {
    ap_condition_104 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void FNR::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(ap_phi_mux_p_s_phi_fu_154_p4.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void FNR::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void FNR::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void FNR::thread_ap_phi_mux_p_s_phi_fu_154_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, p_s_reg_151.read()))) {
        ap_phi_mux_p_s_phi_fu_154_p4 = p_077_1_reg_161.read();
    } else {
        ap_phi_mux_p_s_phi_fu_154_p4 = p_s_reg_151.read();
    }
}

void FNR::thread_ap_phi_reg_pp0_iter0_p_077_1_reg_161() {
    ap_phi_reg_pp0_iter0_p_077_1_reg_161 =  (sc_lv<1>) ("X");
}

void FNR::thread_ap_predicate_op50_read_state3() {
    ap_predicate_op50_read_state3 = (esl_seteq<1,1,1>(ap_phi_mux_p_s_phi_fu_154_p4.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(tmp_3_nbreadreq_fu_143_p3.read(), ap_const_lv1_1));
}

void FNR::thread_ap_predicate_op60_write_state4() {
    ap_predicate_op60_write_state4 = (esl_seteq<1,1,1>(ap_const_lv1_0, p_s_reg_151.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_407.read()));
}

void FNR::thread_currPayloadOut_data_1_fu_377_p1() {
    currPayloadOut_data_1_fu_377_p1 = stream_in_V_dout.read().range(64-1, 0);
}

void FNR::thread_currPayloadOut_data_s_fu_334_p3() {
    currPayloadOut_data_s_fu_334_p3 = (!sel_tmp2_fu_328_p2.read()[0].is_01())? sc_lv<64>(): ((sel_tmp2_fu_328_p2.read()[0].to_bool())? p_Val2_s_fu_210_p1.read(): sel_tmp_fu_314_p3.read());
}

void FNR::thread_grp_fu_173_p4() {
    grp_fu_173_p4 = stream_in_V_dout.read().range(71, 64);
}

void FNR::thread_grp_fu_183_p4() {
    grp_fu_183_p4 = stream_in_V_dout.read().range(79, 72);
}

void FNR::thread_grp_fu_193_p3() {
    grp_fu_193_p3 = stream_in_V_dout.read().range(80, 80);
}

void FNR::thread_loc_V_1_trunc_fu_272_p1() {
    loc_V_1_trunc_fu_272_p1 = esl_zext<16,8>(grp_fu_173_p4.read());
}

void FNR::thread_loc_V_trunc_fu_250_p1() {
    loc_V_trunc_fu_250_p1 = esl_zext<8,4>(p_Result_1_fu_240_p4.read());
}

void FNR::thread_p_Result_1_fu_240_p4() {
    p_Result_1_fu_240_p4 = stream_in_V_dout.read().range(92, 89);
}

void FNR::thread_p_Result_2_fu_276_p4() {
    p_Result_2_fu_276_p4 = stream_in_V_dout.read().range(112, 97);
}

void FNR::thread_p_Result_4_fu_310_p1() {
    p_Result_4_fu_310_p1 = esl_zext<64,60>(tmp_7_fu_302_p3.read());
}

void FNR::thread_p_Result_s_46_fu_254_p5() {
    p_Result_s_46_fu_254_p5 = esl_partset<64,64,8,32,32>(p_Val2_s_fu_210_p1.read(), loc_V_trunc_fu_250_p1.read(), ap_const_lv32_38, ap_const_lv32_3F);
}

void FNR::thread_p_Result_s_fu_224_p4() {
    p_Result_s_fu_224_p4 = stream_in_V_dout.read().range(96, 93);
}

void FNR::thread_p_Val2_s_fu_210_p1() {
    p_Val2_s_fu_210_p1 = stream_in_V_dout.read().range(64-1, 0);
}

void FNR::thread_sel_tmp1_fu_322_p2() {
    sel_tmp1_fu_322_p2 = (tmp_1_fu_234_p2.read() ^ ap_const_lv1_1);
}

void FNR::thread_sel_tmp2_fu_328_p2() {
    sel_tmp2_fu_328_p2 = (tmp_2_fu_266_p2.read() & sel_tmp1_fu_322_p2.read());
}

void FNR::thread_sel_tmp_fu_314_p3() {
    sel_tmp_fu_314_p3 = (!tmp_1_fu_234_p2.read()[0].is_01())? sc_lv<64>(): ((tmp_1_fu_234_p2.read()[0].to_bool())? p_Result_s_46_fu_254_p5.read(): p_Val2_s_fu_210_p1.read());
}

void FNR::thread_stream_in_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_phi_mux_p_s_phi_fu_154_p4.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(tmp_3_nbreadreq_fu_143_p3.read(), ap_const_lv1_1)))) {
        stream_in_V_blk_n = stream_in_V_empty_n.read();
    } else {
        stream_in_V_blk_n = ap_const_logic_1;
    }
}

void FNR::thread_stream_in_V_read() {
    if (((!(esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0))) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op50_read_state3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        stream_in_V_read = ap_const_logic_1;
    } else {
        stream_in_V_read = ap_const_logic_0;
    }
}

void FNR::thread_stream_out_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_2_reg_398.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, p_s_reg_151.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_reg_407.read())))) {
        stream_out_V_blk_n = stream_out_V_full_n.read();
    } else {
        stream_out_V_blk_n = ap_const_logic_1;
    }
}

void FNR::thread_stream_out_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op60_write_state4.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        stream_out_V_din = tmp_5_fu_381_p5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(tmp_2_reg_398.read(), ap_const_lv1_1) && 
                !(esl_seteq<1,1,1>(tmp_2_reg_398.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)))) {
        stream_out_V_din = tmp_210_fu_366_p5.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
                !(esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0))))) {
        stream_out_V_din = tmp_11_fu_355_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
                !(esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0))))) {
        stream_out_V_din = tmp_320_fu_342_p5.read();
    } else {
        stream_out_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void FNR::thread_stream_out_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
          !(esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_2_reg_398.read(), ap_const_lv1_1) && 
          !(esl_seteq<1,1,1>(tmp_2_reg_398.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op60_write_state4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        stream_out_V_write = ap_const_logic_1;
    } else {
        stream_out_V_write = ap_const_logic_0;
    }
}

void FNR::thread_tmp_11_fu_355_p4() {
    tmp_11_fu_355_p4 = esl_concat<17,64>(esl_concat<8,9>(grp_fu_173_p4.read(), ap_const_lv9_1FE), p_Result_4_fu_310_p1.read());
}

void FNR::thread_tmp_1_fu_234_p2() {
    tmp_1_fu_234_p2 = (!p_Result_s_fu_224_p4.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_s_fu_224_p4.read() == ap_const_lv4_0);
}

void FNR::thread_tmp_210_fu_366_p5() {
    tmp_210_fu_366_p5 = esl_concat<17,64>(esl_concat<16,1>(esl_concat<8,8>(reg_202.read(), reg_206.read()), last_V_1_reg_392.read()), currPayloadOut_data_s_reg_402.read());
}

void FNR::thread_tmp_2_fu_266_p2() {
    tmp_2_fu_266_p2 = (!p_Result_s_fu_224_p4.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_s_fu_224_p4.read() == ap_const_lv4_1);
}

void FNR::thread_tmp_320_fu_342_p5() {
    tmp_320_fu_342_p5 = esl_concat<17,64>(esl_concat<16,1>(esl_concat<8,8>(grp_fu_173_p4.read(), grp_fu_183_p4.read()), grp_fu_193_p3.read()), currPayloadOut_data_s_fu_334_p3.read());
}

void FNR::thread_tmp_3_nbreadreq_fu_143_p3() {
    tmp_3_nbreadreq_fu_143_p3 =  (sc_lv<1>) (stream_in_V_empty_n.read());
}

void FNR::thread_tmp_5_fu_381_p5() {
    tmp_5_fu_381_p5 = esl_concat<17,64>(esl_concat<16,1>(esl_concat<8,8>(reg_202.read(), reg_206.read()), currPayloadOut_last_s_reg_416.read()), currPayloadOut_data_1_reg_411.read());
}

void FNR::thread_tmp_6_fu_298_p1() {
    tmp_6_fu_298_p1 = esl_zext<56,48>(tmp_fu_286_p5.read());
}

void FNR::thread_tmp_7_fu_302_p3() {
    tmp_7_fu_302_p3 = esl_concat<4,56>(p_Result_1_fu_240_p4.read(), tmp_6_fu_298_p1.read());
}

void FNR::thread_tmp_fu_286_p5() {
    tmp_fu_286_p5 = esl_concat<32,16>(esl_concat<24,8>(esl_concat<16,8>(p_Result_2_fu_276_p4.read(), ap_const_lv8_2), tmp_id_V_load_new_fu_214_p4.read()), loc_V_1_trunc_fu_272_p1.read());
}

void FNR::thread_tmp_id_V_load_new_fu_214_p4() {
    tmp_id_V_load_new_fu_214_p4 = stream_in_V_dout.read().range(88, 81);
}

void FNR::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(stream_in_V_empty_n.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(tmp_2_fu_266_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(tmp_2_reg_398.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(stream_out_V_full_n.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_phi_mux_p_s_phi_fu_154_p4.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_phi_mux_p_s_phi_fu_154_p4.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void FNR::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_V_dout\" :  \"" << stream_in_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_V_empty_n\" :  \"" << stream_in_V_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"stream_in_V_read\" :  \"" << stream_in_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_V_din\" :  \"" << stream_out_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_out_V_full_n\" :  \"" << stream_out_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_V_write\" :  \"" << stream_out_V_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

