// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dummy.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dummy::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dummy::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> dummy::ap_ST_fsm_state1 = "1";
const sc_lv<8> dummy::ap_ST_fsm_state2 = "10";
const sc_lv<8> dummy::ap_ST_fsm_state3 = "100";
const sc_lv<8> dummy::ap_ST_fsm_state4 = "1000";
const sc_lv<8> dummy::ap_ST_fsm_state5 = "10000";
const sc_lv<8> dummy::ap_ST_fsm_state6 = "100000";
const sc_lv<8> dummy::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> dummy::ap_ST_fsm_state8 = "10000000";
const sc_lv<1> dummy::ap_const_lv1_0 = "0";
const sc_lv<32> dummy::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dummy::ap_const_lv32_7 = "111";
const int dummy::C_M_AXI_MEM_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int dummy::C_M_AXI_MEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int dummy::C_M_AXI_MEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int dummy::C_M_AXI_MEM_CACHE_VALUE = "11";
const int dummy::C_M_AXI_DATA_WIDTH = "100000";
const bool dummy::ap_const_boolean_0 = false;
const sc_lv<64> dummy::ap_const_lv64_2A = "101010";
const sc_lv<32> dummy::ap_const_lv32_1 = "1";
const sc_lv<3> dummy::ap_const_lv3_0 = "000";
const sc_lv<2> dummy::ap_const_lv2_0 = "00";
const sc_lv<4> dummy::ap_const_lv4_0 = "0000";
const sc_lv<1> dummy::ap_const_lv1_1 = "1";
const sc_lv<64> dummy::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const bool dummy::ap_const_boolean_1 = true;

dummy::dummy(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dummy_mem_m_axi_U = new dummy_mem_m_axi<0,32,64,5,16,16,16,16,C_M_AXI_MEM_ID_WIDTH,C_M_AXI_MEM_ADDR_WIDTH,C_M_AXI_MEM_DATA_WIDTH,C_M_AXI_MEM_AWUSER_WIDTH,C_M_AXI_MEM_ARUSER_WIDTH,C_M_AXI_MEM_WUSER_WIDTH,C_M_AXI_MEM_RUSER_WIDTH,C_M_AXI_MEM_BUSER_WIDTH,C_M_AXI_MEM_TARGET_ADDR,C_M_AXI_MEM_USER_VALUE,C_M_AXI_MEM_PROT_VALUE,C_M_AXI_MEM_CACHE_VALUE>("dummy_mem_m_axi_U");
    dummy_mem_m_axi_U->AWVALID(m_axi_mem_AWVALID);
    dummy_mem_m_axi_U->AWREADY(m_axi_mem_AWREADY);
    dummy_mem_m_axi_U->AWADDR(m_axi_mem_AWADDR);
    dummy_mem_m_axi_U->AWID(m_axi_mem_AWID);
    dummy_mem_m_axi_U->AWLEN(m_axi_mem_AWLEN);
    dummy_mem_m_axi_U->AWSIZE(m_axi_mem_AWSIZE);
    dummy_mem_m_axi_U->AWBURST(m_axi_mem_AWBURST);
    dummy_mem_m_axi_U->AWLOCK(m_axi_mem_AWLOCK);
    dummy_mem_m_axi_U->AWCACHE(m_axi_mem_AWCACHE);
    dummy_mem_m_axi_U->AWPROT(m_axi_mem_AWPROT);
    dummy_mem_m_axi_U->AWQOS(m_axi_mem_AWQOS);
    dummy_mem_m_axi_U->AWREGION(m_axi_mem_AWREGION);
    dummy_mem_m_axi_U->AWUSER(m_axi_mem_AWUSER);
    dummy_mem_m_axi_U->WVALID(m_axi_mem_WVALID);
    dummy_mem_m_axi_U->WREADY(m_axi_mem_WREADY);
    dummy_mem_m_axi_U->WDATA(m_axi_mem_WDATA);
    dummy_mem_m_axi_U->WSTRB(m_axi_mem_WSTRB);
    dummy_mem_m_axi_U->WLAST(m_axi_mem_WLAST);
    dummy_mem_m_axi_U->WID(m_axi_mem_WID);
    dummy_mem_m_axi_U->WUSER(m_axi_mem_WUSER);
    dummy_mem_m_axi_U->ARVALID(m_axi_mem_ARVALID);
    dummy_mem_m_axi_U->ARREADY(m_axi_mem_ARREADY);
    dummy_mem_m_axi_U->ARADDR(m_axi_mem_ARADDR);
    dummy_mem_m_axi_U->ARID(m_axi_mem_ARID);
    dummy_mem_m_axi_U->ARLEN(m_axi_mem_ARLEN);
    dummy_mem_m_axi_U->ARSIZE(m_axi_mem_ARSIZE);
    dummy_mem_m_axi_U->ARBURST(m_axi_mem_ARBURST);
    dummy_mem_m_axi_U->ARLOCK(m_axi_mem_ARLOCK);
    dummy_mem_m_axi_U->ARCACHE(m_axi_mem_ARCACHE);
    dummy_mem_m_axi_U->ARPROT(m_axi_mem_ARPROT);
    dummy_mem_m_axi_U->ARQOS(m_axi_mem_ARQOS);
    dummy_mem_m_axi_U->ARREGION(m_axi_mem_ARREGION);
    dummy_mem_m_axi_U->ARUSER(m_axi_mem_ARUSER);
    dummy_mem_m_axi_U->RVALID(m_axi_mem_RVALID);
    dummy_mem_m_axi_U->RREADY(m_axi_mem_RREADY);
    dummy_mem_m_axi_U->RDATA(m_axi_mem_RDATA);
    dummy_mem_m_axi_U->RLAST(m_axi_mem_RLAST);
    dummy_mem_m_axi_U->RID(m_axi_mem_RID);
    dummy_mem_m_axi_U->RUSER(m_axi_mem_RUSER);
    dummy_mem_m_axi_U->RRESP(m_axi_mem_RRESP);
    dummy_mem_m_axi_U->BVALID(m_axi_mem_BVALID);
    dummy_mem_m_axi_U->BREADY(m_axi_mem_BREADY);
    dummy_mem_m_axi_U->BRESP(m_axi_mem_BRESP);
    dummy_mem_m_axi_U->BID(m_axi_mem_BID);
    dummy_mem_m_axi_U->BUSER(m_axi_mem_BUSER);
    dummy_mem_m_axi_U->ACLK(ap_clk);
    dummy_mem_m_axi_U->ARESET(ap_rst_n_inv);
    dummy_mem_m_axi_U->ACLK_EN(ap_var_for_const0);
    dummy_mem_m_axi_U->I_ARVALID(mem_ARVALID);
    dummy_mem_m_axi_U->I_ARREADY(mem_ARREADY);
    dummy_mem_m_axi_U->I_ARADDR(ap_var_for_const1);
    dummy_mem_m_axi_U->I_ARID(ap_var_for_const2);
    dummy_mem_m_axi_U->I_ARLEN(ap_var_for_const3);
    dummy_mem_m_axi_U->I_ARSIZE(ap_var_for_const4);
    dummy_mem_m_axi_U->I_ARLOCK(ap_var_for_const5);
    dummy_mem_m_axi_U->I_ARCACHE(ap_var_for_const6);
    dummy_mem_m_axi_U->I_ARQOS(ap_var_for_const6);
    dummy_mem_m_axi_U->I_ARPROT(ap_var_for_const4);
    dummy_mem_m_axi_U->I_ARUSER(ap_var_for_const2);
    dummy_mem_m_axi_U->I_ARBURST(ap_var_for_const5);
    dummy_mem_m_axi_U->I_ARREGION(ap_var_for_const6);
    dummy_mem_m_axi_U->I_RVALID(mem_RVALID);
    dummy_mem_m_axi_U->I_RREADY(mem_RREADY);
    dummy_mem_m_axi_U->I_RDATA(mem_RDATA);
    dummy_mem_m_axi_U->I_RID(mem_RID);
    dummy_mem_m_axi_U->I_RUSER(mem_RUSER);
    dummy_mem_m_axi_U->I_RRESP(mem_RRESP);
    dummy_mem_m_axi_U->I_RLAST(mem_RLAST);
    dummy_mem_m_axi_U->I_AWVALID(ap_var_for_const7);
    dummy_mem_m_axi_U->I_AWREADY(mem_AWREADY);
    dummy_mem_m_axi_U->I_AWADDR(ap_var_for_const8);
    dummy_mem_m_axi_U->I_AWID(ap_var_for_const2);
    dummy_mem_m_axi_U->I_AWLEN(ap_var_for_const9);
    dummy_mem_m_axi_U->I_AWSIZE(ap_var_for_const4);
    dummy_mem_m_axi_U->I_AWLOCK(ap_var_for_const5);
    dummy_mem_m_axi_U->I_AWCACHE(ap_var_for_const6);
    dummy_mem_m_axi_U->I_AWQOS(ap_var_for_const6);
    dummy_mem_m_axi_U->I_AWPROT(ap_var_for_const4);
    dummy_mem_m_axi_U->I_AWUSER(ap_var_for_const2);
    dummy_mem_m_axi_U->I_AWBURST(ap_var_for_const5);
    dummy_mem_m_axi_U->I_AWREGION(ap_var_for_const6);
    dummy_mem_m_axi_U->I_WVALID(ap_var_for_const7);
    dummy_mem_m_axi_U->I_WREADY(mem_WREADY);
    dummy_mem_m_axi_U->I_WDATA(ap_var_for_const9);
    dummy_mem_m_axi_U->I_WID(ap_var_for_const2);
    dummy_mem_m_axi_U->I_WUSER(ap_var_for_const2);
    dummy_mem_m_axi_U->I_WLAST(ap_var_for_const7);
    dummy_mem_m_axi_U->I_WSTRB(ap_var_for_const6);
    dummy_mem_m_axi_U->I_BVALID(mem_BVALID);
    dummy_mem_m_axi_U->I_BREADY(ap_var_for_const7);
    dummy_mem_m_axi_U->I_BRESP(mem_BRESP);
    dummy_mem_m_axi_U->I_BID(mem_BID);
    dummy_mem_m_axi_U->I_BUSER(mem_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( state_V );
    sensitive << ( ap_sig_ioackin_mem_ARREADY );

    SC_METHOD(thread_ap_block_state8);
    sensitive << ( state_V_load_reg_76 );
    sensitive << ( mem_RVALID );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_mem_ARREADY);
    sensitive << ( mem_ARREADY );
    sensitive << ( ap_reg_ioackin_mem_ARREADY );

    SC_METHOD(thread_mem_ARVALID);
    sensitive << ( state_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_mem_ARREADY );

    SC_METHOD(thread_mem_RREADY);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( state_V_load_reg_76 );
    sensitive << ( mem_RVALID );

    SC_METHOD(thread_mem_blk_n_AR);
    sensitive << ( m_axi_mem_ARREADY );
    sensitive << ( state_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_blk_n_R);
    sensitive << ( m_axi_mem_RVALID );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( state_V_load_reg_76 );

    SC_METHOD(thread_out_r);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_V_load_load_fu_59_p1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( state_V_load_reg_76 );
    sensitive << ( mem_RVALID );
    sensitive << ( mem_RDATA );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_V_load_load_fu_59_p1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( state_V_load_reg_76 );
    sensitive << ( mem_RVALID );

    SC_METHOD(thread_state_V_load_load_fu_59_p1);
    sensitive << ( state_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( state_V );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_V_load_load_fu_59_p1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( state_V_load_reg_76 );
    sensitive << ( mem_RVALID );
    sensitive << ( ap_block_state1_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const9);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const8);

    state_V = "0";
    ap_CS_fsm = "00000001";
    ap_reg_ioackin_mem_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dummy_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, out_r, "(port)out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "(port)out_r_ap_vld");
    sc_trace(mVcdFile, m_axi_mem_AWVALID, "(port)m_axi_mem_AWVALID");
    sc_trace(mVcdFile, m_axi_mem_AWREADY, "(port)m_axi_mem_AWREADY");
    sc_trace(mVcdFile, m_axi_mem_AWADDR, "(port)m_axi_mem_AWADDR");
    sc_trace(mVcdFile, m_axi_mem_AWID, "(port)m_axi_mem_AWID");
    sc_trace(mVcdFile, m_axi_mem_AWLEN, "(port)m_axi_mem_AWLEN");
    sc_trace(mVcdFile, m_axi_mem_AWSIZE, "(port)m_axi_mem_AWSIZE");
    sc_trace(mVcdFile, m_axi_mem_AWBURST, "(port)m_axi_mem_AWBURST");
    sc_trace(mVcdFile, m_axi_mem_AWLOCK, "(port)m_axi_mem_AWLOCK");
    sc_trace(mVcdFile, m_axi_mem_AWCACHE, "(port)m_axi_mem_AWCACHE");
    sc_trace(mVcdFile, m_axi_mem_AWPROT, "(port)m_axi_mem_AWPROT");
    sc_trace(mVcdFile, m_axi_mem_AWQOS, "(port)m_axi_mem_AWQOS");
    sc_trace(mVcdFile, m_axi_mem_AWREGION, "(port)m_axi_mem_AWREGION");
    sc_trace(mVcdFile, m_axi_mem_AWUSER, "(port)m_axi_mem_AWUSER");
    sc_trace(mVcdFile, m_axi_mem_WVALID, "(port)m_axi_mem_WVALID");
    sc_trace(mVcdFile, m_axi_mem_WREADY, "(port)m_axi_mem_WREADY");
    sc_trace(mVcdFile, m_axi_mem_WDATA, "(port)m_axi_mem_WDATA");
    sc_trace(mVcdFile, m_axi_mem_WSTRB, "(port)m_axi_mem_WSTRB");
    sc_trace(mVcdFile, m_axi_mem_WLAST, "(port)m_axi_mem_WLAST");
    sc_trace(mVcdFile, m_axi_mem_WID, "(port)m_axi_mem_WID");
    sc_trace(mVcdFile, m_axi_mem_WUSER, "(port)m_axi_mem_WUSER");
    sc_trace(mVcdFile, m_axi_mem_ARVALID, "(port)m_axi_mem_ARVALID");
    sc_trace(mVcdFile, m_axi_mem_ARREADY, "(port)m_axi_mem_ARREADY");
    sc_trace(mVcdFile, m_axi_mem_ARADDR, "(port)m_axi_mem_ARADDR");
    sc_trace(mVcdFile, m_axi_mem_ARID, "(port)m_axi_mem_ARID");
    sc_trace(mVcdFile, m_axi_mem_ARLEN, "(port)m_axi_mem_ARLEN");
    sc_trace(mVcdFile, m_axi_mem_ARSIZE, "(port)m_axi_mem_ARSIZE");
    sc_trace(mVcdFile, m_axi_mem_ARBURST, "(port)m_axi_mem_ARBURST");
    sc_trace(mVcdFile, m_axi_mem_ARLOCK, "(port)m_axi_mem_ARLOCK");
    sc_trace(mVcdFile, m_axi_mem_ARCACHE, "(port)m_axi_mem_ARCACHE");
    sc_trace(mVcdFile, m_axi_mem_ARPROT, "(port)m_axi_mem_ARPROT");
    sc_trace(mVcdFile, m_axi_mem_ARQOS, "(port)m_axi_mem_ARQOS");
    sc_trace(mVcdFile, m_axi_mem_ARREGION, "(port)m_axi_mem_ARREGION");
    sc_trace(mVcdFile, m_axi_mem_ARUSER, "(port)m_axi_mem_ARUSER");
    sc_trace(mVcdFile, m_axi_mem_RVALID, "(port)m_axi_mem_RVALID");
    sc_trace(mVcdFile, m_axi_mem_RREADY, "(port)m_axi_mem_RREADY");
    sc_trace(mVcdFile, m_axi_mem_RDATA, "(port)m_axi_mem_RDATA");
    sc_trace(mVcdFile, m_axi_mem_RLAST, "(port)m_axi_mem_RLAST");
    sc_trace(mVcdFile, m_axi_mem_RID, "(port)m_axi_mem_RID");
    sc_trace(mVcdFile, m_axi_mem_RUSER, "(port)m_axi_mem_RUSER");
    sc_trace(mVcdFile, m_axi_mem_RRESP, "(port)m_axi_mem_RRESP");
    sc_trace(mVcdFile, m_axi_mem_BVALID, "(port)m_axi_mem_BVALID");
    sc_trace(mVcdFile, m_axi_mem_BREADY, "(port)m_axi_mem_BREADY");
    sc_trace(mVcdFile, m_axi_mem_BRESP, "(port)m_axi_mem_BRESP");
    sc_trace(mVcdFile, m_axi_mem_BID, "(port)m_axi_mem_BID");
    sc_trace(mVcdFile, m_axi_mem_BUSER, "(port)m_axi_mem_BUSER");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, state_V, "state_V");
    sc_trace(mVcdFile, mem_blk_n_AR, "mem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, state_V_load_load_fu_59_p1, "state_V_load_load_fu_59_p1");
    sc_trace(mVcdFile, mem_blk_n_R, "mem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, state_V_load_reg_76, "state_V_load_reg_76");
    sc_trace(mVcdFile, mem_AWREADY, "mem_AWREADY");
    sc_trace(mVcdFile, mem_WREADY, "mem_WREADY");
    sc_trace(mVcdFile, mem_ARVALID, "mem_ARVALID");
    sc_trace(mVcdFile, mem_ARREADY, "mem_ARREADY");
    sc_trace(mVcdFile, mem_RVALID, "mem_RVALID");
    sc_trace(mVcdFile, mem_RREADY, "mem_RREADY");
    sc_trace(mVcdFile, mem_RDATA, "mem_RDATA");
    sc_trace(mVcdFile, mem_RLAST, "mem_RLAST");
    sc_trace(mVcdFile, mem_RID, "mem_RID");
    sc_trace(mVcdFile, mem_RUSER, "mem_RUSER");
    sc_trace(mVcdFile, mem_RRESP, "mem_RRESP");
    sc_trace(mVcdFile, mem_BVALID, "mem_BVALID");
    sc_trace(mVcdFile, mem_BRESP, "mem_BRESP");
    sc_trace(mVcdFile, mem_BID, "mem_BID");
    sc_trace(mVcdFile, mem_BUSER, "mem_BUSER");
    sc_trace(mVcdFile, ap_sig_ioackin_mem_ARREADY, "ap_sig_ioackin_mem_ARREADY");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, ap_reg_ioackin_mem_ARREADY, "ap_reg_ioackin_mem_ARREADY");
    sc_trace(mVcdFile, ap_block_state8, "ap_block_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("dummy.hdltvin.dat");
    mHdltvoutHandle.open("dummy.hdltvout.dat");
}

dummy::~dummy() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete dummy_mem_m_axi_U;
}

void dummy::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void dummy::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_logic_0;
}

void dummy::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv1_0;
}

void dummy::thread_ap_var_for_const9() {
    ap_var_for_const9 = ap_const_lv32_0;
}

void dummy::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_2A;
}

void dummy::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv32_1;
}

void dummy::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void dummy::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void dummy::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void dummy::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv64_0;
}

void dummy::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_mem_ARREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(state_V.read(), ap_const_lv1_0))) {
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state1_io.read())) {
                ap_reg_ioackin_mem_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, mem_ARREADY.read())) {
                ap_reg_ioackin_mem_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(state_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state1_io.read()))) {
        state_V = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state1_io.read()))) {
        state_V_load_reg_76 = state_V.read();
    }
}

void dummy::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dummy::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void dummy::thread_ap_block_state1_io() {
    ap_block_state1_io = (esl_seteq<1,1,1>(state_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_mem_ARREADY.read()));
}

void dummy::thread_ap_block_state8() {
    ap_block_state8 = (esl_seteq<1,1,1>(state_V_load_reg_76.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_0));
}

void dummy::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void dummy::thread_ap_sig_ioackin_mem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())) {
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY.read();
    } else {
        ap_sig_ioackin_mem_ARREADY = ap_const_logic_1;
    }
}

void dummy::thread_mem_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(state_V.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read()))) {
        mem_ARVALID = ap_const_logic_1;
    } else {
        mem_ARVALID = ap_const_logic_0;
    }
}

void dummy::thread_mem_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(state_V_load_reg_76.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(state_V_load_reg_76.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_0)))) {
        mem_RREADY = ap_const_logic_1;
    } else {
        mem_RREADY = ap_const_logic_0;
    }
}

void dummy::thread_mem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(state_V.read(), ap_const_lv1_0))) {
        mem_blk_n_AR = m_axi_mem_ARREADY.read();
    } else {
        mem_blk_n_AR = ap_const_logic_1;
    }
}

void dummy::thread_mem_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(state_V_load_reg_76.read(), ap_const_lv1_0))) {
        mem_blk_n_R = m_axi_mem_RVALID.read();
    } else {
        mem_blk_n_R = ap_const_logic_1;
    }
}

void dummy::thread_out_r() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(state_V_load_reg_76.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(state_V_load_reg_76.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_0)))) {
        out_r = mem_RDATA.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(state_V_load_load_fu_59_p1.read(), ap_const_lv1_1))) {
        out_r = ap_const_lv32_0;
    } else {
        out_r = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dummy::thread_out_r_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(state_V_load_reg_76.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(state_V_load_reg_76.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_0))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(state_V_load_load_fu_59_p1.read(), ap_const_lv1_1)))) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void dummy::thread_state_V_load_load_fu_59_p1() {
    state_V_load_load_fu_59_p1 = state_V.read();
}

void dummy::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(state_V_load_load_fu_59_p1.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state1_io.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else if ((esl_seteq<1,1,1>(state_V.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state1_io.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((!(esl_seteq<1,1,1>(state_V_load_reg_76.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

void dummy::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"out_r\" :  \"" << out_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ap_vld\" :  \"" << out_r_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWVALID\" :  \"" << m_axi_mem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_AWREADY\" :  \"" << m_axi_mem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWADDR\" :  \"" << m_axi_mem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWID\" :  \"" << m_axi_mem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWLEN\" :  \"" << m_axi_mem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWSIZE\" :  \"" << m_axi_mem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWBURST\" :  \"" << m_axi_mem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWLOCK\" :  \"" << m_axi_mem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWCACHE\" :  \"" << m_axi_mem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWPROT\" :  \"" << m_axi_mem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWQOS\" :  \"" << m_axi_mem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWREGION\" :  \"" << m_axi_mem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWUSER\" :  \"" << m_axi_mem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WVALID\" :  \"" << m_axi_mem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_WREADY\" :  \"" << m_axi_mem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WDATA\" :  \"" << m_axi_mem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WSTRB\" :  \"" << m_axi_mem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WLAST\" :  \"" << m_axi_mem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WID\" :  \"" << m_axi_mem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WUSER\" :  \"" << m_axi_mem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARVALID\" :  \"" << m_axi_mem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_ARREADY\" :  \"" << m_axi_mem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARADDR\" :  \"" << m_axi_mem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARID\" :  \"" << m_axi_mem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARLEN\" :  \"" << m_axi_mem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARSIZE\" :  \"" << m_axi_mem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARBURST\" :  \"" << m_axi_mem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARLOCK\" :  \"" << m_axi_mem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARCACHE\" :  \"" << m_axi_mem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARPROT\" :  \"" << m_axi_mem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARQOS\" :  \"" << m_axi_mem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARREGION\" :  \"" << m_axi_mem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARUSER\" :  \"" << m_axi_mem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RVALID\" :  \"" << m_axi_mem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_RREADY\" :  \"" << m_axi_mem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RDATA\" :  \"" << m_axi_mem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RLAST\" :  \"" << m_axi_mem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RID\" :  \"" << m_axi_mem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RUSER\" :  \"" << m_axi_mem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RRESP\" :  \"" << m_axi_mem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BVALID\" :  \"" << m_axi_mem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_BREADY\" :  \"" << m_axi_mem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BRESP\" :  \"" << m_axi_mem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BID\" :  \"" << m_axi_mem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BUSER\" :  \"" << m_axi_mem_BUSER.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

