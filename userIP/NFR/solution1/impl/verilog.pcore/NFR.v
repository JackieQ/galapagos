// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="NFR,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.539000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=280,HLS_SYN_LUT=864}" *)

module NFR (
        ap_clk,
        ap_rst,
        stream_in_V_dout,
        stream_in_V_empty_n,
        stream_in_V_read,
        stream_out_V_din,
        stream_out_V_full_n,
        stream_out_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input  [80:0] stream_in_V_dout;
input   stream_in_V_empty_n;
output   stream_in_V_read;
output  [128:0] stream_out_V_din;
input   stream_out_V_full_n;
output   stream_out_V_write;

reg stream_in_V_read;
reg[128:0] stream_out_V_din;
reg stream_out_V_write;

reg    stream_in_V_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] tmp_9_fu_446_p2;
wire   [0:0] tmp_2_nbreadreq_fu_187_p3;
reg    stream_out_V_blk_n;
wire   [0:0] tmp_11_fu_325_p2;
wire   [0:0] tmp_3_fu_331_p2;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_9_reg_767;
reg   [0:0] tmp_2_reg_771;
reg   [31:0] expected_bytes_3_reg_222;
wire   [31:0] expected_bytes_1_fu_387_p1;
reg    ap_predicate_op45_write_state2;
reg    ap_block_state2;
wire   [7:0] packetOut_dest_V_fu_442_p1;
reg   [7:0] packetOut_dest_V_reg_761;
wire    ap_CS_fsm_state3;
reg    ap_predicate_op74_read_state4;
reg    ap_block_state4_pp0_stage0_iter0;
reg    ap_predicate_op113_write_state5;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] packetIn_data_V_fu_456_p1;
reg   [63:0] packetIn_data_V_reg_775;
reg   [7:0] packetIn_keep_V_reg_780;
wire   [31:0] expected_bytes_4_3_fu_554_p3;
reg   [31:0] expected_bytes_4_3_reg_785;
reg   [0:0] tmp_21_reg_791;
reg   [0:0] tmp_22_reg_796;
reg   [0:0] tmp_23_reg_801;
reg   [0:0] tmp_24_reg_806;
reg    ap_block_pp0_stage0_subdone;
reg   [31:0] expected_bytes_reg_195;
wire    ap_CS_fsm_state6;
reg   [31:0] expected_bytes_2_reg_207;
reg   [31:0] ap_phi_mux_expected_bytes_3_phi_fu_226_p4;
reg   [31:0] ap_phi_mux_expected_bytes_6_phi_fu_238_p4;
wire   [31:0] expected_bytes_4_7_fu_664_p3;
wire   [31:0] ap_phi_reg_pp0_iter1_expected_bytes_6_reg_234;
wire   [128:0] tmp_213_fu_352_p7;
wire   [128:0] tmp_11_1_fu_417_p7;
wire   [128:0] tmp_427_fu_672_p7;
reg    ap_block_pp0_stage0_01001;
reg   [15:0] dest_V_fu_142;
wire   [15:0] dest_V_1_fu_391_p1;
reg   [7:0] tmp_id_V_fu_146;
wire   [7:0] grp_fu_246_p4;
reg   [39:0] p_Val2_s_fu_150;
wire   [39:0] p_Result_6_fu_369_p3;
wire   [39:0] p_Result_4_fu_405_p3;
reg   [7:0] tmp_dest_V_fu_154;
reg   [0:0] tmp_last_V_fu_158;
wire   [0:0] tmp_last_V_1_fu_615_p2;
reg   [7:0] tmp_keep_V_fu_162;
reg   [7:0] tmp_id_V_1_fu_166;
reg   [39:0] tmp_user_V_fu_170;
wire   [7:0] p_Result_s_fu_279_p4;
wire   [0:0] tmp_5_fu_295_p2;
wire   [0:0] tmp_4_fu_289_p2;
wire   [0:0] tmp_7_fu_307_p2;
wire   [0:0] tmp_6_fu_301_p2;
wire   [0:0] tmp_10_fu_319_p2;
wire   [0:0] tmp_8_fu_313_p2;
wire   [3:0] grp_fu_256_p4;
wire   [15:0] p_Result_s_53_fu_377_p4;
wire   [0:0] tmp_fu_271_p3;
wire   [71:0] tmp_12_fu_413_p1;
wire   [30:0] tmp_15_fu_452_p1;
wire   [0:0] tmp_17_fu_470_p3;
wire   [30:0] expected_bytes_5_cas_fu_478_p2;
wire   [30:0] expected_bytes_4_s_fu_484_p3;
wire   [31:0] expected_bytes_4_ca_fu_492_p1;
wire   [0:0] tmp_18_fu_496_p3;
wire   [31:0] expected_bytes_5_1_fu_504_p2;
wire   [31:0] expected_bytes_4_1_fu_510_p3;
wire   [0:0] tmp_19_fu_518_p3;
wire   [31:0] expected_bytes_5_2_fu_526_p2;
wire   [31:0] expected_bytes_4_2_fu_532_p3;
wire   [0:0] tmp_20_fu_540_p3;
wire   [31:0] expected_bytes_5_3_fu_548_p2;
wire   [31:0] tmp_s_fu_609_p2;
wire   [31:0] expected_bytes_5_4_fu_621_p2;
wire   [31:0] expected_bytes_4_4_fu_626_p3;
wire   [31:0] expected_bytes_5_5_fu_632_p2;
wire   [31:0] expected_bytes_4_5_fu_638_p3;
wire   [31:0] expected_bytes_5_6_fu_645_p2;
wire   [31:0] expected_bytes_4_6_fu_651_p3;
wire   [31:0] expected_bytes_5_7_fu_658_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_151;
reg    ap_condition_87;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((tmp_9_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_87)) begin
        if (((tmp_3_fu_331_p2 == 1'd0) & (tmp_11_fu_325_p2 == 1'd0))) begin
            expected_bytes_2_reg_207 <= expected_bytes_reg_195;
        end else if (((tmp_11_fu_325_p2 == 1'd0) & (tmp_3_fu_331_p2 == 1'd1))) begin
            expected_bytes_2_reg_207 <= expected_bytes_1_fu_387_p1;
        end else if ((tmp_11_fu_325_p2 == 1'd1)) begin
            expected_bytes_2_reg_207 <= 32'd4294967295;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_reg_767 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        expected_bytes_3_reg_222 <= ap_phi_mux_expected_bytes_6_phi_fu_238_p4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        expected_bytes_3_reg_222 <= expected_bytes_2_reg_207;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_87)) begin
        if ((tmp_11_fu_325_p2 == 1'd1)) begin
                        p_Val2_s_fu_150[4 : 0] <= p_Result_4_fu_405_p3[4 : 0];
        end else if (((tmp_11_fu_325_p2 == 1'd0) & (tmp_3_fu_331_p2 == 1'd1))) begin
                        p_Val2_s_fu_150[4 : 0] <= p_Result_6_fu_369_p3[4 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0))) & (tmp_11_fu_325_p2 == 1'd0) & (tmp_3_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        dest_V_fu_142 <= dest_V_1_fu_391_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op74_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        expected_bytes_4_3_reg_785 <= expected_bytes_4_3_fu_554_p3;
        packetIn_data_V_reg_775 <= packetIn_data_V_fu_456_p1;
        packetIn_keep_V_reg_780 <= {{stream_in_V_dout[79:72]}};
        tmp_21_reg_791 <= stream_in_V_dout[32'd76];
        tmp_22_reg_796 <= stream_in_V_dout[32'd77];
        tmp_23_reg_801 <= stream_in_V_dout[32'd78];
        tmp_24_reg_806 <= stream_in_V_dout[32'd79];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        expected_bytes_reg_195 <= expected_bytes_3_reg_222;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        packetOut_dest_V_reg_761 <= packetOut_dest_V_fu_442_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_446_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_771 <= stream_in_V_empty_n;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_9_reg_767 <= tmp_9_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op74_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_dest_V_fu_154 <= packetOut_dest_V_reg_761;
        tmp_keep_V_fu_162 <= {{stream_in_V_dout[79:72]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op113_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_id_V_1_fu_166 <= tmp_id_V_fu_146;
        tmp_last_V_fu_158 <= tmp_last_V_1_fu_615_p2;
        tmp_user_V_fu_170[4 : 0] <= p_Val2_s_fu_150[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((~((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0))) & (tmp_11_fu_325_p2 == 1'd0) & (tmp_3_fu_331_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | (~((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0))) & (tmp_11_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        tmp_id_V_fu_146 <= {{stream_in_V_dout[23:16]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_9_reg_767 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_expected_bytes_3_phi_fu_226_p4 = ap_phi_mux_expected_bytes_6_phi_fu_238_p4;
    end else begin
        ap_phi_mux_expected_bytes_3_phi_fu_226_p4 = expected_bytes_3_reg_222;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_151)) begin
        if ((tmp_2_reg_771 == 1'd0)) begin
            ap_phi_mux_expected_bytes_6_phi_fu_238_p4 = expected_bytes_3_reg_222;
        end else if ((tmp_2_reg_771 == 1'd1)) begin
            ap_phi_mux_expected_bytes_6_phi_fu_238_p4 = expected_bytes_4_7_fu_664_p3;
        end else begin
            ap_phi_mux_expected_bytes_6_phi_fu_238_p4 = ap_phi_reg_pp0_iter1_expected_bytes_6_reg_234;
        end
    end else begin
        ap_phi_mux_expected_bytes_6_phi_fu_238_p4 = ap_phi_reg_pp0_iter1_expected_bytes_6_reg_234;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((tmp_2_nbreadreq_fu_187_p3 == 1'd1) & (tmp_9_fu_446_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_in_V_blk_n = stream_in_V_empty_n;
    end else begin
        stream_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op74_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_in_V_read = 1'b1;
    end else begin
        stream_in_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_2_reg_771 == 1'd1) & (tmp_9_reg_767 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((tmp_3_fu_331_p2 == 1'd0) & (tmp_11_fu_325_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_11_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_blk_n = stream_out_V_full_n;
    end else begin
        stream_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op113_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        stream_out_V_din = tmp_427_fu_672_p7;
    end else if ((~((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0))) & (tmp_11_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        stream_out_V_din = tmp_11_1_fu_417_p7;
    end else if ((~((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op45_write_state2 == 1'b1))) begin
        stream_out_V_din = tmp_213_fu_352_p7;
    end else begin
        stream_out_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op113_write_state5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op45_write_state2 == 1'b1)) | (~((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0))) & (tmp_11_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        stream_out_V_write = 1'b1;
    end else begin
        stream_out_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((stream_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op113_write_state5 == 1'b1)) | ((stream_in_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op74_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((stream_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op113_write_state5 == 1'b1)) | ((stream_in_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op74_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((stream_out_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op113_write_state5 == 1'b1)) | ((stream_in_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op74_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state2 = ((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter0 = ((stream_in_V_empty_n == 1'b0) & (ap_predicate_op74_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((stream_out_V_full_n == 1'b0) & (ap_predicate_op113_write_state5 == 1'b1));
end

always @ (*) begin
    ap_condition_151 = ((tmp_9_reg_767 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_87 = (~((stream_in_V_empty_n == 1'b0) | ((stream_out_V_full_n == 1'b0) & (ap_predicate_op45_write_state2 == 1'b1)) | ((tmp_11_fu_325_p2 == 1'd1) & (stream_out_V_full_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_expected_bytes_6_reg_234 = 'bx;

always @ (*) begin
    ap_predicate_op113_write_state5 = ((tmp_2_reg_771 == 1'd1) & (tmp_9_reg_767 == 1'd1));
end

always @ (*) begin
    ap_predicate_op45_write_state2 = ((tmp_3_fu_331_p2 == 1'd0) & (tmp_11_fu_325_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op74_read_state4 = ((tmp_2_nbreadreq_fu_187_p3 == 1'd1) & (tmp_9_fu_446_p2 == 1'd1));
end

assign dest_V_1_fu_391_p1 = stream_in_V_dout[15:0];

assign expected_bytes_1_fu_387_p1 = p_Result_s_53_fu_377_p4;

assign expected_bytes_4_1_fu_510_p3 = ((tmp_18_fu_496_p3[0:0] === 1'b1) ? expected_bytes_5_1_fu_504_p2 : expected_bytes_4_ca_fu_492_p1);

assign expected_bytes_4_2_fu_532_p3 = ((tmp_19_fu_518_p3[0:0] === 1'b1) ? expected_bytes_5_2_fu_526_p2 : expected_bytes_4_1_fu_510_p3);

assign expected_bytes_4_3_fu_554_p3 = ((tmp_20_fu_540_p3[0:0] === 1'b1) ? expected_bytes_5_3_fu_548_p2 : expected_bytes_4_2_fu_532_p3);

assign expected_bytes_4_4_fu_626_p3 = ((tmp_21_reg_791[0:0] === 1'b1) ? expected_bytes_5_4_fu_621_p2 : expected_bytes_4_3_reg_785);

assign expected_bytes_4_5_fu_638_p3 = ((tmp_22_reg_796[0:0] === 1'b1) ? expected_bytes_5_5_fu_632_p2 : expected_bytes_4_4_fu_626_p3);

assign expected_bytes_4_6_fu_651_p3 = ((tmp_23_reg_801[0:0] === 1'b1) ? expected_bytes_5_6_fu_645_p2 : expected_bytes_4_5_fu_638_p3);

assign expected_bytes_4_7_fu_664_p3 = ((tmp_24_reg_806[0:0] === 1'b1) ? expected_bytes_5_7_fu_658_p2 : expected_bytes_4_6_fu_651_p3);

assign expected_bytes_4_ca_fu_492_p1 = expected_bytes_4_s_fu_484_p3;

assign expected_bytes_4_s_fu_484_p3 = ((tmp_17_fu_470_p3[0:0] === 1'b1) ? expected_bytes_5_cas_fu_478_p2 : tmp_15_fu_452_p1);

assign expected_bytes_5_1_fu_504_p2 = ($signed(32'd4294967295) + $signed(expected_bytes_4_ca_fu_492_p1));

assign expected_bytes_5_2_fu_526_p2 = ($signed(32'd4294967295) + $signed(expected_bytes_4_1_fu_510_p3));

assign expected_bytes_5_3_fu_548_p2 = ($signed(32'd4294967295) + $signed(expected_bytes_4_2_fu_532_p3));

assign expected_bytes_5_4_fu_621_p2 = ($signed(32'd4294967295) + $signed(expected_bytes_4_3_reg_785));

assign expected_bytes_5_5_fu_632_p2 = ($signed(32'd4294967295) + $signed(expected_bytes_4_4_fu_626_p3));

assign expected_bytes_5_6_fu_645_p2 = ($signed(32'd4294967295) + $signed(expected_bytes_4_5_fu_638_p3));

assign expected_bytes_5_7_fu_658_p2 = ($signed(32'd4294967295) + $signed(expected_bytes_4_6_fu_651_p3));

assign expected_bytes_5_cas_fu_478_p2 = ($signed(31'd2147483647) + $signed(tmp_15_fu_452_p1));

assign grp_fu_246_p4 = {{stream_in_V_dout[23:16]}};

assign grp_fu_256_p4 = {{stream_in_V_dout[59:56]}};

assign p_Result_4_fu_405_p3 = {{36'd0}, {grp_fu_256_p4}};

assign p_Result_6_fu_369_p3 = {{36'd1}, {grp_fu_256_p4}};

assign p_Result_s_53_fu_377_p4 = {{stream_in_V_dout[47:32]}};

assign p_Result_s_fu_279_p4 = {{stream_in_V_dout[31:24]}};

assign packetIn_data_V_fu_456_p1 = stream_in_V_dout[63:0];

assign packetOut_dest_V_fu_442_p1 = dest_V_fu_142[7:0];

assign tmp_10_fu_319_p2 = ((p_Result_s_fu_279_p4 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_11_1_fu_417_p7 = {{{{{{{{{{36'd0}, {grp_fu_256_p4}}}, {grp_fu_246_p4}}}, {8'd255}}}, {tmp_fu_271_p3}}}, {tmp_12_fu_413_p1}};

assign tmp_11_fu_325_p2 = (tmp_8_fu_313_p2 | tmp_10_fu_319_p2);

assign tmp_12_fu_413_p1 = stream_in_V_dout[71:0];

assign tmp_15_fu_452_p1 = ap_phi_mux_expected_bytes_3_phi_fu_226_p4[30:0];

assign tmp_17_fu_470_p3 = stream_in_V_dout[32'd72];

assign tmp_18_fu_496_p3 = stream_in_V_dout[32'd73];

assign tmp_19_fu_518_p3 = stream_in_V_dout[32'd74];

assign tmp_20_fu_540_p3 = stream_in_V_dout[32'd75];

assign tmp_213_fu_352_p7 = {{{{{{tmp_user_V_fu_170}, {tmp_id_V_1_fu_166}}, {tmp_keep_V_fu_162}}, {tmp_last_V_fu_158}}, {tmp_dest_V_fu_154}}, {64'd18446744073709551615}};

assign tmp_2_nbreadreq_fu_187_p3 = stream_in_V_empty_n;

assign tmp_3_fu_331_p2 = ((p_Result_s_fu_279_p4 == 8'd2) ? 1'b1 : 1'b0);

assign tmp_427_fu_672_p7 = {{{{{{p_Val2_s_fu_150}, {tmp_id_V_fu_146}}, {packetIn_keep_V_reg_780}}, {tmp_last_V_1_fu_615_p2}}, {packetOut_dest_V_reg_761}}, {packetIn_data_V_reg_775}};

assign tmp_4_fu_289_p2 = ((p_Result_s_fu_279_p4 == 8'd5) ? 1'b1 : 1'b0);

assign tmp_5_fu_295_p2 = ((p_Result_s_fu_279_p4 == 8'd4) ? 1'b1 : 1'b0);

assign tmp_6_fu_301_p2 = (tmp_5_fu_295_p2 | tmp_4_fu_289_p2);

assign tmp_7_fu_307_p2 = ((p_Result_s_fu_279_p4 == 8'd1) ? 1'b1 : 1'b0);

assign tmp_8_fu_313_p2 = (tmp_7_fu_307_p2 | tmp_6_fu_301_p2);

assign tmp_9_fu_446_p2 = (($signed(ap_phi_mux_expected_bytes_3_phi_fu_226_p4) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_fu_271_p3 = stream_in_V_dout[32'd80];

assign tmp_last_V_1_fu_615_p2 = (($signed(tmp_s_fu_609_p2) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign tmp_s_fu_609_p2 = ($signed(32'd4294967288) + $signed(expected_bytes_3_reg_222));

always @ (posedge ap_clk) begin
    p_Val2_s_fu_150[39:5] <= 35'b00000000000000000000000000000000000;
    tmp_user_V_fu_170[39:5] <= 35'b00000000000000000000000000000000000;
end

endmodule //NFR
