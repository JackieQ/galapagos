-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity application_bridge is
port (
    from_app_V_dout : IN STD_LOGIC_VECTOR (128 downto 0);
    from_app_V_empty_n : IN STD_LOGIC;
    from_app_V_read : OUT STD_LOGIC;
    to_app_V_din : OUT STD_LOGIC_VECTOR (128 downto 0);
    to_app_V_full_n : IN STD_LOGIC;
    to_app_V_write : OUT STD_LOGIC;
    from_net_V_dout : IN STD_LOGIC_VECTOR (80 downto 0);
    from_net_V_empty_n : IN STD_LOGIC;
    from_net_V_read : OUT STD_LOGIC;
    to_net_V_din : OUT STD_LOGIC_VECTOR (80 downto 0);
    to_net_V_full_n : IN STD_LOGIC;
    to_net_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC );
end;


architecture behav of application_bridge is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "application_bridge,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=6.400000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=17.222000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=749,HLS_SYN_LUT=1684}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv129_lc_1 : STD_LOGIC_VECTOR (128 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv81_0 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal net_to_app_U0_ap_start : STD_LOGIC := '0';
    signal net_to_app_U0_ap_done : STD_LOGIC;
    signal net_to_app_U0_ap_continue : STD_LOGIC;
    signal net_to_app_U0_ap_idle : STD_LOGIC;
    signal net_to_app_U0_ap_ready : STD_LOGIC;
    signal net_to_app_U0_from_net_V_read : STD_LOGIC;
    signal net_to_app_U0_to_app_V_din : STD_LOGIC_VECTOR (128 downto 0);
    signal net_to_app_U0_to_app_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal app_to_net_U0_ap_start : STD_LOGIC := '0';
    signal app_to_net_U0_ap_done : STD_LOGIC;
    signal app_to_net_U0_ap_continue : STD_LOGIC;
    signal app_to_net_U0_ap_idle : STD_LOGIC;
    signal app_to_net_U0_ap_ready : STD_LOGIC;
    signal app_to_net_U0_from_app_V_read : STD_LOGIC;
    signal app_to_net_U0_to_net_V_din : STD_LOGIC_VECTOR (80 downto 0);
    signal app_to_net_U0_to_net_V_write : STD_LOGIC;
    signal net_to_app_U0_start_full_n : STD_LOGIC;
    signal net_to_app_U0_start_write : STD_LOGIC;
    signal app_to_net_U0_start_full_n : STD_LOGIC;
    signal app_to_net_U0_start_write : STD_LOGIC;

    component net_to_app IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        from_net_V_dout : IN STD_LOGIC_VECTOR (80 downto 0);
        from_net_V_empty_n : IN STD_LOGIC;
        from_net_V_read : OUT STD_LOGIC;
        to_app_V_din : OUT STD_LOGIC_VECTOR (128 downto 0);
        to_app_V_full_n : IN STD_LOGIC;
        to_app_V_write : OUT STD_LOGIC );
    end component;


    component app_to_net IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        from_app_V_dout : IN STD_LOGIC_VECTOR (128 downto 0);
        from_app_V_empty_n : IN STD_LOGIC;
        from_app_V_read : OUT STD_LOGIC;
        to_net_V_din : OUT STD_LOGIC_VECTOR (80 downto 0);
        to_net_V_full_n : IN STD_LOGIC;
        to_net_V_write : OUT STD_LOGIC );
    end component;



begin
    net_to_app_U0 : component net_to_app
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => net_to_app_U0_ap_start,
        ap_done => net_to_app_U0_ap_done,
        ap_continue => net_to_app_U0_ap_continue,
        ap_idle => net_to_app_U0_ap_idle,
        ap_ready => net_to_app_U0_ap_ready,
        from_net_V_dout => from_net_V_dout,
        from_net_V_empty_n => from_net_V_empty_n,
        from_net_V_read => net_to_app_U0_from_net_V_read,
        to_app_V_din => net_to_app_U0_to_app_V_din,
        to_app_V_full_n => to_app_V_full_n,
        to_app_V_write => net_to_app_U0_to_app_V_write);

    app_to_net_U0 : component app_to_net
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => app_to_net_U0_ap_start,
        ap_done => app_to_net_U0_ap_done,
        ap_continue => app_to_net_U0_ap_continue,
        ap_idle => app_to_net_U0_ap_idle,
        ap_ready => app_to_net_U0_ap_ready,
        from_app_V_dout => from_app_V_dout,
        from_app_V_empty_n => from_app_V_empty_n,
        from_app_V_read => app_to_net_U0_from_app_V_read,
        to_net_V_din => app_to_net_U0_to_net_V_din,
        to_net_V_full_n => to_net_V_full_n,
        to_net_V_write => app_to_net_U0_to_net_V_write);





    app_to_net_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                app_to_net_U0_ap_start <= ap_const_logic_0;
            else
                app_to_net_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    net_to_app_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                net_to_app_U0_ap_start <= ap_const_logic_0;
            else
                net_to_app_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;

    ap_sync_continue <= ap_const_logic_0;
    app_to_net_U0_ap_continue <= ap_const_logic_1;
    app_to_net_U0_start_full_n <= ap_const_logic_1;
    app_to_net_U0_start_write <= ap_const_logic_0;
    from_app_V_read <= app_to_net_U0_from_app_V_read;
    from_net_V_read <= net_to_app_U0_from_net_V_read;
    net_to_app_U0_ap_continue <= ap_const_logic_1;
    net_to_app_U0_start_full_n <= ap_const_logic_1;
    net_to_app_U0_start_write <= ap_const_logic_0;
    to_app_V_din <= net_to_app_U0_to_app_V_din;
    to_app_V_write <= net_to_app_U0_to_app_V_write;
    to_net_V_din <= app_to_net_U0_to_net_V_din;
    to_net_V_write <= app_to_net_U0_to_net_V_write;
end behav;
