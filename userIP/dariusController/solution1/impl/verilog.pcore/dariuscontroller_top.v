// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps
module dariuscontroller_top (
m_axi_mem_AWID,
m_axi_mem_AWADDR,
m_axi_mem_AWLEN,
m_axi_mem_AWSIZE,
m_axi_mem_AWBURST,
m_axi_mem_AWLOCK,
m_axi_mem_AWCACHE,
m_axi_mem_AWPROT,
m_axi_mem_AWQOS,
m_axi_mem_AWUSER,
m_axi_mem_AWVALID,
m_axi_mem_AWREADY,
m_axi_mem_WDATA,
m_axi_mem_WSTRB,
m_axi_mem_WLAST,
m_axi_mem_WUSER,
m_axi_mem_WVALID,
m_axi_mem_WREADY,
m_axi_mem_BID,
m_axi_mem_BRESP,
m_axi_mem_BUSER,
m_axi_mem_BVALID,
m_axi_mem_BREADY,
m_axi_mem_ARID,
m_axi_mem_ARADDR,
m_axi_mem_ARLEN,
m_axi_mem_ARSIZE,
m_axi_mem_ARBURST,
m_axi_mem_ARLOCK,
m_axi_mem_ARCACHE,
m_axi_mem_ARPROT,
m_axi_mem_ARQOS,
m_axi_mem_ARUSER,
m_axi_mem_ARVALID,
m_axi_mem_ARREADY,
m_axi_mem_RID,
m_axi_mem_RDATA,
m_axi_mem_RRESP,
m_axi_mem_RLAST,
m_axi_mem_RUSER,
m_axi_mem_RVALID,
m_axi_mem_RREADY,
m_axi_darius_driver_AWID,
m_axi_darius_driver_AWADDR,
m_axi_darius_driver_AWLEN,
m_axi_darius_driver_AWSIZE,
m_axi_darius_driver_AWBURST,
m_axi_darius_driver_AWLOCK,
m_axi_darius_driver_AWCACHE,
m_axi_darius_driver_AWPROT,
m_axi_darius_driver_AWQOS,
m_axi_darius_driver_AWUSER,
m_axi_darius_driver_AWVALID,
m_axi_darius_driver_AWREADY,
m_axi_darius_driver_WDATA,
m_axi_darius_driver_WSTRB,
m_axi_darius_driver_WLAST,
m_axi_darius_driver_WUSER,
m_axi_darius_driver_WVALID,
m_axi_darius_driver_WREADY,
m_axi_darius_driver_BID,
m_axi_darius_driver_BRESP,
m_axi_darius_driver_BUSER,
m_axi_darius_driver_BVALID,
m_axi_darius_driver_BREADY,
m_axi_darius_driver_ARID,
m_axi_darius_driver_ARADDR,
m_axi_darius_driver_ARLEN,
m_axi_darius_driver_ARSIZE,
m_axi_darius_driver_ARBURST,
m_axi_darius_driver_ARLOCK,
m_axi_darius_driver_ARCACHE,
m_axi_darius_driver_ARPROT,
m_axi_darius_driver_ARQOS,
m_axi_darius_driver_ARUSER,
m_axi_darius_driver_ARVALID,
m_axi_darius_driver_ARREADY,
m_axi_darius_driver_RID,
m_axi_darius_driver_RDATA,
m_axi_darius_driver_RRESP,
m_axi_darius_driver_RLAST,
m_axi_darius_driver_RUSER,
m_axi_darius_driver_RVALID,
m_axi_darius_driver_RREADY,
stream_in_V_TVALID,
stream_in_V_TREADY,
stream_in_V_TDATA,
stream_in_V_TDEST,
stream_in_V_TLAST,
stream_in_V_TID,
stream_in_V_TKEEP,
stream_in_V_TUSER,
stream_out_V_TVALID,
stream_out_V_TREADY,
stream_out_V_TDATA,
stream_out_V_TDEST,
stream_out_V_TLAST,
stream_out_V_TID,
stream_out_V_TKEEP,
stream_out_V_TUSER,
aresetn,
aclk,
id_in_V
);

parameter C_M_AXI_MEM_ID_WIDTH = 1;
parameter C_M_AXI_MEM_ADDR_WIDTH = 32;
parameter C_M_AXI_MEM_DATA_WIDTH = 32;
parameter C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter C_M_AXI_MEM_USER_DATA_WIDTH = 32;
parameter C_M_AXI_MEM_TARGET_ADDR = 32'h00000000;
parameter C_M_AXI_MEM_USER_VALUE = 1'b0;
parameter C_M_AXI_MEM_PROT_VALUE = 3'b010;
parameter C_M_AXI_MEM_CACHE_VALUE = 4'b0000;
parameter C_M_AXI_DARIUS_DRIVER_ID_WIDTH = 1;
parameter C_M_AXI_DARIUS_DRIVER_ADDR_WIDTH = 32;
parameter C_M_AXI_DARIUS_DRIVER_DATA_WIDTH = 32;
parameter C_M_AXI_DARIUS_DRIVER_AWUSER_WIDTH = 1;
parameter C_M_AXI_DARIUS_DRIVER_ARUSER_WIDTH = 1;
parameter C_M_AXI_DARIUS_DRIVER_WUSER_WIDTH = 1;
parameter C_M_AXI_DARIUS_DRIVER_RUSER_WIDTH = 1;
parameter C_M_AXI_DARIUS_DRIVER_BUSER_WIDTH = 1;
parameter C_M_AXI_DARIUS_DRIVER_USER_DATA_WIDTH = 32;
parameter C_M_AXI_DARIUS_DRIVER_TARGET_ADDR = 32'h00000000;
parameter C_M_AXI_DARIUS_DRIVER_USER_VALUE = 1'b0;
parameter C_M_AXI_DARIUS_DRIVER_PROT_VALUE = 3'b010;
parameter C_M_AXI_DARIUS_DRIVER_CACHE_VALUE = 4'b0000;
parameter RESET_ACTIVE_LOW = 1;

output [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID ;
output [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR ;
output [8 - 1:0] m_axi_mem_AWLEN ;
output [3 - 1:0] m_axi_mem_AWSIZE ;
output [2 - 1:0] m_axi_mem_AWBURST ;
output [2 - 1:0] m_axi_mem_AWLOCK ;
output [4 - 1:0] m_axi_mem_AWCACHE ;
output [3 - 1:0] m_axi_mem_AWPROT ;
output [4 - 1:0] m_axi_mem_AWQOS ;
output [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER ;
output m_axi_mem_AWVALID ;
input m_axi_mem_AWREADY ;
output [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA ;
output [C_M_AXI_MEM_DATA_WIDTH/8 - 1:0] m_axi_mem_WSTRB ;
output m_axi_mem_WLAST ;
output [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER ;
output m_axi_mem_WVALID ;
input m_axi_mem_WREADY ;
input [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID ;
input [2 - 1:0] m_axi_mem_BRESP ;
input [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER ;
input m_axi_mem_BVALID ;
output m_axi_mem_BREADY ;
output [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID ;
output [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR ;
output [8 - 1:0] m_axi_mem_ARLEN ;
output [3 - 1:0] m_axi_mem_ARSIZE ;
output [2 - 1:0] m_axi_mem_ARBURST ;
output [2 - 1:0] m_axi_mem_ARLOCK ;
output [4 - 1:0] m_axi_mem_ARCACHE ;
output [3 - 1:0] m_axi_mem_ARPROT ;
output [4 - 1:0] m_axi_mem_ARQOS ;
output [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER ;
output m_axi_mem_ARVALID ;
input m_axi_mem_ARREADY ;
input [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID ;
input [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA ;
input [2 - 1:0] m_axi_mem_RRESP ;
input m_axi_mem_RLAST ;
input [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER ;
input m_axi_mem_RVALID ;
output m_axi_mem_RREADY ;


output [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_AWID ;
output [C_M_AXI_DARIUS_DRIVER_ADDR_WIDTH - 1:0] m_axi_darius_driver_AWADDR ;
output [8 - 1:0] m_axi_darius_driver_AWLEN ;
output [3 - 1:0] m_axi_darius_driver_AWSIZE ;
output [2 - 1:0] m_axi_darius_driver_AWBURST ;
output [2 - 1:0] m_axi_darius_driver_AWLOCK ;
output [4 - 1:0] m_axi_darius_driver_AWCACHE ;
output [3 - 1:0] m_axi_darius_driver_AWPROT ;
output [4 - 1:0] m_axi_darius_driver_AWQOS ;
output [C_M_AXI_DARIUS_DRIVER_AWUSER_WIDTH - 1:0] m_axi_darius_driver_AWUSER ;
output m_axi_darius_driver_AWVALID ;
input m_axi_darius_driver_AWREADY ;
output [C_M_AXI_DARIUS_DRIVER_DATA_WIDTH - 1:0] m_axi_darius_driver_WDATA ;
output [C_M_AXI_DARIUS_DRIVER_DATA_WIDTH/8 - 1:0] m_axi_darius_driver_WSTRB ;
output m_axi_darius_driver_WLAST ;
output [C_M_AXI_DARIUS_DRIVER_WUSER_WIDTH - 1:0] m_axi_darius_driver_WUSER ;
output m_axi_darius_driver_WVALID ;
input m_axi_darius_driver_WREADY ;
input [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_BID ;
input [2 - 1:0] m_axi_darius_driver_BRESP ;
input [C_M_AXI_DARIUS_DRIVER_BUSER_WIDTH - 1:0] m_axi_darius_driver_BUSER ;
input m_axi_darius_driver_BVALID ;
output m_axi_darius_driver_BREADY ;
output [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_ARID ;
output [C_M_AXI_DARIUS_DRIVER_ADDR_WIDTH - 1:0] m_axi_darius_driver_ARADDR ;
output [8 - 1:0] m_axi_darius_driver_ARLEN ;
output [3 - 1:0] m_axi_darius_driver_ARSIZE ;
output [2 - 1:0] m_axi_darius_driver_ARBURST ;
output [2 - 1:0] m_axi_darius_driver_ARLOCK ;
output [4 - 1:0] m_axi_darius_driver_ARCACHE ;
output [3 - 1:0] m_axi_darius_driver_ARPROT ;
output [4 - 1:0] m_axi_darius_driver_ARQOS ;
output [C_M_AXI_DARIUS_DRIVER_ARUSER_WIDTH - 1:0] m_axi_darius_driver_ARUSER ;
output m_axi_darius_driver_ARVALID ;
input m_axi_darius_driver_ARREADY ;
input [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_RID ;
input [C_M_AXI_DARIUS_DRIVER_DATA_WIDTH - 1:0] m_axi_darius_driver_RDATA ;
input [2 - 1:0] m_axi_darius_driver_RRESP ;
input m_axi_darius_driver_RLAST ;
input [C_M_AXI_DARIUS_DRIVER_RUSER_WIDTH - 1:0] m_axi_darius_driver_RUSER ;
input m_axi_darius_driver_RVALID ;
output m_axi_darius_driver_RREADY ;


input stream_in_V_TVALID ;
output stream_in_V_TREADY ;
input [64 - 1:0] stream_in_V_TDATA ;
input [8 - 1:0] stream_in_V_TDEST ;
input [1 - 1:0] stream_in_V_TLAST ;
input [8 - 1:0] stream_in_V_TID ;
input [8 - 1:0] stream_in_V_TKEEP ;
input [40 - 1:0] stream_in_V_TUSER ;


output stream_out_V_TVALID ;
input stream_out_V_TREADY ;
output [64 - 1:0] stream_out_V_TDATA ;
output [8 - 1:0] stream_out_V_TDEST ;
output [1 - 1:0] stream_out_V_TLAST ;
output [8 - 1:0] stream_out_V_TID ;
output [8 - 1:0] stream_out_V_TKEEP ;
output [40 - 1:0] stream_out_V_TUSER ;

input aresetn ;

input aclk ;

input [16 - 1:0] id_in_V ;


wire [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
wire [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
wire [8 - 1:0] m_axi_mem_AWLEN;
wire [3 - 1:0] m_axi_mem_AWSIZE;
wire [2 - 1:0] m_axi_mem_AWBURST;
wire [2 - 1:0] m_axi_mem_AWLOCK;
wire [4 - 1:0] m_axi_mem_AWCACHE;
wire [3 - 1:0] m_axi_mem_AWPROT;
wire [4 - 1:0] m_axi_mem_AWQOS;
wire [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
wire m_axi_mem_AWVALID;
wire m_axi_mem_AWREADY;
wire [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
wire [C_M_AXI_MEM_DATA_WIDTH/8 - 1:0] m_axi_mem_WSTRB;
wire m_axi_mem_WLAST;
wire [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
wire m_axi_mem_WVALID;
wire m_axi_mem_WREADY;
wire [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
wire [2 - 1:0] m_axi_mem_BRESP;
wire [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
wire m_axi_mem_BVALID;
wire m_axi_mem_BREADY;
wire [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
wire [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
wire [8 - 1:0] m_axi_mem_ARLEN;
wire [3 - 1:0] m_axi_mem_ARSIZE;
wire [2 - 1:0] m_axi_mem_ARBURST;
wire [2 - 1:0] m_axi_mem_ARLOCK;
wire [4 - 1:0] m_axi_mem_ARCACHE;
wire [3 - 1:0] m_axi_mem_ARPROT;
wire [4 - 1:0] m_axi_mem_ARQOS;
wire [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
wire m_axi_mem_ARVALID;
wire m_axi_mem_ARREADY;
wire [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
wire [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
wire [2 - 1:0] m_axi_mem_RRESP;
wire m_axi_mem_RLAST;
wire [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
wire m_axi_mem_RVALID;
wire m_axi_mem_RREADY;


wire [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_AWID;
wire [C_M_AXI_DARIUS_DRIVER_ADDR_WIDTH - 1:0] m_axi_darius_driver_AWADDR;
wire [8 - 1:0] m_axi_darius_driver_AWLEN;
wire [3 - 1:0] m_axi_darius_driver_AWSIZE;
wire [2 - 1:0] m_axi_darius_driver_AWBURST;
wire [2 - 1:0] m_axi_darius_driver_AWLOCK;
wire [4 - 1:0] m_axi_darius_driver_AWCACHE;
wire [3 - 1:0] m_axi_darius_driver_AWPROT;
wire [4 - 1:0] m_axi_darius_driver_AWQOS;
wire [C_M_AXI_DARIUS_DRIVER_AWUSER_WIDTH - 1:0] m_axi_darius_driver_AWUSER;
wire m_axi_darius_driver_AWVALID;
wire m_axi_darius_driver_AWREADY;
wire [C_M_AXI_DARIUS_DRIVER_DATA_WIDTH - 1:0] m_axi_darius_driver_WDATA;
wire [C_M_AXI_DARIUS_DRIVER_DATA_WIDTH/8 - 1:0] m_axi_darius_driver_WSTRB;
wire m_axi_darius_driver_WLAST;
wire [C_M_AXI_DARIUS_DRIVER_WUSER_WIDTH - 1:0] m_axi_darius_driver_WUSER;
wire m_axi_darius_driver_WVALID;
wire m_axi_darius_driver_WREADY;
wire [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_BID;
wire [2 - 1:0] m_axi_darius_driver_BRESP;
wire [C_M_AXI_DARIUS_DRIVER_BUSER_WIDTH - 1:0] m_axi_darius_driver_BUSER;
wire m_axi_darius_driver_BVALID;
wire m_axi_darius_driver_BREADY;
wire [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_ARID;
wire [C_M_AXI_DARIUS_DRIVER_ADDR_WIDTH - 1:0] m_axi_darius_driver_ARADDR;
wire [8 - 1:0] m_axi_darius_driver_ARLEN;
wire [3 - 1:0] m_axi_darius_driver_ARSIZE;
wire [2 - 1:0] m_axi_darius_driver_ARBURST;
wire [2 - 1:0] m_axi_darius_driver_ARLOCK;
wire [4 - 1:0] m_axi_darius_driver_ARCACHE;
wire [3 - 1:0] m_axi_darius_driver_ARPROT;
wire [4 - 1:0] m_axi_darius_driver_ARQOS;
wire [C_M_AXI_DARIUS_DRIVER_ARUSER_WIDTH - 1:0] m_axi_darius_driver_ARUSER;
wire m_axi_darius_driver_ARVALID;
wire m_axi_darius_driver_ARREADY;
wire [C_M_AXI_DARIUS_DRIVER_ID_WIDTH - 1:0] m_axi_darius_driver_RID;
wire [C_M_AXI_DARIUS_DRIVER_DATA_WIDTH - 1:0] m_axi_darius_driver_RDATA;
wire [2 - 1:0] m_axi_darius_driver_RRESP;
wire m_axi_darius_driver_RLAST;
wire [C_M_AXI_DARIUS_DRIVER_RUSER_WIDTH - 1:0] m_axi_darius_driver_RUSER;
wire m_axi_darius_driver_RVALID;
wire m_axi_darius_driver_RREADY;


wire stream_in_V_TVALID;
wire stream_in_V_TREADY;
wire [64 - 1:0] stream_in_V_TDATA;
wire [8 - 1:0] stream_in_V_TDEST;
wire [1 - 1:0] stream_in_V_TLAST;
wire [8 - 1:0] stream_in_V_TID;
wire [8 - 1:0] stream_in_V_TKEEP;
wire [40 - 1:0] stream_in_V_TUSER;


wire stream_out_V_TVALID;
wire stream_out_V_TREADY;
wire [64 - 1:0] stream_out_V_TDATA;
wire [8 - 1:0] stream_out_V_TDEST;
wire [1 - 1:0] stream_out_V_TLAST;
wire [8 - 1:0] stream_out_V_TID;
wire [8 - 1:0] stream_out_V_TKEEP;
wire [40 - 1:0] stream_out_V_TUSER;

wire aresetn;


wire [32 - 1:0] sig_dariusController_mem_datain;
wire [32 - 1:0] sig_dariusController_mem_dataout;
wire [32 - 1:0] sig_dariusController_mem_address;
wire [32 - 1:0] sig_dariusController_mem_size;
wire sig_dariusController_mem_req_din;
wire sig_dariusController_mem_req_full_n;
wire sig_dariusController_mem_req_write;
wire sig_dariusController_mem_rsp_empty_n;
wire sig_dariusController_mem_rsp_read;

wire [32 - 1:0] sig_dariusController_darius_driver_datain;
wire [32 - 1:0] sig_dariusController_darius_driver_dataout;
wire [32 - 1:0] sig_dariusController_darius_driver_address;
wire [32 - 1:0] sig_dariusController_darius_driver_size;
wire sig_dariusController_darius_driver_req_din;
wire sig_dariusController_darius_driver_req_full_n;
wire sig_dariusController_darius_driver_req_write;
wire sig_dariusController_darius_driver_rsp_empty_n;
wire sig_dariusController_darius_driver_rsp_read;

wire [129 - 1:0] sig_dariusController_stream_in_V_dout;
wire sig_dariusController_stream_in_V_empty_n;
wire sig_dariusController_stream_in_V_read;

wire [129 - 1:0] sig_dariusController_stream_out_V_din;
wire sig_dariusController_stream_out_V_full_n;
wire sig_dariusController_stream_out_V_write;

wire sig_dariusController_ap_rst;



dariusController dariusController_U(
    .mem_datain(sig_dariusController_mem_datain),
    .mem_dataout(sig_dariusController_mem_dataout),
    .mem_address(sig_dariusController_mem_address),
    .mem_size(sig_dariusController_mem_size),
    .mem_req_din(sig_dariusController_mem_req_din),
    .mem_req_full_n(sig_dariusController_mem_req_full_n),
    .mem_req_write(sig_dariusController_mem_req_write),
    .mem_rsp_empty_n(sig_dariusController_mem_rsp_empty_n),
    .mem_rsp_read(sig_dariusController_mem_rsp_read),
    .darius_driver_datain(sig_dariusController_darius_driver_datain),
    .darius_driver_dataout(sig_dariusController_darius_driver_dataout),
    .darius_driver_address(sig_dariusController_darius_driver_address),
    .darius_driver_size(sig_dariusController_darius_driver_size),
    .darius_driver_req_din(sig_dariusController_darius_driver_req_din),
    .darius_driver_req_full_n(sig_dariusController_darius_driver_req_full_n),
    .darius_driver_req_write(sig_dariusController_darius_driver_req_write),
    .darius_driver_rsp_empty_n(sig_dariusController_darius_driver_rsp_empty_n),
    .darius_driver_rsp_read(sig_dariusController_darius_driver_rsp_read),
    .stream_in_V_dout(sig_dariusController_stream_in_V_dout),
    .stream_in_V_empty_n(sig_dariusController_stream_in_V_empty_n),
    .stream_in_V_read(sig_dariusController_stream_in_V_read),
    .stream_out_V_din(sig_dariusController_stream_out_V_din),
    .stream_out_V_full_n(sig_dariusController_stream_out_V_full_n),
    .stream_out_V_write(sig_dariusController_stream_out_V_write),
    .ap_rst(sig_dariusController_ap_rst),
    .ap_clk(aclk),
    .id_in_V(id_in_V)
);

dariusController_mem_if #(
    .C_ID_WIDTH(C_M_AXI_MEM_ID_WIDTH),
    .C_ADDR_WIDTH(C_M_AXI_MEM_ADDR_WIDTH),
    .C_DATA_WIDTH(C_M_AXI_MEM_DATA_WIDTH),
    .C_AWUSER_WIDTH(C_M_AXI_MEM_AWUSER_WIDTH),
    .C_ARUSER_WIDTH(C_M_AXI_MEM_ARUSER_WIDTH),
    .C_WUSER_WIDTH(C_M_AXI_MEM_WUSER_WIDTH),
    .C_RUSER_WIDTH(C_M_AXI_MEM_RUSER_WIDTH),
    .C_BUSER_WIDTH(C_M_AXI_MEM_BUSER_WIDTH),
    .C_USER_DATA_WIDTH(C_M_AXI_MEM_USER_DATA_WIDTH),
    .C_TARGET_ADDR(C_M_AXI_MEM_TARGET_ADDR),
    .C_USER_VALUE(C_M_AXI_MEM_USER_VALUE),
    .C_PROT_VALUE(C_M_AXI_MEM_PROT_VALUE),
    .C_CACHE_VALUE(C_M_AXI_MEM_CACHE_VALUE))
dariusController_mem_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .USER_datain(sig_dariusController_mem_datain),
    .USER_dataout(sig_dariusController_mem_dataout),
    .USER_address(sig_dariusController_mem_address),
    .USER_size(sig_dariusController_mem_size),
    .USER_req_din(sig_dariusController_mem_req_din),
    .USER_req_full_n(sig_dariusController_mem_req_full_n),
    .USER_req_write(sig_dariusController_mem_req_write),
    .USER_rsp_empty_n(sig_dariusController_mem_rsp_empty_n),
    .USER_rsp_read(sig_dariusController_mem_rsp_read),
    .AWID(m_axi_mem_AWID),
    .AWADDR(m_axi_mem_AWADDR),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWUSER(m_axi_mem_AWUSER),
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WUSER(m_axi_mem_WUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .BID(m_axi_mem_BID),
    .BRESP(m_axi_mem_BRESP),
    .BUSER(m_axi_mem_BUSER),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .ARID(m_axi_mem_ARID),
    .ARADDR(m_axi_mem_ARADDR),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARUSER(m_axi_mem_ARUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .RID(m_axi_mem_RID),
    .RDATA(m_axi_mem_RDATA),
    .RRESP(m_axi_mem_RRESP),
    .RLAST(m_axi_mem_RLAST),
    .RUSER(m_axi_mem_RUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY));

dariusController_darius_driver_if #(
    .C_ID_WIDTH(C_M_AXI_DARIUS_DRIVER_ID_WIDTH),
    .C_ADDR_WIDTH(C_M_AXI_DARIUS_DRIVER_ADDR_WIDTH),
    .C_DATA_WIDTH(C_M_AXI_DARIUS_DRIVER_DATA_WIDTH),
    .C_AWUSER_WIDTH(C_M_AXI_DARIUS_DRIVER_AWUSER_WIDTH),
    .C_ARUSER_WIDTH(C_M_AXI_DARIUS_DRIVER_ARUSER_WIDTH),
    .C_WUSER_WIDTH(C_M_AXI_DARIUS_DRIVER_WUSER_WIDTH),
    .C_RUSER_WIDTH(C_M_AXI_DARIUS_DRIVER_RUSER_WIDTH),
    .C_BUSER_WIDTH(C_M_AXI_DARIUS_DRIVER_BUSER_WIDTH),
    .C_USER_DATA_WIDTH(C_M_AXI_DARIUS_DRIVER_USER_DATA_WIDTH),
    .C_TARGET_ADDR(C_M_AXI_DARIUS_DRIVER_TARGET_ADDR),
    .C_USER_VALUE(C_M_AXI_DARIUS_DRIVER_USER_VALUE),
    .C_PROT_VALUE(C_M_AXI_DARIUS_DRIVER_PROT_VALUE),
    .C_CACHE_VALUE(C_M_AXI_DARIUS_DRIVER_CACHE_VALUE))
dariusController_darius_driver_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .USER_datain(sig_dariusController_darius_driver_datain),
    .USER_dataout(sig_dariusController_darius_driver_dataout),
    .USER_address(sig_dariusController_darius_driver_address),
    .USER_size(sig_dariusController_darius_driver_size),
    .USER_req_din(sig_dariusController_darius_driver_req_din),
    .USER_req_full_n(sig_dariusController_darius_driver_req_full_n),
    .USER_req_write(sig_dariusController_darius_driver_req_write),
    .USER_rsp_empty_n(sig_dariusController_darius_driver_rsp_empty_n),
    .USER_rsp_read(sig_dariusController_darius_driver_rsp_read),
    .AWID(m_axi_darius_driver_AWID),
    .AWADDR(m_axi_darius_driver_AWADDR),
    .AWLEN(m_axi_darius_driver_AWLEN),
    .AWSIZE(m_axi_darius_driver_AWSIZE),
    .AWBURST(m_axi_darius_driver_AWBURST),
    .AWLOCK(m_axi_darius_driver_AWLOCK),
    .AWCACHE(m_axi_darius_driver_AWCACHE),
    .AWPROT(m_axi_darius_driver_AWPROT),
    .AWQOS(m_axi_darius_driver_AWQOS),
    .AWUSER(m_axi_darius_driver_AWUSER),
    .AWVALID(m_axi_darius_driver_AWVALID),
    .AWREADY(m_axi_darius_driver_AWREADY),
    .WDATA(m_axi_darius_driver_WDATA),
    .WSTRB(m_axi_darius_driver_WSTRB),
    .WLAST(m_axi_darius_driver_WLAST),
    .WUSER(m_axi_darius_driver_WUSER),
    .WVALID(m_axi_darius_driver_WVALID),
    .WREADY(m_axi_darius_driver_WREADY),
    .BID(m_axi_darius_driver_BID),
    .BRESP(m_axi_darius_driver_BRESP),
    .BUSER(m_axi_darius_driver_BUSER),
    .BVALID(m_axi_darius_driver_BVALID),
    .BREADY(m_axi_darius_driver_BREADY),
    .ARID(m_axi_darius_driver_ARID),
    .ARADDR(m_axi_darius_driver_ARADDR),
    .ARLEN(m_axi_darius_driver_ARLEN),
    .ARSIZE(m_axi_darius_driver_ARSIZE),
    .ARBURST(m_axi_darius_driver_ARBURST),
    .ARLOCK(m_axi_darius_driver_ARLOCK),
    .ARCACHE(m_axi_darius_driver_ARCACHE),
    .ARPROT(m_axi_darius_driver_ARPROT),
    .ARQOS(m_axi_darius_driver_ARQOS),
    .ARUSER(m_axi_darius_driver_ARUSER),
    .ARVALID(m_axi_darius_driver_ARVALID),
    .ARREADY(m_axi_darius_driver_ARREADY),
    .RID(m_axi_darius_driver_RID),
    .RDATA(m_axi_darius_driver_RDATA),
    .RRESP(m_axi_darius_driver_RRESP),
    .RLAST(m_axi_darius_driver_RLAST),
    .RUSER(m_axi_darius_driver_RUSER),
    .RVALID(m_axi_darius_driver_RVALID),
    .RREADY(m_axi_darius_driver_RREADY));

dariusController_stream_in_V_if dariusController_stream_in_V_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .stream_in_V_dout(sig_dariusController_stream_in_V_dout),
    .stream_in_V_empty_n(sig_dariusController_stream_in_V_empty_n),
    .stream_in_V_read(sig_dariusController_stream_in_V_read),
    .TVALID(stream_in_V_TVALID),
    .TREADY(stream_in_V_TREADY),
    .TDATA(stream_in_V_TDATA),
    .TDEST(stream_in_V_TDEST),
    .TLAST(stream_in_V_TLAST),
    .TID(stream_in_V_TID),
    .TKEEP(stream_in_V_TKEEP),
    .TUSER(stream_in_V_TUSER));

dariusController_stream_out_V_if dariusController_stream_out_V_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .stream_out_V_din(sig_dariusController_stream_out_V_din),
    .stream_out_V_full_n(sig_dariusController_stream_out_V_full_n),
    .stream_out_V_write(sig_dariusController_stream_out_V_write),
    .TVALID(stream_out_V_TVALID),
    .TREADY(stream_out_V_TREADY),
    .TDATA(stream_out_V_TDATA),
    .TDEST(stream_out_V_TDEST),
    .TLAST(stream_out_V_TLAST),
    .TID(stream_out_V_TID),
    .TKEEP(stream_out_V_TKEEP),
    .TUSER(stream_out_V_TUSER));

dariusController_ap_rst_if #(
    .RESET_ACTIVE_LOW(RESET_ACTIVE_LOW))
ap_rst_if_U(
    .dout(sig_dariusController_ap_rst),
    .din(aresetn));

endmodule
