// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axiStreamGate.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axiStreamGate::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axiStreamGate::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> axiStreamGate::ap_ST_fsm_state1 = "1";
const sc_lv<5> axiStreamGate::ap_ST_fsm_state2 = "10";
const sc_lv<5> axiStreamGate::ap_ST_fsm_state3 = "100";
const sc_lv<5> axiStreamGate::ap_ST_fsm_state4 = "1000";
const sc_lv<5> axiStreamGate::ap_ST_fsm_state5 = "10000";
const bool axiStreamGate::ap_const_boolean_1 = true;
const sc_lv<1> axiStreamGate::ap_const_lv1_0 = "0";
const sc_lv<1> axiStreamGate::ap_const_lv1_1 = "1";
const sc_lv<2> axiStreamGate::ap_const_lv2_0 = "00";
const sc_lv<2> axiStreamGate::ap_const_lv2_2 = "10";
const sc_lv<2> axiStreamGate::ap_const_lv2_3 = "11";
const sc_lv<2> axiStreamGate::ap_const_lv2_1 = "1";
const sc_lv<32> axiStreamGate::ap_const_lv32_2 = "10";
const sc_lv<32> axiStreamGate::ap_const_lv32_3 = "11";
const int axiStreamGate::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> axiStreamGate::ap_const_lv32_1 = "1";
const sc_lv<32> axiStreamGate::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool axiStreamGate::ap_const_boolean_0 = false;

axiStreamGate::axiStreamGate(sc_module_name name) : sc_module(name), mVcdFile(0) {
    axiStreamGate_AXILiteS_s_axi_U = new axiStreamGate_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("axiStreamGate_AXILiteS_s_axi_U");
    axiStreamGate_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    axiStreamGate_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    axiStreamGate_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    axiStreamGate_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    axiStreamGate_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    axiStreamGate_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    axiStreamGate_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    axiStreamGate_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    axiStreamGate_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    axiStreamGate_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    axiStreamGate_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    axiStreamGate_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    axiStreamGate_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    axiStreamGate_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    axiStreamGate_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    axiStreamGate_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    axiStreamGate_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    axiStreamGate_AXILiteS_s_axi_U->ACLK(ap_clk);
    axiStreamGate_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    axiStreamGate_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    axiStreamGate_AXILiteS_s_axi_U->programming(programming);
    axiStreamGate_AXILiteS_s_axi_U->programSafe(programSafe);
    axiStreamGate_AXILiteS_s_axi_U->programSafe_ap_vld(programSafe_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_predicate_op34_write_state4 );

    SC_METHOD(thread_ap_condition_283);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_reg_123 );
    sensitive << ( tmp_1_reg_127 );
    sensitive << ( tmp_last_V_reg_136 );

    SC_METHOD(thread_ap_predicate_op34_write_state4);
    sensitive << ( tmp_reg_123 );
    sensitive << ( tmp_1_reg_127 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_packetIn_TDATA_blk_n);
    sensitive << ( packetIn_TVALID );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_packetIn_TREADY);
    sensitive << ( packetIn_TVALID );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_packetOut_TDATA);
    sensitive << ( packetOut_V_data_V_1_data_out );

    SC_METHOD(thread_packetOut_TDATA_blk_n);
    sensitive << ( packetOut_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_reg_123 );
    sensitive << ( tmp_1_reg_127 );

    SC_METHOD(thread_packetOut_TKEEP);
    sensitive << ( packetOut_V_keep_V_1_data_out );

    SC_METHOD(thread_packetOut_TLAST);
    sensitive << ( packetOut_V_last_V_1_data_out );

    SC_METHOD(thread_packetOut_TVALID);
    sensitive << ( packetOut_V_keep_V_1_state );

    SC_METHOD(thread_packetOut_V_data_V_1_ack_in);
    sensitive << ( packetOut_V_data_V_1_state );

    SC_METHOD(thread_packetOut_V_data_V_1_ack_out);
    sensitive << ( packetOut_TREADY );

    SC_METHOD(thread_packetOut_V_data_V_1_data_out);
    sensitive << ( packetOut_V_data_V_1_payload_A );
    sensitive << ( packetOut_V_data_V_1_payload_B );
    sensitive << ( packetOut_V_data_V_1_sel );

    SC_METHOD(thread_packetOut_V_data_V_1_load_A);
    sensitive << ( packetOut_V_data_V_1_sel_wr );
    sensitive << ( packetOut_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_data_V_1_load_B);
    sensitive << ( packetOut_V_data_V_1_sel_wr );
    sensitive << ( packetOut_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_data_V_1_sel);
    sensitive << ( packetOut_V_data_V_1_sel_rd );

    SC_METHOD(thread_packetOut_V_data_V_1_state_cmp_full);
    sensitive << ( packetOut_V_data_V_1_state );

    SC_METHOD(thread_packetOut_V_data_V_1_vld_in);
    sensitive << ( packetIn_TVALID );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_packetOut_V_data_V_1_vld_out);
    sensitive << ( packetOut_V_data_V_1_state );

    SC_METHOD(thread_packetOut_V_keep_V_1_ack_in);
    sensitive << ( packetOut_V_keep_V_1_state );

    SC_METHOD(thread_packetOut_V_keep_V_1_ack_out);
    sensitive << ( packetOut_TREADY );

    SC_METHOD(thread_packetOut_V_keep_V_1_data_out);
    sensitive << ( packetOut_V_keep_V_1_payload_A );
    sensitive << ( packetOut_V_keep_V_1_payload_B );
    sensitive << ( packetOut_V_keep_V_1_sel );

    SC_METHOD(thread_packetOut_V_keep_V_1_load_A);
    sensitive << ( packetOut_V_keep_V_1_sel_wr );
    sensitive << ( packetOut_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_keep_V_1_load_B);
    sensitive << ( packetOut_V_keep_V_1_sel_wr );
    sensitive << ( packetOut_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_keep_V_1_sel);
    sensitive << ( packetOut_V_keep_V_1_sel_rd );

    SC_METHOD(thread_packetOut_V_keep_V_1_state_cmp_full);
    sensitive << ( packetOut_V_keep_V_1_state );

    SC_METHOD(thread_packetOut_V_keep_V_1_vld_in);
    sensitive << ( packetIn_TVALID );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_packetOut_V_keep_V_1_vld_out);
    sensitive << ( packetOut_V_keep_V_1_state );

    SC_METHOD(thread_packetOut_V_last_V_1_ack_in);
    sensitive << ( packetOut_V_last_V_1_state );

    SC_METHOD(thread_packetOut_V_last_V_1_ack_out);
    sensitive << ( packetOut_TREADY );

    SC_METHOD(thread_packetOut_V_last_V_1_data_out);
    sensitive << ( packetOut_V_last_V_1_payload_A );
    sensitive << ( packetOut_V_last_V_1_payload_B );
    sensitive << ( packetOut_V_last_V_1_sel );

    SC_METHOD(thread_packetOut_V_last_V_1_load_A);
    sensitive << ( packetOut_V_last_V_1_sel_wr );
    sensitive << ( packetOut_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_last_V_1_load_B);
    sensitive << ( packetOut_V_last_V_1_sel_wr );
    sensitive << ( packetOut_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_last_V_1_sel);
    sensitive << ( packetOut_V_last_V_1_sel_rd );

    SC_METHOD(thread_packetOut_V_last_V_1_state_cmp_full);
    sensitive << ( packetOut_V_last_V_1_state );

    SC_METHOD(thread_packetOut_V_last_V_1_vld_in);
    sensitive << ( packetIn_TVALID );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_packetOut_V_last_V_1_vld_out);
    sensitive << ( packetOut_V_last_V_1_state );

    SC_METHOD(thread_programSafe);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_reg_123 );
    sensitive << ( tmp_1_reg_127 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_last_V_reg_136 );

    SC_METHOD(thread_programSafe_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_reg_123 );
    sensitive << ( tmp_1_reg_127 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_last_V_reg_136 );
    sensitive << ( ap_reg_ioackin_programSafe_dummy_ack );

    SC_METHOD(thread_tmp_1_nbreadreq_fu_66_p5);
    sensitive << ( packetIn_TVALID );

    SC_METHOD(thread_tmp_fu_102_p2);
    sensitive << ( programming );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( packetIn_TVALID );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_reg_123 );
    sensitive << ( tmp_1_reg_127 );
    sensitive << ( tmp_fu_102_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_nbreadreq_fu_66_p5 );
    sensitive << ( tmp_last_V_reg_136 );
    sensitive << ( ap_block_state4_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    packetOut_V_data_V_1_sel_rd = SC_LOGIC_0;
    packetOut_V_data_V_1_sel_wr = SC_LOGIC_0;
    packetOut_V_data_V_1_state = "00";
    packetOut_V_last_V_1_sel_rd = SC_LOGIC_0;
    packetOut_V_last_V_1_sel_wr = SC_LOGIC_0;
    packetOut_V_last_V_1_state = "00";
    packetOut_V_keep_V_1_sel_rd = SC_LOGIC_0;
    packetOut_V_keep_V_1_sel_wr = SC_LOGIC_0;
    packetOut_V_keep_V_1_state = "00";
    ap_CS_fsm = "00001";
    ap_reg_ioackin_programSafe_dummy_ack = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axiStreamGate_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, packetIn_TDATA, "(port)packetIn_TDATA");
    sc_trace(mVcdFile, packetIn_TVALID, "(port)packetIn_TVALID");
    sc_trace(mVcdFile, packetIn_TREADY, "(port)packetIn_TREADY");
    sc_trace(mVcdFile, packetIn_TLAST, "(port)packetIn_TLAST");
    sc_trace(mVcdFile, packetIn_TKEEP, "(port)packetIn_TKEEP");
    sc_trace(mVcdFile, packetOut_TDATA, "(port)packetOut_TDATA");
    sc_trace(mVcdFile, packetOut_TVALID, "(port)packetOut_TVALID");
    sc_trace(mVcdFile, packetOut_TREADY, "(port)packetOut_TREADY");
    sc_trace(mVcdFile, packetOut_TLAST, "(port)packetOut_TLAST");
    sc_trace(mVcdFile, packetOut_TKEEP, "(port)packetOut_TKEEP");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, programming, "programming");
    sc_trace(mVcdFile, packetOut_V_data_V_1_data_out, "packetOut_V_data_V_1_data_out");
    sc_trace(mVcdFile, packetOut_V_data_V_1_vld_in, "packetOut_V_data_V_1_vld_in");
    sc_trace(mVcdFile, packetOut_V_data_V_1_vld_out, "packetOut_V_data_V_1_vld_out");
    sc_trace(mVcdFile, packetOut_V_data_V_1_ack_in, "packetOut_V_data_V_1_ack_in");
    sc_trace(mVcdFile, packetOut_V_data_V_1_ack_out, "packetOut_V_data_V_1_ack_out");
    sc_trace(mVcdFile, packetOut_V_data_V_1_payload_A, "packetOut_V_data_V_1_payload_A");
    sc_trace(mVcdFile, packetOut_V_data_V_1_payload_B, "packetOut_V_data_V_1_payload_B");
    sc_trace(mVcdFile, packetOut_V_data_V_1_sel_rd, "packetOut_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, packetOut_V_data_V_1_sel_wr, "packetOut_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, packetOut_V_data_V_1_sel, "packetOut_V_data_V_1_sel");
    sc_trace(mVcdFile, packetOut_V_data_V_1_load_A, "packetOut_V_data_V_1_load_A");
    sc_trace(mVcdFile, packetOut_V_data_V_1_load_B, "packetOut_V_data_V_1_load_B");
    sc_trace(mVcdFile, packetOut_V_data_V_1_state, "packetOut_V_data_V_1_state");
    sc_trace(mVcdFile, packetOut_V_data_V_1_state_cmp_full, "packetOut_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, packetOut_V_last_V_1_data_out, "packetOut_V_last_V_1_data_out");
    sc_trace(mVcdFile, packetOut_V_last_V_1_vld_in, "packetOut_V_last_V_1_vld_in");
    sc_trace(mVcdFile, packetOut_V_last_V_1_vld_out, "packetOut_V_last_V_1_vld_out");
    sc_trace(mVcdFile, packetOut_V_last_V_1_ack_in, "packetOut_V_last_V_1_ack_in");
    sc_trace(mVcdFile, packetOut_V_last_V_1_ack_out, "packetOut_V_last_V_1_ack_out");
    sc_trace(mVcdFile, packetOut_V_last_V_1_payload_A, "packetOut_V_last_V_1_payload_A");
    sc_trace(mVcdFile, packetOut_V_last_V_1_payload_B, "packetOut_V_last_V_1_payload_B");
    sc_trace(mVcdFile, packetOut_V_last_V_1_sel_rd, "packetOut_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, packetOut_V_last_V_1_sel_wr, "packetOut_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, packetOut_V_last_V_1_sel, "packetOut_V_last_V_1_sel");
    sc_trace(mVcdFile, packetOut_V_last_V_1_load_A, "packetOut_V_last_V_1_load_A");
    sc_trace(mVcdFile, packetOut_V_last_V_1_load_B, "packetOut_V_last_V_1_load_B");
    sc_trace(mVcdFile, packetOut_V_last_V_1_state, "packetOut_V_last_V_1_state");
    sc_trace(mVcdFile, packetOut_V_last_V_1_state_cmp_full, "packetOut_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_data_out, "packetOut_V_keep_V_1_data_out");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_vld_in, "packetOut_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_vld_out, "packetOut_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_ack_in, "packetOut_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_ack_out, "packetOut_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_payload_A, "packetOut_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_payload_B, "packetOut_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_sel_rd, "packetOut_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_sel_wr, "packetOut_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_sel, "packetOut_V_keep_V_1_sel");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_load_A, "packetOut_V_keep_V_1_load_A");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_load_B, "packetOut_V_keep_V_1_load_B");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_state, "packetOut_V_keep_V_1_state");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_state_cmp_full, "packetOut_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, programSafe, "programSafe");
    sc_trace(mVcdFile, programSafe_ap_vld, "programSafe_ap_vld");
    sc_trace(mVcdFile, packetIn_TDATA_blk_n, "packetIn_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, packetOut_TDATA_blk_n, "packetOut_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_reg_123, "tmp_reg_123");
    sc_trace(mVcdFile, tmp_1_reg_127, "tmp_1_reg_127");
    sc_trace(mVcdFile, tmp_fu_102_p2, "tmp_fu_102_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_nbreadreq_fu_66_p5, "tmp_1_nbreadreq_fu_66_p5");
    sc_trace(mVcdFile, tmp_last_V_reg_136, "tmp_last_V_reg_136");
    sc_trace(mVcdFile, ap_reg_ioackin_programSafe_dummy_ack, "ap_reg_ioackin_programSafe_dummy_ack");
    sc_trace(mVcdFile, ap_predicate_op34_write_state4, "ap_predicate_op34_write_state4");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_283, "ap_condition_283");
#endif

    }
    mHdltvinHandle.open("axiStreamGate.hdltvin.dat");
    mHdltvoutHandle.open("axiStreamGate.hdltvout.dat");
}

axiStreamGate::~axiStreamGate() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete axiStreamGate_AXILiteS_s_axi_U;
}

void axiStreamGate::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void axiStreamGate::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_programSafe_dummy_ack = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_283.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read())) {
                ap_reg_ioackin_programSafe_dummy_ack = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1)) {
                ap_reg_ioackin_programSafe_dummy_ack = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_vld_out.read()))) {
            packetOut_V_data_V_1_sel_rd =  (sc_logic) (~packetOut_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_ack_in.read()))) {
            packetOut_V_data_V_1_sel_wr =  (sc_logic) (~packetOut_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(packetOut_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(packetOut_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            packetOut_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(packetOut_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(packetOut_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            packetOut_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(packetOut_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(packetOut_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(packetOut_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_ack_out.read()))))) {
            packetOut_V_data_V_1_state = ap_const_lv2_3;
        } else {
            packetOut_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_vld_out.read()))) {
            packetOut_V_keep_V_1_sel_rd =  (sc_logic) (~packetOut_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_ack_in.read()))) {
            packetOut_V_keep_V_1_sel_wr =  (sc_logic) (~packetOut_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_keep_V_1_state.read())))) {
            packetOut_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_keep_V_1_state.read())))) {
            packetOut_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_ack_out.read()))))) {
            packetOut_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            packetOut_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_out.read()))) {
            packetOut_V_last_V_1_sel_rd =  (sc_logic) (~packetOut_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_in.read()))) {
            packetOut_V_last_V_1_sel_wr =  (sc_logic) (~packetOut_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_last_V_1_state.read())))) {
            packetOut_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_last_V_1_state.read())))) {
            packetOut_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()))))) {
            packetOut_V_last_V_1_state = ap_const_lv2_3;
        } else {
            packetOut_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_load_A.read())) {
        packetOut_V_data_V_1_payload_A = packetIn_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_load_B.read())) {
        packetOut_V_data_V_1_payload_B = packetIn_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_load_A.read())) {
        packetOut_V_keep_V_1_payload_A = packetIn_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_load_B.read())) {
        packetOut_V_keep_V_1_payload_B = packetIn_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_load_A.read())) {
        packetOut_V_last_V_1_payload_A = packetIn_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_load_B.read())) {
        packetOut_V_last_V_1_payload_B = packetIn_TLAST.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_102_p2.read(), ap_const_lv1_1))) {
        tmp_1_reg_127 = tmp_1_nbreadreq_fu_66_p5.read();
    }
    if ((!(esl_seteq<1,1,1>(packetOut_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(packetIn_TVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_last_V_reg_136 = packetIn_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp_reg_123 = tmp_fu_102_p2.read();
    }
}

void axiStreamGate::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void axiStreamGate::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void axiStreamGate::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void axiStreamGate::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(packetOut_V_data_V_1_ack_in.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_write_state4.read()));
}

void axiStreamGate::thread_ap_condition_283() {
    ap_condition_283 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && (esl_seteq<1,1,1>(tmp_last_V_reg_136.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_1_reg_127.read(), ap_const_lv1_0) || 
  esl_seteq<1,1,1>(tmp_reg_123.read(), ap_const_lv1_0)));
}

void axiStreamGate::thread_ap_predicate_op34_write_state4() {
    ap_predicate_op34_write_state4 = (esl_seteq<1,1,1>(tmp_reg_123.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_1_reg_127.read(), ap_const_lv1_1));
}

void axiStreamGate::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axiStreamGate::thread_packetIn_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        packetIn_TDATA_blk_n = packetIn_TVALID.read();
    } else {
        packetIn_TDATA_blk_n = ap_const_logic_1;
    }
}

void axiStreamGate::thread_packetIn_TREADY() {
    if ((!(esl_seteq<1,1,1>(packetOut_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(packetIn_TVALID.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        packetIn_TREADY = ap_const_logic_1;
    } else {
        packetIn_TREADY = ap_const_logic_0;
    }
}

void axiStreamGate::thread_packetOut_TDATA() {
    packetOut_TDATA = packetOut_V_data_V_1_data_out.read();
}

void axiStreamGate::thread_packetOut_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_reg_123.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(tmp_1_reg_127.read(), ap_const_lv1_1)))) {
        packetOut_TDATA_blk_n = packetOut_V_data_V_1_state.read()[1];
    } else {
        packetOut_TDATA_blk_n = ap_const_logic_1;
    }
}

void axiStreamGate::thread_packetOut_TKEEP() {
    packetOut_TKEEP = packetOut_V_keep_V_1_data_out.read();
}

void axiStreamGate::thread_packetOut_TLAST() {
    packetOut_TLAST = packetOut_V_last_V_1_data_out.read();
}

void axiStreamGate::thread_packetOut_TVALID() {
    packetOut_TVALID = packetOut_V_keep_V_1_state.read()[0];
}

void axiStreamGate::thread_packetOut_V_data_V_1_ack_in() {
    packetOut_V_data_V_1_ack_in = packetOut_V_data_V_1_state.read()[1];
}

void axiStreamGate::thread_packetOut_V_data_V_1_ack_out() {
    packetOut_V_data_V_1_ack_out = packetOut_TREADY.read();
}

void axiStreamGate::thread_packetOut_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_sel.read())) {
        packetOut_V_data_V_1_data_out = packetOut_V_data_V_1_payload_B.read();
    } else {
        packetOut_V_data_V_1_data_out = packetOut_V_data_V_1_payload_A.read();
    }
}

void axiStreamGate::thread_packetOut_V_data_V_1_load_A() {
    packetOut_V_data_V_1_load_A = (packetOut_V_data_V_1_state_cmp_full.read() & ~packetOut_V_data_V_1_sel_wr.read());
}

void axiStreamGate::thread_packetOut_V_data_V_1_load_B() {
    packetOut_V_data_V_1_load_B = (packetOut_V_data_V_1_sel_wr.read() & packetOut_V_data_V_1_state_cmp_full.read());
}

void axiStreamGate::thread_packetOut_V_data_V_1_sel() {
    packetOut_V_data_V_1_sel = packetOut_V_data_V_1_sel_rd.read();
}

void axiStreamGate::thread_packetOut_V_data_V_1_state_cmp_full() {
    packetOut_V_data_V_1_state_cmp_full =  (sc_logic) ((!packetOut_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetOut_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void axiStreamGate::thread_packetOut_V_data_V_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(packetOut_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(packetIn_TVALID.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        packetOut_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        packetOut_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void axiStreamGate::thread_packetOut_V_data_V_1_vld_out() {
    packetOut_V_data_V_1_vld_out = packetOut_V_data_V_1_state.read()[0];
}

void axiStreamGate::thread_packetOut_V_keep_V_1_ack_in() {
    packetOut_V_keep_V_1_ack_in = packetOut_V_keep_V_1_state.read()[1];
}

void axiStreamGate::thread_packetOut_V_keep_V_1_ack_out() {
    packetOut_V_keep_V_1_ack_out = packetOut_TREADY.read();
}

void axiStreamGate::thread_packetOut_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_sel.read())) {
        packetOut_V_keep_V_1_data_out = packetOut_V_keep_V_1_payload_B.read();
    } else {
        packetOut_V_keep_V_1_data_out = packetOut_V_keep_V_1_payload_A.read();
    }
}

void axiStreamGate::thread_packetOut_V_keep_V_1_load_A() {
    packetOut_V_keep_V_1_load_A = (packetOut_V_keep_V_1_state_cmp_full.read() & ~packetOut_V_keep_V_1_sel_wr.read());
}

void axiStreamGate::thread_packetOut_V_keep_V_1_load_B() {
    packetOut_V_keep_V_1_load_B = (packetOut_V_keep_V_1_sel_wr.read() & packetOut_V_keep_V_1_state_cmp_full.read());
}

void axiStreamGate::thread_packetOut_V_keep_V_1_sel() {
    packetOut_V_keep_V_1_sel = packetOut_V_keep_V_1_sel_rd.read();
}

void axiStreamGate::thread_packetOut_V_keep_V_1_state_cmp_full() {
    packetOut_V_keep_V_1_state_cmp_full =  (sc_logic) ((!packetOut_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetOut_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void axiStreamGate::thread_packetOut_V_keep_V_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(packetOut_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(packetIn_TVALID.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        packetOut_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        packetOut_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void axiStreamGate::thread_packetOut_V_keep_V_1_vld_out() {
    packetOut_V_keep_V_1_vld_out = packetOut_V_keep_V_1_state.read()[0];
}

void axiStreamGate::thread_packetOut_V_last_V_1_ack_in() {
    packetOut_V_last_V_1_ack_in = packetOut_V_last_V_1_state.read()[1];
}

void axiStreamGate::thread_packetOut_V_last_V_1_ack_out() {
    packetOut_V_last_V_1_ack_out = packetOut_TREADY.read();
}

void axiStreamGate::thread_packetOut_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_sel.read())) {
        packetOut_V_last_V_1_data_out = packetOut_V_last_V_1_payload_B.read();
    } else {
        packetOut_V_last_V_1_data_out = packetOut_V_last_V_1_payload_A.read();
    }
}

void axiStreamGate::thread_packetOut_V_last_V_1_load_A() {
    packetOut_V_last_V_1_load_A = (packetOut_V_last_V_1_state_cmp_full.read() & ~packetOut_V_last_V_1_sel_wr.read());
}

void axiStreamGate::thread_packetOut_V_last_V_1_load_B() {
    packetOut_V_last_V_1_load_B = (packetOut_V_last_V_1_sel_wr.read() & packetOut_V_last_V_1_state_cmp_full.read());
}

void axiStreamGate::thread_packetOut_V_last_V_1_sel() {
    packetOut_V_last_V_1_sel = packetOut_V_last_V_1_sel_rd.read();
}

void axiStreamGate::thread_packetOut_V_last_V_1_state_cmp_full() {
    packetOut_V_last_V_1_state_cmp_full =  (sc_logic) ((!packetOut_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetOut_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void axiStreamGate::thread_packetOut_V_last_V_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(packetOut_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(packetIn_TVALID.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        packetOut_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        packetOut_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void axiStreamGate::thread_packetOut_V_last_V_1_vld_out() {
    packetOut_V_last_V_1_vld_out = packetOut_V_last_V_1_state.read()[0];
}

void axiStreamGate::thread_programSafe() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         (esl_seteq<1,1,1>(tmp_last_V_reg_136.read(), ap_const_lv1_1) || 
          esl_seteq<1,1,1>(tmp_1_reg_127.read(), ap_const_lv1_0) || 
          esl_seteq<1,1,1>(tmp_reg_123.read(), ap_const_lv1_0)))) {
        programSafe = ap_const_lv32_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        programSafe = ap_const_lv32_0;
    } else {
        programSafe = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void axiStreamGate::thread_programSafe_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          (esl_seteq<1,1,1>(tmp_last_V_reg_136.read(), ap_const_lv1_1) || 
           esl_seteq<1,1,1>(tmp_1_reg_127.read(), ap_const_lv1_0) || 
           esl_seteq<1,1,1>(tmp_reg_123.read(), ap_const_lv1_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_programSafe_dummy_ack.read())))) {
        programSafe_ap_vld = ap_const_logic_1;
    } else {
        programSafe_ap_vld = ap_const_logic_0;
    }
}

void axiStreamGate::thread_tmp_1_nbreadreq_fu_66_p5() {
    tmp_1_nbreadreq_fu_66_p5 =  (sc_lv<1>) ((packetIn_TVALID.read()));
}

void axiStreamGate::thread_tmp_fu_102_p2() {
    tmp_fu_102_p2 = (!programming.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(programming.read() == ap_const_lv32_0);
}

void axiStreamGate::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_1_nbreadreq_fu_66_p5.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_fu_102_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(packetOut_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(packetIn_TVALID.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && (esl_seteq<1,1,1>(tmp_last_V_reg_136.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_1_reg_127.read(), ap_const_lv1_0) || 
  esl_seteq<1,1,1>(tmp_reg_123.read(), ap_const_lv1_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else if ((esl_seteq<1,1,1>(tmp_1_reg_127.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_reg_123.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(tmp_last_V_reg_136.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state4_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void axiStreamGate::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetIn_TDATA\" :  \"" << packetIn_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetIn_TVALID\" :  \"" << packetIn_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"packetIn_TREADY\" :  \"" << packetIn_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetIn_TLAST\" :  \"" << packetIn_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetIn_TKEEP\" :  \"" << packetIn_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TDATA\" :  \"" << packetOut_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TVALID\" :  \"" << packetOut_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetOut_TREADY\" :  \"" << packetOut_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TLAST\" :  \"" << packetOut_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TKEEP\" :  \"" << packetOut_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

