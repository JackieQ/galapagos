// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _heartBeat_HH_
#define _heartBeat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct heartBeat : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<48> > eth_address_V;
    sc_out< sc_lv<64> > stream_out_TDATA;
    sc_out< sc_logic > stream_out_TVALID;
    sc_in< sc_logic > stream_out_TREADY;
    sc_out< sc_lv<1> > stream_out_TLAST;
    sc_out< sc_lv<8> > stream_out_TKEEP;


    // Module declarations
    heartBeat(sc_module_name name);
    SC_HAS_PROCESS(heartBeat);

    ~heartBeat();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<64> > stream_out_V_data_V_1_data_in;
    sc_signal< sc_lv<64> > stream_out_V_data_V_1_data_out;
    sc_signal< sc_logic > stream_out_V_data_V_1_vld_in;
    sc_signal< sc_logic > stream_out_V_data_V_1_vld_out;
    sc_signal< sc_logic > stream_out_V_data_V_1_ack_in;
    sc_signal< sc_logic > stream_out_V_data_V_1_ack_out;
    sc_signal< sc_lv<64> > stream_out_V_data_V_1_payload_A;
    sc_signal< sc_lv<64> > stream_out_V_data_V_1_payload_B;
    sc_signal< sc_logic > stream_out_V_data_V_1_sel_rd;
    sc_signal< sc_logic > stream_out_V_data_V_1_sel_wr;
    sc_signal< sc_logic > stream_out_V_data_V_1_sel;
    sc_signal< sc_logic > stream_out_V_data_V_1_load_A;
    sc_signal< sc_logic > stream_out_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > stream_out_V_data_V_1_state;
    sc_signal< sc_logic > stream_out_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > stream_out_V_last_V_1_data_in;
    sc_signal< sc_lv<1> > stream_out_V_last_V_1_data_out;
    sc_signal< sc_logic > stream_out_V_last_V_1_vld_in;
    sc_signal< sc_logic > stream_out_V_last_V_1_vld_out;
    sc_signal< sc_logic > stream_out_V_last_V_1_ack_in;
    sc_signal< sc_logic > stream_out_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > stream_out_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > stream_out_V_last_V_1_payload_B;
    sc_signal< sc_logic > stream_out_V_last_V_1_sel_rd;
    sc_signal< sc_logic > stream_out_V_last_V_1_sel_wr;
    sc_signal< sc_logic > stream_out_V_last_V_1_sel;
    sc_signal< sc_logic > stream_out_V_last_V_1_load_A;
    sc_signal< sc_logic > stream_out_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > stream_out_V_last_V_1_state;
    sc_signal< sc_logic > stream_out_V_last_V_1_state_cmp_full;
    sc_signal< sc_lv<8> > stream_out_V_keep_V_1_data_out;
    sc_signal< sc_logic > stream_out_V_keep_V_1_vld_in;
    sc_signal< sc_logic > stream_out_V_keep_V_1_vld_out;
    sc_signal< sc_logic > stream_out_V_keep_V_1_ack_out;
    sc_signal< sc_logic > stream_out_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > stream_out_V_keep_V_1_sel;
    sc_signal< sc_lv<2> > stream_out_V_keep_V_1_state;
    sc_signal< sc_logic > stream_out_TDATA_blk_n;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > packetHeader0_data_V_fu_92_p3;
    sc_signal< sc_lv<32> > temp_V_fu_101_p1;
    sc_signal< sc_lv<32> > temp_V_reg_118;
    sc_signal< sc_lv<64> > p_Result_s_fu_105_p3;
    sc_signal< sc_lv<16> > tmp_fu_82_p4;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<64> ap_const_lv64_FFFFFFFFFFFFFFFF;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<48> ap_const_lv48_FFFFFFFFFFFF;
    static const sc_lv<32> ap_const_lv32_74000000;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_rst_n_inv();
    void thread_p_Result_s_fu_105_p3();
    void thread_packetHeader0_data_V_fu_92_p3();
    void thread_stream_out_TDATA();
    void thread_stream_out_TDATA_blk_n();
    void thread_stream_out_TKEEP();
    void thread_stream_out_TLAST();
    void thread_stream_out_TVALID();
    void thread_stream_out_V_data_V_1_ack_in();
    void thread_stream_out_V_data_V_1_ack_out();
    void thread_stream_out_V_data_V_1_data_in();
    void thread_stream_out_V_data_V_1_data_out();
    void thread_stream_out_V_data_V_1_load_A();
    void thread_stream_out_V_data_V_1_load_B();
    void thread_stream_out_V_data_V_1_sel();
    void thread_stream_out_V_data_V_1_state_cmp_full();
    void thread_stream_out_V_data_V_1_vld_in();
    void thread_stream_out_V_data_V_1_vld_out();
    void thread_stream_out_V_keep_V_1_ack_out();
    void thread_stream_out_V_keep_V_1_data_out();
    void thread_stream_out_V_keep_V_1_sel();
    void thread_stream_out_V_keep_V_1_vld_in();
    void thread_stream_out_V_keep_V_1_vld_out();
    void thread_stream_out_V_last_V_1_ack_in();
    void thread_stream_out_V_last_V_1_ack_out();
    void thread_stream_out_V_last_V_1_data_in();
    void thread_stream_out_V_last_V_1_data_out();
    void thread_stream_out_V_last_V_1_load_A();
    void thread_stream_out_V_last_V_1_load_B();
    void thread_stream_out_V_last_V_1_sel();
    void thread_stream_out_V_last_V_1_state_cmp_full();
    void thread_stream_out_V_last_V_1_vld_in();
    void thread_stream_out_V_last_V_1_vld_out();
    void thread_temp_V_fu_101_p1();
    void thread_tmp_fu_82_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
