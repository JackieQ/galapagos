-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ethernet_bridge is
port (
    to_app_V_din : OUT STD_LOGIC_VECTOR (80 downto 0);
    to_app_V_full_n : IN STD_LOGIC;
    to_app_V_write : OUT STD_LOGIC;
    from_eth_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
    from_eth_V_empty_n : IN STD_LOGIC;
    from_eth_V_read : OUT STD_LOGIC;
    from_app_V_dout : IN STD_LOGIC_VECTOR (80 downto 0);
    from_app_V_empty_n : IN STD_LOGIC;
    from_app_V_read : OUT STD_LOGIC;
    to_eth_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
    to_eth_V_full_n : IN STD_LOGIC;
    to_eth_V_write : OUT STD_LOGIC;
    mac_addr_V : IN STD_LOGIC_VECTOR (47 downto 0);
    mac_table_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mac_table_V_ce0 : OUT STD_LOGIC;
    mac_table_V_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    mac_table_V_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    mac_table_V_we0 : OUT STD_LOGIC;
    mac_table_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    mac_table_V_ce1 : OUT STD_LOGIC;
    mac_table_V_d1 : OUT STD_LOGIC_VECTOR (47 downto 0);
    mac_table_V_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
    mac_table_V_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC );
end;


architecture behav of ethernet_bridge is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ethernet_bridge,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.330200,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=483,HLS_SYN_LUT=398}";
    constant ap_const_lv81_0 : STD_LOGIC_VECTOR (80 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv73_0 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal ethernet_bridge_entr_U0_ap_start : STD_LOGIC;
    signal ethernet_bridge_entr_U0_ap_done : STD_LOGIC;
    signal ethernet_bridge_entr_U0_ap_continue : STD_LOGIC;
    signal ethernet_bridge_entr_U0_ap_idle : STD_LOGIC;
    signal ethernet_bridge_entr_U0_ap_ready : STD_LOGIC;
    signal ethernet_bridge_entr_U0_mac_addr_V_out_din : STD_LOGIC_VECTOR (47 downto 0);
    signal ethernet_bridge_entr_U0_mac_addr_V_out_write : STD_LOGIC;
    signal ethernet_bridge_entr_U0_mac_addr_V_out1_din : STD_LOGIC_VECTOR (47 downto 0);
    signal ethernet_bridge_entr_U0_mac_addr_V_out1_write : STD_LOGIC;
    signal eth_to_app_U0_ap_start : STD_LOGIC := '0';
    signal eth_to_app_U0_ap_done : STD_LOGIC;
    signal eth_to_app_U0_ap_continue : STD_LOGIC;
    signal eth_to_app_U0_ap_idle : STD_LOGIC;
    signal eth_to_app_U0_ap_ready : STD_LOGIC;
    signal eth_to_app_U0_mac_address_V_read : STD_LOGIC;
    signal eth_to_app_U0_from_eth_V_read : STD_LOGIC;
    signal eth_to_app_U0_to_app_V_din : STD_LOGIC_VECTOR (80 downto 0);
    signal eth_to_app_U0_to_app_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal app_to_eth_U0_ap_start : STD_LOGIC;
    signal app_to_eth_U0_ap_done : STD_LOGIC;
    signal app_to_eth_U0_ap_continue : STD_LOGIC;
    signal app_to_eth_U0_ap_idle : STD_LOGIC;
    signal app_to_eth_U0_ap_ready : STD_LOGIC;
    signal app_to_eth_U0_from_app_V_read : STD_LOGIC;
    signal app_to_eth_U0_src_mac_address_V_read : STD_LOGIC;
    signal app_to_eth_U0_to_eth_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal app_to_eth_U0_to_eth_V_write : STD_LOGIC;
    signal app_to_eth_U0_mac_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal app_to_eth_U0_mac_table_V_ce0 : STD_LOGIC;
    signal mac_addr_V_c_full_n : STD_LOGIC;
    signal mac_addr_V_c_dout : STD_LOGIC_VECTOR (47 downto 0);
    signal mac_addr_V_c_empty_n : STD_LOGIC;
    signal mac_addr_V_c42_full_n : STD_LOGIC;
    signal mac_addr_V_c42_dout : STD_LOGIC_VECTOR (47 downto 0);
    signal mac_addr_V_c42_empty_n : STD_LOGIC;
    signal ethernet_bridge_entr_U0_start_full_n : STD_LOGIC;
    signal ethernet_bridge_entr_U0_start_write : STD_LOGIC;
    signal eth_to_app_U0_start_full_n : STD_LOGIC;
    signal eth_to_app_U0_start_write : STD_LOGIC;
    signal app_to_eth_U0_start_full_n : STD_LOGIC;
    signal app_to_eth_U0_start_write : STD_LOGIC;

    component ethernet_bridge_entr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mac_addr_V : IN STD_LOGIC_VECTOR (47 downto 0);
        mac_addr_V_out_din : OUT STD_LOGIC_VECTOR (47 downto 0);
        mac_addr_V_out_full_n : IN STD_LOGIC;
        mac_addr_V_out_write : OUT STD_LOGIC;
        mac_addr_V_out1_din : OUT STD_LOGIC_VECTOR (47 downto 0);
        mac_addr_V_out1_full_n : IN STD_LOGIC;
        mac_addr_V_out1_write : OUT STD_LOGIC );
    end component;


    component eth_to_app IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mac_address_V_dout : IN STD_LOGIC_VECTOR (47 downto 0);
        mac_address_V_empty_n : IN STD_LOGIC;
        mac_address_V_read : OUT STD_LOGIC;
        from_eth_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        from_eth_V_empty_n : IN STD_LOGIC;
        from_eth_V_read : OUT STD_LOGIC;
        to_app_V_din : OUT STD_LOGIC_VECTOR (80 downto 0);
        to_app_V_full_n : IN STD_LOGIC;
        to_app_V_write : OUT STD_LOGIC );
    end component;


    component app_to_eth IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        from_app_V_dout : IN STD_LOGIC_VECTOR (80 downto 0);
        from_app_V_empty_n : IN STD_LOGIC;
        from_app_V_read : OUT STD_LOGIC;
        src_mac_address_V_dout : IN STD_LOGIC_VECTOR (47 downto 0);
        src_mac_address_V_empty_n : IN STD_LOGIC;
        src_mac_address_V_read : OUT STD_LOGIC;
        to_eth_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        to_eth_V_full_n : IN STD_LOGIC;
        to_eth_V_write : OUT STD_LOGIC;
        mac_table_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        mac_table_V_ce0 : OUT STD_LOGIC;
        mac_table_V_q0 : IN STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component fifo_w48_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (47 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (47 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    ethernet_bridge_entr_U0 : component ethernet_bridge_entr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ethernet_bridge_entr_U0_ap_start,
        ap_done => ethernet_bridge_entr_U0_ap_done,
        ap_continue => ethernet_bridge_entr_U0_ap_continue,
        ap_idle => ethernet_bridge_entr_U0_ap_idle,
        ap_ready => ethernet_bridge_entr_U0_ap_ready,
        mac_addr_V => mac_addr_V,
        mac_addr_V_out_din => ethernet_bridge_entr_U0_mac_addr_V_out_din,
        mac_addr_V_out_full_n => mac_addr_V_c_full_n,
        mac_addr_V_out_write => ethernet_bridge_entr_U0_mac_addr_V_out_write,
        mac_addr_V_out1_din => ethernet_bridge_entr_U0_mac_addr_V_out1_din,
        mac_addr_V_out1_full_n => mac_addr_V_c42_full_n,
        mac_addr_V_out1_write => ethernet_bridge_entr_U0_mac_addr_V_out1_write);

    eth_to_app_U0 : component eth_to_app
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => eth_to_app_U0_ap_start,
        ap_done => eth_to_app_U0_ap_done,
        ap_continue => eth_to_app_U0_ap_continue,
        ap_idle => eth_to_app_U0_ap_idle,
        ap_ready => eth_to_app_U0_ap_ready,
        mac_address_V_dout => mac_addr_V_c_dout,
        mac_address_V_empty_n => mac_addr_V_c_empty_n,
        mac_address_V_read => eth_to_app_U0_mac_address_V_read,
        from_eth_V_dout => from_eth_V_dout,
        from_eth_V_empty_n => from_eth_V_empty_n,
        from_eth_V_read => eth_to_app_U0_from_eth_V_read,
        to_app_V_din => eth_to_app_U0_to_app_V_din,
        to_app_V_full_n => to_app_V_full_n,
        to_app_V_write => eth_to_app_U0_to_app_V_write);

    app_to_eth_U0 : component app_to_eth
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => app_to_eth_U0_ap_start,
        ap_done => app_to_eth_U0_ap_done,
        ap_continue => app_to_eth_U0_ap_continue,
        ap_idle => app_to_eth_U0_ap_idle,
        ap_ready => app_to_eth_U0_ap_ready,
        from_app_V_dout => from_app_V_dout,
        from_app_V_empty_n => from_app_V_empty_n,
        from_app_V_read => app_to_eth_U0_from_app_V_read,
        src_mac_address_V_dout => mac_addr_V_c42_dout,
        src_mac_address_V_empty_n => mac_addr_V_c42_empty_n,
        src_mac_address_V_read => app_to_eth_U0_src_mac_address_V_read,
        to_eth_V_din => app_to_eth_U0_to_eth_V_din,
        to_eth_V_full_n => to_eth_V_full_n,
        to_eth_V_write => app_to_eth_U0_to_eth_V_write,
        mac_table_V_address0 => app_to_eth_U0_mac_table_V_address0,
        mac_table_V_ce0 => app_to_eth_U0_mac_table_V_ce0,
        mac_table_V_q0 => mac_table_V_q0);

    mac_addr_V_c_U : component fifo_w48_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ethernet_bridge_entr_U0_mac_addr_V_out_din,
        if_full_n => mac_addr_V_c_full_n,
        if_write => ethernet_bridge_entr_U0_mac_addr_V_out_write,
        if_dout => mac_addr_V_c_dout,
        if_empty_n => mac_addr_V_c_empty_n,
        if_read => eth_to_app_U0_mac_address_V_read);

    mac_addr_V_c42_U : component fifo_w48_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ethernet_bridge_entr_U0_mac_addr_V_out1_din,
        if_full_n => mac_addr_V_c42_full_n,
        if_write => ethernet_bridge_entr_U0_mac_addr_V_out1_write,
        if_dout => mac_addr_V_c42_dout,
        if_empty_n => mac_addr_V_c42_empty_n,
        if_read => app_to_eth_U0_src_mac_address_V_read);





    eth_to_app_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                eth_to_app_U0_ap_start <= ap_const_logic_0;
            else
                eth_to_app_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;

    ap_sync_continue <= ap_const_logic_0;
    app_to_eth_U0_ap_continue <= ap_const_logic_1;
    app_to_eth_U0_ap_start <= ap_const_logic_1;
    app_to_eth_U0_start_full_n <= ap_const_logic_1;
    app_to_eth_U0_start_write <= ap_const_logic_0;
    eth_to_app_U0_ap_continue <= ap_const_logic_1;
    eth_to_app_U0_start_full_n <= ap_const_logic_1;
    eth_to_app_U0_start_write <= ap_const_logic_0;
    ethernet_bridge_entr_U0_ap_continue <= ap_const_logic_1;
    ethernet_bridge_entr_U0_ap_start <= ap_const_logic_1;
    ethernet_bridge_entr_U0_start_full_n <= ap_const_logic_1;
    ethernet_bridge_entr_U0_start_write <= ap_const_logic_0;
    from_app_V_read <= app_to_eth_U0_from_app_V_read;
    from_eth_V_read <= eth_to_app_U0_from_eth_V_read;
    mac_table_V_address0 <= app_to_eth_U0_mac_table_V_address0;
    mac_table_V_address1 <= ap_const_lv8_0;
    mac_table_V_ce0 <= app_to_eth_U0_mac_table_V_ce0;
    mac_table_V_ce1 <= ap_const_logic_0;
    mac_table_V_d0 <= ap_const_lv48_0;
    mac_table_V_d1 <= ap_const_lv48_0;
    mac_table_V_we0 <= ap_const_logic_0;
    mac_table_V_we1 <= ap_const_logic_0;
    to_app_V_din <= eth_to_app_U0_to_app_V_din;
    to_app_V_write <= eth_to_app_U0_to_app_V_write;
    to_eth_V_din <= app_to_eth_U0_to_eth_V_din;
    to_eth_V_write <= app_to_eth_U0_to_eth_V_write;
end behav;
