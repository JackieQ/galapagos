// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "app_to_eth.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic app_to_eth::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic app_to_eth::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> app_to_eth::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> app_to_eth::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool app_to_eth::ap_const_boolean_1 = true;
const sc_lv<3> app_to_eth::ap_const_lv3_4 = "100";
const sc_lv<1> app_to_eth::ap_const_lv1_1 = "1";
const sc_lv<3> app_to_eth::ap_const_lv3_0 = "000";
const sc_lv<3> app_to_eth::ap_const_lv3_3 = "11";
const sc_lv<3> app_to_eth::ap_const_lv3_2 = "10";
const sc_lv<3> app_to_eth::ap_const_lv3_1 = "1";
const bool app_to_eth::ap_const_boolean_0 = false;
const sc_lv<1> app_to_eth::ap_const_lv1_0 = "0";
const sc_lv<32> app_to_eth::ap_const_lv32_40 = "1000000";
const sc_lv<32> app_to_eth::ap_const_lv32_41 = "1000001";
const sc_lv<32> app_to_eth::ap_const_lv32_48 = "1001000";
const sc_lv<32> app_to_eth::ap_const_lv32_49 = "1001001";
const sc_lv<32> app_to_eth::ap_const_lv32_50 = "1010000";
const sc_lv<32> app_to_eth::ap_const_lv32_38 = "111000";
const sc_lv<32> app_to_eth::ap_const_lv32_3F = "111111";
const sc_lv<32> app_to_eth::ap_const_lv32_8 = "1000";
const sc_lv<32> app_to_eth::ap_const_lv32_F = "1111";
const sc_lv<32> app_to_eth::ap_const_lv32_10 = "10000";
const sc_lv<32> app_to_eth::ap_const_lv32_17 = "10111";
const sc_lv<32> app_to_eth::ap_const_lv32_20 = "100000";
const sc_lv<32> app_to_eth::ap_const_lv32_27 = "100111";
const sc_lv<32> app_to_eth::ap_const_lv32_30 = "110000";
const sc_lv<32> app_to_eth::ap_const_lv32_37 = "110111";
const sc_lv<32> app_to_eth::ap_const_lv32_18 = "11000";
const sc_lv<32> app_to_eth::ap_const_lv32_1F = "11111";
const sc_lv<32> app_to_eth::ap_const_lv32_28 = "101000";
const sc_lv<32> app_to_eth::ap_const_lv32_2F = "101111";
const sc_lv<32> app_to_eth::ap_const_lv32_7 = "111";
const sc_lv<16> app_to_eth::ap_const_lv16_7400 = "111010000000000";
const sc_lv<9> app_to_eth::ap_const_lv9_1FE = "111111110";

app_to_eth::app_to_eth(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( from_app_V_empty_n );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op34_read_state1 );
    sensitive << ( src_mac_address_V_empty_n );
    sensitive << ( to_eth_V_full_n );
    sensitive << ( state_V_load_reg_580 );
    sensitive << ( ap_predicate_op59_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( from_app_V_empty_n );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op34_read_state1 );
    sensitive << ( src_mac_address_V_empty_n );
    sensitive << ( to_eth_V_full_n );
    sensitive << ( state_V_load_reg_580 );
    sensitive << ( ap_predicate_op59_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( from_app_V_empty_n );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op34_read_state1 );
    sensitive << ( src_mac_address_V_empty_n );
    sensitive << ( to_eth_V_full_n );
    sensitive << ( state_V_load_reg_580 );
    sensitive << ( ap_predicate_op59_write_state2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( from_app_V_empty_n );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op34_read_state1 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( src_mac_address_V_empty_n );
    sensitive << ( to_eth_V_full_n );
    sensitive << ( state_V_load_reg_580 );
    sensitive << ( ap_predicate_op59_write_state2 );

    SC_METHOD(thread_ap_condition_100);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_193);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_predicate_op34_read_state1);
    sensitive << ( grp_nbreadreq_fu_128_p3 );
    sensitive << ( state_V );

    SC_METHOD(thread_ap_predicate_op59_write_state2);
    sensitive << ( state_V_load_reg_580 );
    sensitive << ( tmp_4_reg_601 );

    SC_METHOD(thread_ap_predicate_op9_read_state1);
    sensitive << ( grp_nbreadreq_fu_128_p3 );
    sensitive << ( state_V );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_from_app_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( from_app_V_empty_n );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op34_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_from_app_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op9_read_state1 );
    sensitive << ( ap_predicate_op34_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_167_p3);
    sensitive << ( from_app_V_dout );

    SC_METHOD(thread_grp_fu_181_p4);
    sensitive << ( from_app_V_dout );

    SC_METHOD(thread_grp_nbreadreq_fu_128_p3);
    sensitive << ( from_app_V_empty_n );

    SC_METHOD(thread_lhs_V_1_fu_229_p1);
    sensitive << ( from_app_V_dout );

    SC_METHOD(thread_mac_table_V_address0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_i_fu_373_p1 );

    SC_METHOD(thread_mac_table_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_Result_1_fu_516_p4);
    sensitive << ( app_packet_in_tdest_s );
    sensitive << ( temp_V_fu_388_p1 );

    SC_METHOD(thread_p_Result_s_fu_539_p3);
    sensitive << ( src_mac_address_V_dout );
    sensitive << ( dest_mac_address_V );

    SC_METHOD(thread_src_mac_address_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( src_mac_address_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_src_mac_address_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_state_V_load_load_fu_213_p1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( state_V );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_storemerge3_i_fu_337_p3);
    sensitive << ( app_packet_in_last_V );

    SC_METHOD(thread_storemerge_i_fu_323_p3);
    sensitive << ( grp_fu_167_p3 );

    SC_METHOD(thread_temp_V_fu_388_p1);
    sensitive << ( eth_dst_src_V );

    SC_METHOD(thread_tmp_1_fu_563_p4);
    sensitive << ( dest_mac_address_V );
    sensitive << ( tmp_5_i_fu_553_p4 );

    SC_METHOD(thread_tmp_20_fu_424_p4);
    sensitive << ( lhs_V_reg_584 );

    SC_METHOD(thread_tmp_21_fu_433_p4);
    sensitive << ( lhs_V_reg_584 );

    SC_METHOD(thread_tmp_22_fu_442_p4);
    sensitive << ( lhs_V_reg_584 );

    SC_METHOD(thread_tmp_23_fu_451_p4);
    sensitive << ( lhs_V_reg_584 );

    SC_METHOD(thread_tmp_24_fu_460_p4);
    sensitive << ( lhs_V_reg_584 );

    SC_METHOD(thread_tmp_25_fu_469_p4);
    sensitive << ( lhs_V_reg_584 );

    SC_METHOD(thread_tmp_26_fu_478_p4);
    sensitive << ( app_packet_in_tkeep_1_reg_596 );

    SC_METHOD(thread_tmp_2_fu_530_p3);
    sensitive << ( tmp_data_V_fu_526_p1 );

    SC_METHOD(thread_tmp_34_fu_313_p4);
    sensitive << ( from_app_V_dout );

    SC_METHOD(thread_tmp_38_fu_412_p1);
    sensitive << ( lhs_V_reg_584 );

    SC_METHOD(thread_tmp_39_fu_363_p1);
    sensitive << ( from_app_V_dout );

    SC_METHOD(thread_tmp_3_fu_487_p11);
    sensitive << ( tmp_26_fu_478_p4 );
    sensitive << ( tmp_38_fu_412_p1 );
    sensitive << ( tmp_20_fu_424_p4 );
    sensitive << ( tmp_21_fu_433_p4 );
    sensitive << ( tmp_24_fu_460_p4 );
    sensitive << ( tmp_22_fu_442_p4 );
    sensitive << ( tmp_25_fu_469_p4 );
    sensitive << ( tmp_23_fu_451_p4 );
    sensitive << ( tmp_s_fu_415_p4 );

    SC_METHOD(thread_tmp_43_fu_239_p1);
    sensitive << ( from_app_V_dout );

    SC_METHOD(thread_tmp_520_fu_396_p11);
    sensitive << ( tmp_43_reg_605 );
    sensitive << ( tmp_27_reg_610 );
    sensitive << ( tmp_28_reg_615 );
    sensitive << ( tmp_29_reg_620 );
    sensitive << ( tmp_30_reg_625 );
    sensitive << ( tmp_31_reg_630 );
    sensitive << ( tmp_32_reg_635 );
    sensitive << ( tmp_33_reg_640 );
    sensitive << ( tmp_34_reg_645 );

    SC_METHOD(thread_tmp_5_i_fu_553_p4);
    sensitive << ( src_mac_address_V_dout );

    SC_METHOD(thread_tmp_data_V_fu_526_p1);
    sensitive << ( p_Result_1_fu_516_p4 );

    SC_METHOD(thread_tmp_i_fu_373_p1);
    sensitive << ( grp_fu_181_p4 );

    SC_METHOD(thread_tmp_s_fu_415_p4);
    sensitive << ( lhs_V_reg_584 );

    SC_METHOD(thread_to_eth_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( to_eth_V_full_n );
    sensitive << ( state_V_load_reg_580 );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_to_eth_V_din);
    sensitive << ( state_V_load_reg_580 );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( tmp_520_fu_396_p11 );
    sensitive << ( tmp_3_fu_487_p11 );
    sensitive << ( tmp_2_fu_530_p3 );
    sensitive << ( tmp_1_fu_563_p4 );
    sensitive << ( ap_condition_193 );

    SC_METHOD(thread_to_eth_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( state_V_load_reg_580 );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    eth_dst_src_V = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    state_V = "000";
    app_packet_in_data_V = "0000000000000000000000000000000000000000000000000000000000000000";
    app_packet_in_last_V = "0";
    dest_mac_address_V = "000000000000000000000000000000000000000000000000";
    app_packet_in_tkeep_s = "00000000";
    app_packet_in_tdest_s = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "app_to_eth_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, from_app_V_dout, "(port)from_app_V_dout");
    sc_trace(mVcdFile, from_app_V_empty_n, "(port)from_app_V_empty_n");
    sc_trace(mVcdFile, from_app_V_read, "(port)from_app_V_read");
    sc_trace(mVcdFile, src_mac_address_V_dout, "(port)src_mac_address_V_dout");
    sc_trace(mVcdFile, src_mac_address_V_empty_n, "(port)src_mac_address_V_empty_n");
    sc_trace(mVcdFile, src_mac_address_V_read, "(port)src_mac_address_V_read");
    sc_trace(mVcdFile, to_eth_V_din, "(port)to_eth_V_din");
    sc_trace(mVcdFile, to_eth_V_full_n, "(port)to_eth_V_full_n");
    sc_trace(mVcdFile, to_eth_V_write, "(port)to_eth_V_write");
    sc_trace(mVcdFile, mac_table_V_address0, "(port)mac_table_V_address0");
    sc_trace(mVcdFile, mac_table_V_ce0, "(port)mac_table_V_ce0");
    sc_trace(mVcdFile, mac_table_V_q0, "(port)mac_table_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, state_V_load_load_fu_213_p1, "state_V_load_load_fu_213_p1");
    sc_trace(mVcdFile, grp_nbreadreq_fu_128_p3, "grp_nbreadreq_fu_128_p3");
    sc_trace(mVcdFile, ap_predicate_op9_read_state1, "ap_predicate_op9_read_state1");
    sc_trace(mVcdFile, ap_predicate_op34_read_state1, "ap_predicate_op34_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, state_V_load_reg_580, "state_V_load_reg_580");
    sc_trace(mVcdFile, tmp_4_reg_601, "tmp_4_reg_601");
    sc_trace(mVcdFile, ap_predicate_op59_write_state2, "ap_predicate_op59_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, eth_dst_src_V, "eth_dst_src_V");
    sc_trace(mVcdFile, state_V, "state_V");
    sc_trace(mVcdFile, app_packet_in_data_V, "app_packet_in_data_V");
    sc_trace(mVcdFile, app_packet_in_last_V, "app_packet_in_last_V");
    sc_trace(mVcdFile, dest_mac_address_V, "dest_mac_address_V");
    sc_trace(mVcdFile, app_packet_in_tkeep_s, "app_packet_in_tkeep_s");
    sc_trace(mVcdFile, app_packet_in_tdest_s, "app_packet_in_tdest_s");
    sc_trace(mVcdFile, from_app_V_blk_n, "from_app_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, to_eth_V_blk_n, "to_eth_V_blk_n");
    sc_trace(mVcdFile, src_mac_address_V_blk_n, "src_mac_address_V_blk_n");
    sc_trace(mVcdFile, lhs_V_reg_584, "lhs_V_reg_584");
    sc_trace(mVcdFile, app_packet_in_tkeep_1_reg_596, "app_packet_in_tkeep_1_reg_596");
    sc_trace(mVcdFile, tmp_43_fu_239_p1, "tmp_43_fu_239_p1");
    sc_trace(mVcdFile, tmp_43_reg_605, "tmp_43_reg_605");
    sc_trace(mVcdFile, tmp_27_reg_610, "tmp_27_reg_610");
    sc_trace(mVcdFile, tmp_28_reg_615, "tmp_28_reg_615");
    sc_trace(mVcdFile, tmp_29_reg_620, "tmp_29_reg_620");
    sc_trace(mVcdFile, tmp_30_reg_625, "tmp_30_reg_625");
    sc_trace(mVcdFile, tmp_31_reg_630, "tmp_31_reg_630");
    sc_trace(mVcdFile, tmp_32_reg_635, "tmp_32_reg_635");
    sc_trace(mVcdFile, tmp_33_reg_640, "tmp_33_reg_640");
    sc_trace(mVcdFile, tmp_34_fu_313_p4, "tmp_34_fu_313_p4");
    sc_trace(mVcdFile, tmp_34_reg_645, "tmp_34_reg_645");
    sc_trace(mVcdFile, tmp_reg_650, "tmp_reg_650");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, tmp_i_fu_373_p1, "tmp_i_fu_373_p1");
    sc_trace(mVcdFile, tmp_520_fu_396_p11, "tmp_520_fu_396_p11");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_3_fu_487_p11, "tmp_3_fu_487_p11");
    sc_trace(mVcdFile, tmp_2_fu_530_p3, "tmp_2_fu_530_p3");
    sc_trace(mVcdFile, tmp_1_fu_563_p4, "tmp_1_fu_563_p4");
    sc_trace(mVcdFile, p_Result_s_fu_539_p3, "p_Result_s_fu_539_p3");
    sc_trace(mVcdFile, storemerge_i_fu_323_p3, "storemerge_i_fu_323_p3");
    sc_trace(mVcdFile, storemerge3_i_fu_337_p3, "storemerge3_i_fu_337_p3");
    sc_trace(mVcdFile, lhs_V_1_fu_229_p1, "lhs_V_1_fu_229_p1");
    sc_trace(mVcdFile, tmp_39_fu_363_p1, "tmp_39_fu_363_p1");
    sc_trace(mVcdFile, grp_fu_167_p3, "grp_fu_167_p3");
    sc_trace(mVcdFile, grp_fu_181_p4, "grp_fu_181_p4");
    sc_trace(mVcdFile, tmp_26_fu_478_p4, "tmp_26_fu_478_p4");
    sc_trace(mVcdFile, tmp_38_fu_412_p1, "tmp_38_fu_412_p1");
    sc_trace(mVcdFile, tmp_20_fu_424_p4, "tmp_20_fu_424_p4");
    sc_trace(mVcdFile, tmp_21_fu_433_p4, "tmp_21_fu_433_p4");
    sc_trace(mVcdFile, tmp_24_fu_460_p4, "tmp_24_fu_460_p4");
    sc_trace(mVcdFile, tmp_22_fu_442_p4, "tmp_22_fu_442_p4");
    sc_trace(mVcdFile, tmp_25_fu_469_p4, "tmp_25_fu_469_p4");
    sc_trace(mVcdFile, tmp_23_fu_451_p4, "tmp_23_fu_451_p4");
    sc_trace(mVcdFile, tmp_s_fu_415_p4, "tmp_s_fu_415_p4");
    sc_trace(mVcdFile, temp_V_fu_388_p1, "temp_V_fu_388_p1");
    sc_trace(mVcdFile, p_Result_1_fu_516_p4, "p_Result_1_fu_516_p4");
    sc_trace(mVcdFile, tmp_data_V_fu_526_p1, "tmp_data_V_fu_526_p1");
    sc_trace(mVcdFile, tmp_5_i_fu_553_p4, "tmp_5_i_fu_553_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_100, "ap_condition_100");
    sc_trace(mVcdFile, ap_condition_193, "ap_condition_193");
#endif

    }
}

app_to_eth::~app_to_eth() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void app_to_eth::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_100.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_read_state1.read())) {
            app_packet_in_data_V = tmp_39_fu_363_p1.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) {
            app_packet_in_data_V = lhs_V_1_fu_229_p1.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_100.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_read_state1.read())) {
            state_V = ap_const_lv3_1;
        } else if (esl_seteq<1,3,3>(state_V_load_load_fu_213_p1.read(), ap_const_lv3_1)) {
            state_V = ap_const_lv3_2;
        } else if (esl_seteq<1,3,3>(state_V_load_load_fu_213_p1.read(), ap_const_lv3_2)) {
            state_V = ap_const_lv3_3;
        } else if (esl_seteq<1,3,3>(state_V_load_load_fu_213_p1.read(), ap_const_lv3_3)) {
            state_V = storemerge3_i_fu_337_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) {
            state_V = storemerge_i_fu_323_p3.read();
        }
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_read_state1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        app_packet_in_last_V = from_app_V_dout.read().range(64, 64);
        app_packet_in_tdest_s = from_app_V_dout.read().range(72, 65);
        app_packet_in_tkeep_s = from_app_V_dout.read().range(80, 73);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        app_packet_in_tkeep_1_reg_596 = app_packet_in_tkeep_s.read();
        lhs_V_reg_584 = app_packet_in_data_V.read();
        state_V_load_reg_580 = state_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,3,3>(ap_const_lv3_0, state_V_load_reg_580.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_reg_650.read()))) {
        dest_mac_address_V = mac_table_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        eth_dst_src_V = p_Result_s_fu_539_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_27_reg_610 = from_app_V_dout.read().range(63, 56);
        tmp_28_reg_615 = from_app_V_dout.read().range(15, 8);
        tmp_29_reg_620 = from_app_V_dout.read().range(23, 16);
        tmp_30_reg_625 = from_app_V_dout.read().range(39, 32);
        tmp_31_reg_630 = from_app_V_dout.read().range(55, 48);
        tmp_32_reg_635 = from_app_V_dout.read().range(31, 24);
        tmp_33_reg_640 = from_app_V_dout.read().range(47, 40);
        tmp_34_reg_645 = tmp_34_fu_313_p4.read();
        tmp_43_reg_605 = tmp_43_fu_239_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,3,3>(state_V.read(), ap_const_lv3_4) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_4_reg_601 =  (sc_lv<1>) (from_app_V_empty_n.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,3,3>(state_V.read(), ap_const_lv3_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_650 =  (sc_lv<1>) (from_app_V_empty_n.read());
    }
}

void app_to_eth::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void app_to_eth::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void app_to_eth::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || ((esl_seteq<1,1,1>(ap_const_logic_0, src_mac_address_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_2)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_1))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void app_to_eth::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || ((esl_seteq<1,1,1>(ap_const_logic_0, src_mac_address_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_2)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_1))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void app_to_eth::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || ((esl_seteq<1,1,1>(ap_const_logic_0, src_mac_address_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_3)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_2)) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
    esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_1))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void app_to_eth::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, from_app_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void app_to_eth::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_logic_0, src_mac_address_V_empty_n.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
  esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_3)) || (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
  esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_2)) || (esl_seteq<1,1,1>(ap_const_logic_0, to_eth_V_full_n.read()) && 
  esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_1)));
}

void app_to_eth::thread_ap_condition_100() {
    ap_condition_100 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void app_to_eth::thread_ap_condition_193() {
    ap_condition_193 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void app_to_eth::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void app_to_eth::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void app_to_eth::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void app_to_eth::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void app_to_eth::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void app_to_eth::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void app_to_eth::thread_ap_predicate_op34_read_state1() {
    ap_predicate_op34_read_state1 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_128_p3.read(), ap_const_lv1_1) && esl_seteq<1,3,3>(state_V.read(), ap_const_lv3_0));
}

void app_to_eth::thread_ap_predicate_op59_write_state2() {
    ap_predicate_op59_write_state2 = (esl_seteq<1,3,3>(ap_const_lv3_4, state_V_load_reg_580.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_reg_601.read()));
}

void app_to_eth::thread_ap_predicate_op9_read_state1() {
    ap_predicate_op9_read_state1 = (esl_seteq<1,3,3>(state_V.read(), ap_const_lv3_4) && esl_seteq<1,1,1>(grp_nbreadreq_fu_128_p3.read(), ap_const_lv1_1));
}

void app_to_eth::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void app_to_eth::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void app_to_eth::thread_from_app_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        from_app_V_blk_n = from_app_V_empty_n.read();
    } else {
        from_app_V_blk_n = ap_const_logic_1;
    }
}

void app_to_eth::thread_from_app_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op9_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op34_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        from_app_V_read = ap_const_logic_1;
    } else {
        from_app_V_read = ap_const_logic_0;
    }
}

void app_to_eth::thread_grp_fu_167_p3() {
    grp_fu_167_p3 = from_app_V_dout.read().range(64, 64);
}

void app_to_eth::thread_grp_fu_181_p4() {
    grp_fu_181_p4 = from_app_V_dout.read().range(72, 65);
}

void app_to_eth::thread_grp_nbreadreq_fu_128_p3() {
    grp_nbreadreq_fu_128_p3 =  (sc_lv<1>) (from_app_V_empty_n.read());
}

void app_to_eth::thread_lhs_V_1_fu_229_p1() {
    lhs_V_1_fu_229_p1 = from_app_V_dout.read().range(64-1, 0);
}

void app_to_eth::thread_mac_table_V_address0() {
    mac_table_V_address0 =  (sc_lv<8>) (tmp_i_fu_373_p1.read());
}

void app_to_eth::thread_mac_table_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        mac_table_V_ce0 = ap_const_logic_1;
    } else {
        mac_table_V_ce0 = ap_const_logic_0;
    }
}

void app_to_eth::thread_p_Result_1_fu_516_p4() {
    p_Result_1_fu_516_p4 = esl_concat<48,8>(esl_concat<32,16>(temp_V_fu_388_p1.read(), ap_const_lv16_7400), app_packet_in_tdest_s.read());
}

void app_to_eth::thread_p_Result_s_fu_539_p3() {
    p_Result_s_fu_539_p3 = esl_concat<48,48>(dest_mac_address_V.read(), src_mac_address_V_dout.read());
}

void app_to_eth::thread_src_mac_address_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        src_mac_address_V_blk_n = src_mac_address_V_empty_n.read();
    } else {
        src_mac_address_V_blk_n = ap_const_logic_1;
    }
}

void app_to_eth::thread_src_mac_address_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_mac_address_V_read = ap_const_logic_1;
    } else {
        src_mac_address_V_read = ap_const_logic_0;
    }
}

void app_to_eth::thread_state_V_load_load_fu_213_p1() {
    state_V_load_load_fu_213_p1 = state_V.read();
}

void app_to_eth::thread_storemerge3_i_fu_337_p3() {
    storemerge3_i_fu_337_p3 = (!app_packet_in_last_V.read()[0].is_01())? sc_lv<3>(): ((app_packet_in_last_V.read()[0].to_bool())? ap_const_lv3_0: ap_const_lv3_4);
}

void app_to_eth::thread_storemerge_i_fu_323_p3() {
    storemerge_i_fu_323_p3 = (!grp_fu_167_p3.read()[0].is_01())? sc_lv<3>(): ((grp_fu_167_p3.read()[0].to_bool())? ap_const_lv3_0: ap_const_lv3_4);
}

void app_to_eth::thread_temp_V_fu_388_p1() {
    temp_V_fu_388_p1 = eth_dst_src_V.read().range(32-1, 0);
}

void app_to_eth::thread_tmp_1_fu_563_p4() {
    tmp_1_fu_563_p4 = esl_concat<57,16>(esl_concat<9,48>(ap_const_lv9_1FE, dest_mac_address_V.read()), tmp_5_i_fu_553_p4.read());
}

void app_to_eth::thread_tmp_20_fu_424_p4() {
    tmp_20_fu_424_p4 = lhs_V_reg_584.read().range(15, 8);
}

void app_to_eth::thread_tmp_21_fu_433_p4() {
    tmp_21_fu_433_p4 = lhs_V_reg_584.read().range(23, 16);
}

void app_to_eth::thread_tmp_22_fu_442_p4() {
    tmp_22_fu_442_p4 = lhs_V_reg_584.read().range(39, 32);
}

void app_to_eth::thread_tmp_23_fu_451_p4() {
    tmp_23_fu_451_p4 = lhs_V_reg_584.read().range(55, 48);
}

void app_to_eth::thread_tmp_24_fu_460_p4() {
    tmp_24_fu_460_p4 = lhs_V_reg_584.read().range(31, 24);
}

void app_to_eth::thread_tmp_25_fu_469_p4() {
    tmp_25_fu_469_p4 = lhs_V_reg_584.read().range(47, 40);
}

void app_to_eth::thread_tmp_26_fu_478_p4() {
    tmp_26_fu_478_p4 = app_packet_in_tkeep_1_reg_596.read().range(0, 7);
}

void app_to_eth::thread_tmp_2_fu_530_p3() {
    tmp_2_fu_530_p3 = esl_concat<9,64>(ap_const_lv9_1FE, tmp_data_V_fu_526_p1.read());
}

void app_to_eth::thread_tmp_34_fu_313_p4() {
    tmp_34_fu_313_p4 = from_app_V_dout.read().range(73, 80);
}

void app_to_eth::thread_tmp_38_fu_412_p1() {
    tmp_38_fu_412_p1 = lhs_V_reg_584.read().range(8-1, 0);
}

void app_to_eth::thread_tmp_39_fu_363_p1() {
    tmp_39_fu_363_p1 = from_app_V_dout.read().range(64-1, 0);
}

void app_to_eth::thread_tmp_3_fu_487_p11() {
    tmp_3_fu_487_p11 = esl_concat<65,8>(esl_concat<57,8>(esl_concat<49,8>(esl_concat<41,8>(esl_concat<33,8>(esl_concat<25,8>(esl_concat<17,8>(esl_concat<9,8>(esl_concat<8,1>(tmp_26_fu_478_p4.read(), ap_const_lv1_0), tmp_38_fu_412_p1.read()), tmp_20_fu_424_p4.read()), tmp_21_fu_433_p4.read()), tmp_24_fu_460_p4.read()), tmp_22_fu_442_p4.read()), tmp_25_fu_469_p4.read()), tmp_23_fu_451_p4.read()), tmp_s_fu_415_p4.read());
}

void app_to_eth::thread_tmp_43_fu_239_p1() {
    tmp_43_fu_239_p1 = from_app_V_dout.read().range(8-1, 0);
}

void app_to_eth::thread_tmp_520_fu_396_p11() {
    tmp_520_fu_396_p11 = esl_concat<65,8>(esl_concat<57,8>(esl_concat<49,8>(esl_concat<41,8>(esl_concat<33,8>(esl_concat<25,8>(esl_concat<17,8>(esl_concat<9,8>(esl_concat<8,1>(tmp_34_reg_645.read(), ap_const_lv1_0), tmp_43_reg_605.read()), tmp_28_reg_615.read()), tmp_29_reg_620.read()), tmp_32_reg_635.read()), tmp_30_reg_625.read()), tmp_33_reg_640.read()), tmp_31_reg_630.read()), tmp_27_reg_610.read());
}

void app_to_eth::thread_tmp_5_i_fu_553_p4() {
    tmp_5_i_fu_553_p4 = src_mac_address_V_dout.read().range(47, 32);
}

void app_to_eth::thread_tmp_data_V_fu_526_p1() {
    tmp_data_V_fu_526_p1 = esl_zext<64,56>(p_Result_1_fu_516_p4.read());
}

void app_to_eth::thread_tmp_i_fu_373_p1() {
    tmp_i_fu_373_p1 = esl_zext<64,8>(grp_fu_181_p4.read());
}

void app_to_eth::thread_tmp_s_fu_415_p4() {
    tmp_s_fu_415_p4 = lhs_V_reg_584.read().range(63, 56);
}

void app_to_eth::thread_to_eth_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_2) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_3) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        to_eth_V_blk_n = to_eth_V_full_n.read();
    } else {
        to_eth_V_blk_n = ap_const_logic_1;
    }
}

void app_to_eth::thread_to_eth_V_din() {
    if (esl_seteq<1,1,1>(ap_condition_193.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_1)) {
            to_eth_V_din = tmp_1_fu_563_p4.read();
        } else if (esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_2)) {
            to_eth_V_din = tmp_2_fu_530_p3.read();
        } else if (esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_3)) {
            to_eth_V_din = tmp_3_fu_487_p11.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read())) {
            to_eth_V_din = tmp_520_fu_396_p11.read();
        } else {
            to_eth_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        to_eth_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void app_to_eth::thread_to_eth_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_3) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_2) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,3,3>(state_V_load_reg_580.read(), ap_const_lv3_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        to_eth_V_write = ap_const_logic_1;
    } else {
        to_eth_V_write = ap_const_logic_0;
    }
}

void app_to_eth::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

}

