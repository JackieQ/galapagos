// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ethernet_bridge_HH_
#define _ethernet_bridge_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ethernet_bridge_entr.h"
#include "eth_to_app.h"
#include "app_to_eth.h"
#include "fifo_w48_d2_A.h"

namespace ap_rtl {

struct ethernet_bridge : public sc_module {
    // Port declarations 25
    sc_out< sc_lv<81> > to_app_V_din;
    sc_in< sc_logic > to_app_V_full_n;
    sc_out< sc_logic > to_app_V_write;
    sc_in< sc_lv<73> > from_eth_V_dout;
    sc_in< sc_logic > from_eth_V_empty_n;
    sc_out< sc_logic > from_eth_V_read;
    sc_in< sc_lv<81> > from_app_V_dout;
    sc_in< sc_logic > from_app_V_empty_n;
    sc_out< sc_logic > from_app_V_read;
    sc_out< sc_lv<73> > to_eth_V_din;
    sc_in< sc_logic > to_eth_V_full_n;
    sc_out< sc_logic > to_eth_V_write;
    sc_in< sc_lv<48> > mac_addr_V;
    sc_out< sc_lv<8> > mac_table_V_address0;
    sc_out< sc_logic > mac_table_V_ce0;
    sc_out< sc_lv<48> > mac_table_V_d0;
    sc_in< sc_lv<48> > mac_table_V_q0;
    sc_out< sc_logic > mac_table_V_we0;
    sc_out< sc_lv<8> > mac_table_V_address1;
    sc_out< sc_logic > mac_table_V_ce1;
    sc_out< sc_lv<48> > mac_table_V_d1;
    sc_in< sc_lv<48> > mac_table_V_q1;
    sc_out< sc_logic > mac_table_V_we1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    ethernet_bridge(sc_module_name name);
    SC_HAS_PROCESS(ethernet_bridge);

    ~ethernet_bridge();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    ethernet_bridge_entr* ethernet_bridge_entr_U0;
    eth_to_app* eth_to_app_U0;
    app_to_eth* app_to_eth_U0;
    fifo_w48_d2_A* mac_addr_V_c_U;
    fifo_w48_d2_A* mac_addr_V_c42_U;
    sc_signal< sc_logic > ethernet_bridge_entr_U0_ap_start;
    sc_signal< sc_logic > ethernet_bridge_entr_U0_ap_done;
    sc_signal< sc_logic > ethernet_bridge_entr_U0_ap_continue;
    sc_signal< sc_logic > ethernet_bridge_entr_U0_ap_idle;
    sc_signal< sc_logic > ethernet_bridge_entr_U0_ap_ready;
    sc_signal< sc_lv<48> > ethernet_bridge_entr_U0_mac_addr_V_out_din;
    sc_signal< sc_logic > ethernet_bridge_entr_U0_mac_addr_V_out_write;
    sc_signal< sc_lv<48> > ethernet_bridge_entr_U0_mac_addr_V_out1_din;
    sc_signal< sc_logic > ethernet_bridge_entr_U0_mac_addr_V_out1_write;
    sc_signal< sc_logic > eth_to_app_U0_ap_start;
    sc_signal< sc_logic > eth_to_app_U0_ap_done;
    sc_signal< sc_logic > eth_to_app_U0_ap_continue;
    sc_signal< sc_logic > eth_to_app_U0_ap_idle;
    sc_signal< sc_logic > eth_to_app_U0_ap_ready;
    sc_signal< sc_logic > eth_to_app_U0_mac_address_V_read;
    sc_signal< sc_logic > eth_to_app_U0_from_eth_V_read;
    sc_signal< sc_lv<81> > eth_to_app_U0_to_app_V_din;
    sc_signal< sc_logic > eth_to_app_U0_to_app_V_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > app_to_eth_U0_ap_start;
    sc_signal< sc_logic > app_to_eth_U0_ap_done;
    sc_signal< sc_logic > app_to_eth_U0_ap_continue;
    sc_signal< sc_logic > app_to_eth_U0_ap_idle;
    sc_signal< sc_logic > app_to_eth_U0_ap_ready;
    sc_signal< sc_logic > app_to_eth_U0_from_app_V_read;
    sc_signal< sc_logic > app_to_eth_U0_src_mac_address_V_read;
    sc_signal< sc_lv<73> > app_to_eth_U0_to_eth_V_din;
    sc_signal< sc_logic > app_to_eth_U0_to_eth_V_write;
    sc_signal< sc_lv<8> > app_to_eth_U0_mac_table_V_address0;
    sc_signal< sc_logic > app_to_eth_U0_mac_table_V_ce0;
    sc_signal< sc_logic > mac_addr_V_c_full_n;
    sc_signal< sc_lv<48> > mac_addr_V_c_dout;
    sc_signal< sc_logic > mac_addr_V_c_empty_n;
    sc_signal< sc_logic > mac_addr_V_c42_full_n;
    sc_signal< sc_lv<48> > mac_addr_V_c42_dout;
    sc_signal< sc_logic > mac_addr_V_c42_empty_n;
    sc_signal< sc_logic > ethernet_bridge_entr_U0_start_full_n;
    sc_signal< sc_logic > ethernet_bridge_entr_U0_start_write;
    sc_signal< sc_logic > eth_to_app_U0_start_full_n;
    sc_signal< sc_logic > eth_to_app_U0_start_write;
    sc_signal< sc_logic > app_to_eth_U0_start_full_n;
    sc_signal< sc_logic > app_to_eth_U0_start_write;
    static const sc_lv<81> ap_const_lv81_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<73> ap_const_lv73_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_sync_continue();
    void thread_app_to_eth_U0_ap_continue();
    void thread_app_to_eth_U0_ap_start();
    void thread_app_to_eth_U0_start_full_n();
    void thread_app_to_eth_U0_start_write();
    void thread_eth_to_app_U0_ap_continue();
    void thread_eth_to_app_U0_start_full_n();
    void thread_eth_to_app_U0_start_write();
    void thread_ethernet_bridge_entr_U0_ap_continue();
    void thread_ethernet_bridge_entr_U0_ap_start();
    void thread_ethernet_bridge_entr_U0_start_full_n();
    void thread_ethernet_bridge_entr_U0_start_write();
    void thread_from_app_V_read();
    void thread_from_eth_V_read();
    void thread_mac_table_V_address0();
    void thread_mac_table_V_address1();
    void thread_mac_table_V_ce0();
    void thread_mac_table_V_ce1();
    void thread_mac_table_V_d0();
    void thread_mac_table_V_d1();
    void thread_mac_table_V_we0();
    void thread_mac_table_V_we1();
    void thread_to_app_V_din();
    void thread_to_app_V_write();
    void thread_to_eth_V_din();
    void thread_to_eth_V_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
