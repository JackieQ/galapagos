// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ethernet_bridge.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<81> ethernet_bridge::ap_const_lv81_0 = "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_logic ethernet_bridge::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<73> ethernet_bridge::ap_const_lv73_0 = "0000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> ethernet_bridge::ap_const_lv8_0 = "00000000";
const sc_lv<48> ethernet_bridge::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_logic ethernet_bridge::ap_const_logic_1 = sc_dt::Log_1;

ethernet_bridge::ethernet_bridge(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ethernet_bridge_entr_U0 = new ethernet_bridge_entr("ethernet_bridge_entr_U0");
    ethernet_bridge_entr_U0->ap_clk(ap_clk);
    ethernet_bridge_entr_U0->ap_rst(ap_rst);
    ethernet_bridge_entr_U0->ap_start(ethernet_bridge_entr_U0_ap_start);
    ethernet_bridge_entr_U0->ap_done(ethernet_bridge_entr_U0_ap_done);
    ethernet_bridge_entr_U0->ap_continue(ethernet_bridge_entr_U0_ap_continue);
    ethernet_bridge_entr_U0->ap_idle(ethernet_bridge_entr_U0_ap_idle);
    ethernet_bridge_entr_U0->ap_ready(ethernet_bridge_entr_U0_ap_ready);
    ethernet_bridge_entr_U0->mac_addr_V(mac_addr_V);
    ethernet_bridge_entr_U0->mac_addr_V_out_din(ethernet_bridge_entr_U0_mac_addr_V_out_din);
    ethernet_bridge_entr_U0->mac_addr_V_out_full_n(mac_addr_V_c_full_n);
    ethernet_bridge_entr_U0->mac_addr_V_out_write(ethernet_bridge_entr_U0_mac_addr_V_out_write);
    ethernet_bridge_entr_U0->mac_addr_V_out1_din(ethernet_bridge_entr_U0_mac_addr_V_out1_din);
    ethernet_bridge_entr_U0->mac_addr_V_out1_full_n(mac_addr_V_c42_full_n);
    ethernet_bridge_entr_U0->mac_addr_V_out1_write(ethernet_bridge_entr_U0_mac_addr_V_out1_write);
    eth_to_app_U0 = new eth_to_app("eth_to_app_U0");
    eth_to_app_U0->ap_clk(ap_clk);
    eth_to_app_U0->ap_rst(ap_rst);
    eth_to_app_U0->ap_start(eth_to_app_U0_ap_start);
    eth_to_app_U0->ap_done(eth_to_app_U0_ap_done);
    eth_to_app_U0->ap_continue(eth_to_app_U0_ap_continue);
    eth_to_app_U0->ap_idle(eth_to_app_U0_ap_idle);
    eth_to_app_U0->ap_ready(eth_to_app_U0_ap_ready);
    eth_to_app_U0->mac_address_V_dout(mac_addr_V_c_dout);
    eth_to_app_U0->mac_address_V_empty_n(mac_addr_V_c_empty_n);
    eth_to_app_U0->mac_address_V_read(eth_to_app_U0_mac_address_V_read);
    eth_to_app_U0->from_eth_V_dout(from_eth_V_dout);
    eth_to_app_U0->from_eth_V_empty_n(from_eth_V_empty_n);
    eth_to_app_U0->from_eth_V_read(eth_to_app_U0_from_eth_V_read);
    eth_to_app_U0->to_app_V_din(eth_to_app_U0_to_app_V_din);
    eth_to_app_U0->to_app_V_full_n(to_app_V_full_n);
    eth_to_app_U0->to_app_V_write(eth_to_app_U0_to_app_V_write);
    app_to_eth_U0 = new app_to_eth("app_to_eth_U0");
    app_to_eth_U0->ap_clk(ap_clk);
    app_to_eth_U0->ap_rst(ap_rst);
    app_to_eth_U0->ap_start(app_to_eth_U0_ap_start);
    app_to_eth_U0->ap_done(app_to_eth_U0_ap_done);
    app_to_eth_U0->ap_continue(app_to_eth_U0_ap_continue);
    app_to_eth_U0->ap_idle(app_to_eth_U0_ap_idle);
    app_to_eth_U0->ap_ready(app_to_eth_U0_ap_ready);
    app_to_eth_U0->from_app_V_dout(from_app_V_dout);
    app_to_eth_U0->from_app_V_empty_n(from_app_V_empty_n);
    app_to_eth_U0->from_app_V_read(app_to_eth_U0_from_app_V_read);
    app_to_eth_U0->src_mac_address_V_dout(mac_addr_V_c42_dout);
    app_to_eth_U0->src_mac_address_V_empty_n(mac_addr_V_c42_empty_n);
    app_to_eth_U0->src_mac_address_V_read(app_to_eth_U0_src_mac_address_V_read);
    app_to_eth_U0->to_eth_V_din(app_to_eth_U0_to_eth_V_din);
    app_to_eth_U0->to_eth_V_full_n(to_eth_V_full_n);
    app_to_eth_U0->to_eth_V_write(app_to_eth_U0_to_eth_V_write);
    app_to_eth_U0->mac_table_V_address0(app_to_eth_U0_mac_table_V_address0);
    app_to_eth_U0->mac_table_V_ce0(app_to_eth_U0_mac_table_V_ce0);
    app_to_eth_U0->mac_table_V_q0(mac_table_V_q0);
    mac_addr_V_c_U = new fifo_w48_d2_A("mac_addr_V_c_U");
    mac_addr_V_c_U->clk(ap_clk);
    mac_addr_V_c_U->reset(ap_rst);
    mac_addr_V_c_U->if_read_ce(ap_var_for_const0);
    mac_addr_V_c_U->if_write_ce(ap_var_for_const0);
    mac_addr_V_c_U->if_din(ethernet_bridge_entr_U0_mac_addr_V_out_din);
    mac_addr_V_c_U->if_full_n(mac_addr_V_c_full_n);
    mac_addr_V_c_U->if_write(ethernet_bridge_entr_U0_mac_addr_V_out_write);
    mac_addr_V_c_U->if_dout(mac_addr_V_c_dout);
    mac_addr_V_c_U->if_empty_n(mac_addr_V_c_empty_n);
    mac_addr_V_c_U->if_read(eth_to_app_U0_mac_address_V_read);
    mac_addr_V_c42_U = new fifo_w48_d2_A("mac_addr_V_c42_U");
    mac_addr_V_c42_U->clk(ap_clk);
    mac_addr_V_c42_U->reset(ap_rst);
    mac_addr_V_c42_U->if_read_ce(ap_var_for_const0);
    mac_addr_V_c42_U->if_write_ce(ap_var_for_const0);
    mac_addr_V_c42_U->if_din(ethernet_bridge_entr_U0_mac_addr_V_out1_din);
    mac_addr_V_c42_U->if_full_n(mac_addr_V_c42_full_n);
    mac_addr_V_c42_U->if_write(ethernet_bridge_entr_U0_mac_addr_V_out1_write);
    mac_addr_V_c42_U->if_dout(mac_addr_V_c42_dout);
    mac_addr_V_c42_U->if_empty_n(mac_addr_V_c42_empty_n);
    mac_addr_V_c42_U->if_read(app_to_eth_U0_src_mac_address_V_read);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_app_to_eth_U0_ap_continue);

    SC_METHOD(thread_app_to_eth_U0_ap_start);

    SC_METHOD(thread_app_to_eth_U0_start_full_n);

    SC_METHOD(thread_app_to_eth_U0_start_write);

    SC_METHOD(thread_eth_to_app_U0_ap_continue);

    SC_METHOD(thread_eth_to_app_U0_start_full_n);

    SC_METHOD(thread_eth_to_app_U0_start_write);

    SC_METHOD(thread_ethernet_bridge_entr_U0_ap_continue);

    SC_METHOD(thread_ethernet_bridge_entr_U0_ap_start);

    SC_METHOD(thread_ethernet_bridge_entr_U0_start_full_n);

    SC_METHOD(thread_ethernet_bridge_entr_U0_start_write);

    SC_METHOD(thread_from_app_V_read);
    sensitive << ( app_to_eth_U0_from_app_V_read );

    SC_METHOD(thread_from_eth_V_read);
    sensitive << ( eth_to_app_U0_from_eth_V_read );

    SC_METHOD(thread_mac_table_V_address0);
    sensitive << ( app_to_eth_U0_mac_table_V_address0 );

    SC_METHOD(thread_mac_table_V_address1);

    SC_METHOD(thread_mac_table_V_ce0);
    sensitive << ( app_to_eth_U0_mac_table_V_ce0 );

    SC_METHOD(thread_mac_table_V_ce1);

    SC_METHOD(thread_mac_table_V_d0);

    SC_METHOD(thread_mac_table_V_d1);

    SC_METHOD(thread_mac_table_V_we0);

    SC_METHOD(thread_mac_table_V_we1);

    SC_METHOD(thread_to_app_V_din);
    sensitive << ( eth_to_app_U0_to_app_V_din );

    SC_METHOD(thread_to_app_V_write);
    sensitive << ( eth_to_app_U0_to_app_V_write );

    SC_METHOD(thread_to_eth_V_din);
    sensitive << ( app_to_eth_U0_to_eth_V_din );

    SC_METHOD(thread_to_eth_V_write);
    sensitive << ( app_to_eth_U0_to_eth_V_write );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    eth_to_app_U0_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ethernet_bridge_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, to_app_V_din, "(port)to_app_V_din");
    sc_trace(mVcdFile, to_app_V_full_n, "(port)to_app_V_full_n");
    sc_trace(mVcdFile, to_app_V_write, "(port)to_app_V_write");
    sc_trace(mVcdFile, from_eth_V_dout, "(port)from_eth_V_dout");
    sc_trace(mVcdFile, from_eth_V_empty_n, "(port)from_eth_V_empty_n");
    sc_trace(mVcdFile, from_eth_V_read, "(port)from_eth_V_read");
    sc_trace(mVcdFile, from_app_V_dout, "(port)from_app_V_dout");
    sc_trace(mVcdFile, from_app_V_empty_n, "(port)from_app_V_empty_n");
    sc_trace(mVcdFile, from_app_V_read, "(port)from_app_V_read");
    sc_trace(mVcdFile, to_eth_V_din, "(port)to_eth_V_din");
    sc_trace(mVcdFile, to_eth_V_full_n, "(port)to_eth_V_full_n");
    sc_trace(mVcdFile, to_eth_V_write, "(port)to_eth_V_write");
    sc_trace(mVcdFile, mac_addr_V, "(port)mac_addr_V");
    sc_trace(mVcdFile, mac_table_V_address0, "(port)mac_table_V_address0");
    sc_trace(mVcdFile, mac_table_V_ce0, "(port)mac_table_V_ce0");
    sc_trace(mVcdFile, mac_table_V_d0, "(port)mac_table_V_d0");
    sc_trace(mVcdFile, mac_table_V_q0, "(port)mac_table_V_q0");
    sc_trace(mVcdFile, mac_table_V_we0, "(port)mac_table_V_we0");
    sc_trace(mVcdFile, mac_table_V_address1, "(port)mac_table_V_address1");
    sc_trace(mVcdFile, mac_table_V_ce1, "(port)mac_table_V_ce1");
    sc_trace(mVcdFile, mac_table_V_d1, "(port)mac_table_V_d1");
    sc_trace(mVcdFile, mac_table_V_q1, "(port)mac_table_V_q1");
    sc_trace(mVcdFile, mac_table_V_we1, "(port)mac_table_V_we1");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_ap_start, "ethernet_bridge_entr_U0_ap_start");
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_ap_done, "ethernet_bridge_entr_U0_ap_done");
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_ap_continue, "ethernet_bridge_entr_U0_ap_continue");
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_ap_idle, "ethernet_bridge_entr_U0_ap_idle");
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_ap_ready, "ethernet_bridge_entr_U0_ap_ready");
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_mac_addr_V_out_din, "ethernet_bridge_entr_U0_mac_addr_V_out_din");
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_mac_addr_V_out_write, "ethernet_bridge_entr_U0_mac_addr_V_out_write");
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_mac_addr_V_out1_din, "ethernet_bridge_entr_U0_mac_addr_V_out1_din");
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_mac_addr_V_out1_write, "ethernet_bridge_entr_U0_mac_addr_V_out1_write");
    sc_trace(mVcdFile, eth_to_app_U0_ap_start, "eth_to_app_U0_ap_start");
    sc_trace(mVcdFile, eth_to_app_U0_ap_done, "eth_to_app_U0_ap_done");
    sc_trace(mVcdFile, eth_to_app_U0_ap_continue, "eth_to_app_U0_ap_continue");
    sc_trace(mVcdFile, eth_to_app_U0_ap_idle, "eth_to_app_U0_ap_idle");
    sc_trace(mVcdFile, eth_to_app_U0_ap_ready, "eth_to_app_U0_ap_ready");
    sc_trace(mVcdFile, eth_to_app_U0_mac_address_V_read, "eth_to_app_U0_mac_address_V_read");
    sc_trace(mVcdFile, eth_to_app_U0_from_eth_V_read, "eth_to_app_U0_from_eth_V_read");
    sc_trace(mVcdFile, eth_to_app_U0_to_app_V_din, "eth_to_app_U0_to_app_V_din");
    sc_trace(mVcdFile, eth_to_app_U0_to_app_V_write, "eth_to_app_U0_to_app_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, app_to_eth_U0_ap_start, "app_to_eth_U0_ap_start");
    sc_trace(mVcdFile, app_to_eth_U0_ap_done, "app_to_eth_U0_ap_done");
    sc_trace(mVcdFile, app_to_eth_U0_ap_continue, "app_to_eth_U0_ap_continue");
    sc_trace(mVcdFile, app_to_eth_U0_ap_idle, "app_to_eth_U0_ap_idle");
    sc_trace(mVcdFile, app_to_eth_U0_ap_ready, "app_to_eth_U0_ap_ready");
    sc_trace(mVcdFile, app_to_eth_U0_from_app_V_read, "app_to_eth_U0_from_app_V_read");
    sc_trace(mVcdFile, app_to_eth_U0_src_mac_address_V_read, "app_to_eth_U0_src_mac_address_V_read");
    sc_trace(mVcdFile, app_to_eth_U0_to_eth_V_din, "app_to_eth_U0_to_eth_V_din");
    sc_trace(mVcdFile, app_to_eth_U0_to_eth_V_write, "app_to_eth_U0_to_eth_V_write");
    sc_trace(mVcdFile, app_to_eth_U0_mac_table_V_address0, "app_to_eth_U0_mac_table_V_address0");
    sc_trace(mVcdFile, app_to_eth_U0_mac_table_V_ce0, "app_to_eth_U0_mac_table_V_ce0");
    sc_trace(mVcdFile, mac_addr_V_c_full_n, "mac_addr_V_c_full_n");
    sc_trace(mVcdFile, mac_addr_V_c_dout, "mac_addr_V_c_dout");
    sc_trace(mVcdFile, mac_addr_V_c_empty_n, "mac_addr_V_c_empty_n");
    sc_trace(mVcdFile, mac_addr_V_c42_full_n, "mac_addr_V_c42_full_n");
    sc_trace(mVcdFile, mac_addr_V_c42_dout, "mac_addr_V_c42_dout");
    sc_trace(mVcdFile, mac_addr_V_c42_empty_n, "mac_addr_V_c42_empty_n");
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_start_full_n, "ethernet_bridge_entr_U0_start_full_n");
    sc_trace(mVcdFile, ethernet_bridge_entr_U0_start_write, "ethernet_bridge_entr_U0_start_write");
    sc_trace(mVcdFile, eth_to_app_U0_start_full_n, "eth_to_app_U0_start_full_n");
    sc_trace(mVcdFile, eth_to_app_U0_start_write, "eth_to_app_U0_start_write");
    sc_trace(mVcdFile, app_to_eth_U0_start_full_n, "app_to_eth_U0_start_full_n");
    sc_trace(mVcdFile, app_to_eth_U0_start_write, "app_to_eth_U0_start_write");
#endif

    }
    mHdltvinHandle.open("ethernet_bridge.hdltvin.dat");
    mHdltvoutHandle.open("ethernet_bridge.hdltvout.dat");
}

ethernet_bridge::~ethernet_bridge() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete ethernet_bridge_entr_U0;
    delete eth_to_app_U0;
    delete app_to_eth_U0;
    delete mac_addr_V_c_U;
    delete mac_addr_V_c42_U;
}

void ethernet_bridge::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ethernet_bridge::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_to_app_U0_ap_start = ap_const_logic_0;
    } else {
        eth_to_app_U0_ap_start = ap_const_logic_1;
    }
}

void ethernet_bridge::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void ethernet_bridge::thread_app_to_eth_U0_ap_continue() {
    app_to_eth_U0_ap_continue = ap_const_logic_1;
}

void ethernet_bridge::thread_app_to_eth_U0_ap_start() {
    app_to_eth_U0_ap_start = ap_const_logic_1;
}

void ethernet_bridge::thread_app_to_eth_U0_start_full_n() {
    app_to_eth_U0_start_full_n = ap_const_logic_1;
}

void ethernet_bridge::thread_app_to_eth_U0_start_write() {
    app_to_eth_U0_start_write = ap_const_logic_0;
}

void ethernet_bridge::thread_eth_to_app_U0_ap_continue() {
    eth_to_app_U0_ap_continue = ap_const_logic_1;
}

void ethernet_bridge::thread_eth_to_app_U0_start_full_n() {
    eth_to_app_U0_start_full_n = ap_const_logic_1;
}

void ethernet_bridge::thread_eth_to_app_U0_start_write() {
    eth_to_app_U0_start_write = ap_const_logic_0;
}

void ethernet_bridge::thread_ethernet_bridge_entr_U0_ap_continue() {
    ethernet_bridge_entr_U0_ap_continue = ap_const_logic_1;
}

void ethernet_bridge::thread_ethernet_bridge_entr_U0_ap_start() {
    ethernet_bridge_entr_U0_ap_start = ap_const_logic_1;
}

void ethernet_bridge::thread_ethernet_bridge_entr_U0_start_full_n() {
    ethernet_bridge_entr_U0_start_full_n = ap_const_logic_1;
}

void ethernet_bridge::thread_ethernet_bridge_entr_U0_start_write() {
    ethernet_bridge_entr_U0_start_write = ap_const_logic_0;
}

void ethernet_bridge::thread_from_app_V_read() {
    from_app_V_read = app_to_eth_U0_from_app_V_read.read();
}

void ethernet_bridge::thread_from_eth_V_read() {
    from_eth_V_read = eth_to_app_U0_from_eth_V_read.read();
}

void ethernet_bridge::thread_mac_table_V_address0() {
    mac_table_V_address0 = app_to_eth_U0_mac_table_V_address0.read();
}

void ethernet_bridge::thread_mac_table_V_address1() {
    mac_table_V_address1 = ap_const_lv8_0;
}

void ethernet_bridge::thread_mac_table_V_ce0() {
    mac_table_V_ce0 = app_to_eth_U0_mac_table_V_ce0.read();
}

void ethernet_bridge::thread_mac_table_V_ce1() {
    mac_table_V_ce1 = ap_const_logic_0;
}

void ethernet_bridge::thread_mac_table_V_d0() {
    mac_table_V_d0 = ap_const_lv48_0;
}

void ethernet_bridge::thread_mac_table_V_d1() {
    mac_table_V_d1 = ap_const_lv48_0;
}

void ethernet_bridge::thread_mac_table_V_we0() {
    mac_table_V_we0 = ap_const_logic_0;
}

void ethernet_bridge::thread_mac_table_V_we1() {
    mac_table_V_we1 = ap_const_logic_0;
}

void ethernet_bridge::thread_to_app_V_din() {
    to_app_V_din = eth_to_app_U0_to_app_V_din.read();
}

void ethernet_bridge::thread_to_app_V_write() {
    to_app_V_write = eth_to_app_U0_to_app_V_write.read();
}

void ethernet_bridge::thread_to_eth_V_din() {
    to_eth_V_din = app_to_eth_U0_to_eth_V_din.read();
}

void ethernet_bridge::thread_to_eth_V_write() {
    to_eth_V_write = app_to_eth_U0_to_eth_V_write.read();
}

void ethernet_bridge::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvoutHandle << mComma << "{"  <<  " \"to_app_V_din\" :  \"" << to_app_V_din.read() << "\" ";
        mHdltvinHandle << mComma << "{"  <<  " \"to_app_V_full_n\" :  \"" << to_app_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_app_V_write\" :  \"" << to_app_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_eth_V_dout\" :  \"" << from_eth_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_eth_V_empty_n\" :  \"" << from_eth_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"from_eth_V_read\" :  \"" << from_eth_V_read.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_app_V_dout\" :  \"" << from_app_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"from_app_V_empty_n\" :  \"" << from_app_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"from_app_V_read\" :  \"" << from_app_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_eth_V_din\" :  \"" << to_eth_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"to_eth_V_full_n\" :  \"" << to_eth_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"to_eth_V_write\" :  \"" << to_eth_V_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mac_addr_V\" :  \"" << mac_addr_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mac_table_V_address0\" :  \"" << mac_table_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mac_table_V_ce0\" :  \"" << mac_table_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mac_table_V_d0\" :  \"" << mac_table_V_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mac_table_V_q0\" :  \"" << mac_table_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mac_table_V_we0\" :  \"" << mac_table_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mac_table_V_address1\" :  \"" << mac_table_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mac_table_V_ce1\" :  \"" << mac_table_V_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mac_table_V_d1\" :  \"" << mac_table_V_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mac_table_V_q1\" :  \"" << mac_table_V_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mac_table_V_we1\" :  \"" << mac_table_V_we1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

