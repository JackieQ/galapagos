// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "eth_to_app.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic eth_to_app::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic eth_to_app::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> eth_to_app::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> eth_to_app::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool eth_to_app::ap_const_boolean_1 = true;
const sc_lv<3> eth_to_app::ap_const_lv3_1 = "1";
const sc_lv<1> eth_to_app::ap_const_lv1_1 = "1";
const sc_lv<3> eth_to_app::ap_const_lv3_3 = "11";
const sc_lv<3> eth_to_app::ap_const_lv3_2 = "10";
const sc_lv<3> eth_to_app::ap_const_lv3_0 = "000";
const bool eth_to_app::ap_const_boolean_0 = false;
const sc_lv<1> eth_to_app::ap_const_lv1_0 = "0";
const sc_lv<32> eth_to_app::ap_const_lv32_40 = "1000000";
const sc_lv<32> eth_to_app::ap_const_lv32_8 = "1000";
const sc_lv<32> eth_to_app::ap_const_lv32_F = "1111";
const sc_lv<32> eth_to_app::ap_const_lv32_10 = "10000";
const sc_lv<32> eth_to_app::ap_const_lv32_17 = "10111";
const sc_lv<32> eth_to_app::ap_const_lv32_20 = "100000";
const sc_lv<32> eth_to_app::ap_const_lv32_27 = "100111";
const sc_lv<32> eth_to_app::ap_const_lv32_30 = "110000";
const sc_lv<32> eth_to_app::ap_const_lv32_37 = "110111";
const sc_lv<32> eth_to_app::ap_const_lv32_18 = "11000";
const sc_lv<32> eth_to_app::ap_const_lv32_1F = "11111";
const sc_lv<32> eth_to_app::ap_const_lv32_28 = "101000";
const sc_lv<32> eth_to_app::ap_const_lv32_2F = "101111";
const sc_lv<32> eth_to_app::ap_const_lv32_38 = "111000";
const sc_lv<32> eth_to_app::ap_const_lv32_3F = "111111";
const sc_lv<32> eth_to_app::ap_const_lv32_48 = "1001000";
const sc_lv<32> eth_to_app::ap_const_lv32_41 = "1000001";

eth_to_app::eth_to_app(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( mac_address_V_empty_n );
    sensitive << ( from_eth_V_empty_n );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op15_read_state1 );
    sensitive << ( ap_predicate_op32_read_state1 );
    sensitive << ( ap_predicate_op37_read_state1 );
    sensitive << ( to_app_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( mac_address_V_empty_n );
    sensitive << ( from_eth_V_empty_n );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op15_read_state1 );
    sensitive << ( ap_predicate_op32_read_state1 );
    sensitive << ( ap_predicate_op37_read_state1 );
    sensitive << ( to_app_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( mac_address_V_empty_n );
    sensitive << ( from_eth_V_empty_n );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op15_read_state1 );
    sensitive << ( ap_predicate_op32_read_state1 );
    sensitive << ( ap_predicate_op37_read_state1 );
    sensitive << ( to_app_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( mac_address_V_empty_n );
    sensitive << ( from_eth_V_empty_n );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op15_read_state1 );
    sensitive << ( ap_predicate_op32_read_state1 );
    sensitive << ( ap_predicate_op37_read_state1 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( to_app_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );

    SC_METHOD(thread_ap_condition_102);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_condition_200);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( state_V_1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4);
    sensitive << ( from_eth_V_dout );
    sensitive << ( grp_nbreadreq_fu_98_p3 );
    sensitive << ( app_packet_out_last_s );
    sensitive << ( ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_119 );
    sensitive << ( ap_condition_200 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_119);

    SC_METHOD(thread_ap_predicate_op15_read_state1);
    sensitive << ( grp_nbreadreq_fu_98_p3 );
    sensitive << ( state_V_1 );

    SC_METHOD(thread_ap_predicate_op32_read_state1);
    sensitive << ( grp_nbreadreq_fu_98_p3 );
    sensitive << ( state_V_1 );

    SC_METHOD(thread_ap_predicate_op37_read_state1);
    sensitive << ( grp_nbreadreq_fu_98_p3 );
    sensitive << ( state_V_1 );

    SC_METHOD(thread_ap_predicate_op59_write_state2);
    sensitive << ( state_V_1_load_reg_339 );
    sensitive << ( tmp_2_reg_347 );

    SC_METHOD(thread_ap_predicate_op7_read_state1);
    sensitive << ( grp_nbreadreq_fu_98_p3 );
    sensitive << ( state_V_1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_from_eth_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( from_eth_V_empty_n );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op15_read_state1 );
    sensitive << ( ap_predicate_op32_read_state1 );
    sensitive << ( ap_predicate_op37_read_state1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_from_eth_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_predicate_op7_read_state1 );
    sensitive << ( ap_predicate_op15_read_state1 );
    sensitive << ( ap_predicate_op32_read_state1 );
    sensitive << ( ap_predicate_op37_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_128_p3);
    sensitive << ( from_eth_V_dout );

    SC_METHOD(thread_grp_fu_137_p4);
    sensitive << ( from_eth_V_dout );

    SC_METHOD(thread_grp_fu_147_p4);
    sensitive << ( from_eth_V_dout );

    SC_METHOD(thread_grp_fu_157_p4);
    sensitive << ( from_eth_V_dout );

    SC_METHOD(thread_grp_fu_177_p4);
    sensitive << ( from_eth_V_dout );

    SC_METHOD(thread_grp_fu_187_p4);
    sensitive << ( from_eth_V_dout );

    SC_METHOD(thread_grp_nbreadreq_fu_98_p3);
    sensitive << ( from_eth_V_empty_n );

    SC_METHOD(thread_mac_address_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( mac_address_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_mac_address_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_not_tmp_last_V_4_loa_fu_201_p2);
    sensitive << ( grp_fu_128_p3 );

    SC_METHOD(thread_observedAddress_V_fu_282_p7);
    sensitive << ( grp_fu_137_p4 );
    sensitive << ( grp_fu_147_p4 );
    sensitive << ( grp_fu_157_p4 );
    sensitive << ( grp_fu_177_p4 );
    sensitive << ( grp_fu_187_p4 );
    sensitive << ( tmp_4_fu_278_p1 );

    SC_METHOD(thread_storemerge1_cast_i_c_fu_304_p3);
    sensitive << ( tmp_i_fu_298_p2 );

    SC_METHOD(thread_storemerge2_cast_i_c_fu_252_p3);
    sensitive << ( ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4 );

    SC_METHOD(thread_storemerge_cast_i_fu_207_p1);
    sensitive << ( not_tmp_last_V_4_loa_fu_201_p2 );

    SC_METHOD(thread_tmp_11_fu_222_p1);
    sensitive << ( from_eth_V_dout );

    SC_METHOD(thread_tmp_19_fu_242_p4);
    sensitive << ( from_eth_V_dout );

    SC_METHOD(thread_tmp_4_fu_278_p1);
    sensitive << ( from_eth_V_dout );

    SC_METHOD(thread_tmp_i_fu_298_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( mac_address_V_dout );
    sensitive << ( ap_predicate_op37_read_state1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( observedAddress_V_fu_282_p7 );

    SC_METHOD(thread_to_app_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( to_app_V_full_n );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_to_app_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( dest_V );
    sensitive << ( tmp_last_V_reg_351 );
    sensitive << ( tmp_11_reg_356 );
    sensitive << ( tmp_12_reg_361 );
    sensitive << ( tmp_13_reg_366 );
    sensitive << ( tmp_14_reg_371 );
    sensitive << ( tmp_15_reg_376 );
    sensitive << ( tmp_16_reg_381 );
    sensitive << ( tmp_17_reg_386 );
    sensitive << ( tmp_18_reg_391 );
    sensitive << ( tmp_19_reg_396 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_to_app_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_predicate_op59_write_state2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    state_V_1 = "000";
    dest_V = "00000000";
    app_packet_out_last_s = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "eth_to_app_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, mac_address_V_dout, "(port)mac_address_V_dout");
    sc_trace(mVcdFile, mac_address_V_empty_n, "(port)mac_address_V_empty_n");
    sc_trace(mVcdFile, mac_address_V_read, "(port)mac_address_V_read");
    sc_trace(mVcdFile, from_eth_V_dout, "(port)from_eth_V_dout");
    sc_trace(mVcdFile, from_eth_V_empty_n, "(port)from_eth_V_empty_n");
    sc_trace(mVcdFile, from_eth_V_read, "(port)from_eth_V_read");
    sc_trace(mVcdFile, to_app_V_din, "(port)to_app_V_din");
    sc_trace(mVcdFile, to_app_V_full_n, "(port)to_app_V_full_n");
    sc_trace(mVcdFile, to_app_V_write, "(port)to_app_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, grp_nbreadreq_fu_98_p3, "grp_nbreadreq_fu_98_p3");
    sc_trace(mVcdFile, ap_predicate_op7_read_state1, "ap_predicate_op7_read_state1");
    sc_trace(mVcdFile, ap_predicate_op15_read_state1, "ap_predicate_op15_read_state1");
    sc_trace(mVcdFile, ap_predicate_op32_read_state1, "ap_predicate_op32_read_state1");
    sc_trace(mVcdFile, ap_predicate_op37_read_state1, "ap_predicate_op37_read_state1");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, state_V_1_load_reg_339, "state_V_1_load_reg_339");
    sc_trace(mVcdFile, tmp_2_reg_347, "tmp_2_reg_347");
    sc_trace(mVcdFile, ap_predicate_op59_write_state2, "ap_predicate_op59_write_state2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, state_V_1, "state_V_1");
    sc_trace(mVcdFile, dest_V, "dest_V");
    sc_trace(mVcdFile, app_packet_out_last_s, "app_packet_out_last_s");
    sc_trace(mVcdFile, from_eth_V_blk_n, "from_eth_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, to_app_V_blk_n, "to_app_V_blk_n");
    sc_trace(mVcdFile, mac_address_V_blk_n, "mac_address_V_blk_n");
    sc_trace(mVcdFile, grp_fu_128_p3, "grp_fu_128_p3");
    sc_trace(mVcdFile, tmp_last_V_reg_351, "tmp_last_V_reg_351");
    sc_trace(mVcdFile, tmp_11_fu_222_p1, "tmp_11_fu_222_p1");
    sc_trace(mVcdFile, tmp_11_reg_356, "tmp_11_reg_356");
    sc_trace(mVcdFile, tmp_12_reg_361, "tmp_12_reg_361");
    sc_trace(mVcdFile, grp_fu_137_p4, "grp_fu_137_p4");
    sc_trace(mVcdFile, tmp_13_reg_366, "tmp_13_reg_366");
    sc_trace(mVcdFile, grp_fu_147_p4, "grp_fu_147_p4");
    sc_trace(mVcdFile, tmp_14_reg_371, "tmp_14_reg_371");
    sc_trace(mVcdFile, grp_fu_157_p4, "grp_fu_157_p4");
    sc_trace(mVcdFile, tmp_15_reg_376, "tmp_15_reg_376");
    sc_trace(mVcdFile, tmp_16_reg_381, "tmp_16_reg_381");
    sc_trace(mVcdFile, grp_fu_177_p4, "grp_fu_177_p4");
    sc_trace(mVcdFile, tmp_17_reg_386, "tmp_17_reg_386");
    sc_trace(mVcdFile, grp_fu_187_p4, "grp_fu_187_p4");
    sc_trace(mVcdFile, tmp_18_reg_391, "tmp_18_reg_391");
    sc_trace(mVcdFile, tmp_19_fu_242_p4, "tmp_19_fu_242_p4");
    sc_trace(mVcdFile, tmp_19_reg_396, "tmp_19_reg_396");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4, "ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_119, "ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_119");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, storemerge_cast_i_fu_207_p1, "storemerge_cast_i_fu_207_p1");
    sc_trace(mVcdFile, storemerge2_cast_i_c_fu_252_p3, "storemerge2_cast_i_c_fu_252_p3");
    sc_trace(mVcdFile, storemerge1_cast_i_c_fu_304_p3, "storemerge1_cast_i_c_fu_304_p3");
    sc_trace(mVcdFile, not_tmp_last_V_4_loa_fu_201_p2, "not_tmp_last_V_4_loa_fu_201_p2");
    sc_trace(mVcdFile, tmp_4_fu_278_p1, "tmp_4_fu_278_p1");
    sc_trace(mVcdFile, observedAddress_V_fu_282_p7, "observedAddress_V_fu_282_p7");
    sc_trace(mVcdFile, tmp_i_fu_298_p2, "tmp_i_fu_298_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_200, "ap_condition_200");
    sc_trace(mVcdFile, ap_condition_102, "ap_condition_102");
#endif

    }
}

eth_to_app::~eth_to_app() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void eth_to_app::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_102.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_read_state1.read())) {
            state_V_1 = storemerge1_cast_i_c_fu_304_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_read_state1.read())) {
            state_V_1 = ap_const_lv3_3;
        } else if (esl_seteq<1,3,3>(state_V_1.read(), ap_const_lv3_3)) {
            state_V_1 = storemerge2_cast_i_c_fu_252_p3.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) {
            state_V_1 = storemerge_cast_i_fu_207_p1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op15_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        app_packet_out_last_s = from_eth_V_dout.read().range(64, 64);
        tmp_13_reg_366 = from_eth_V_dout.read().range(15, 8);
        tmp_14_reg_371 = from_eth_V_dout.read().range(23, 16);
        tmp_15_reg_376 = from_eth_V_dout.read().range(39, 32);
        tmp_16_reg_381 = from_eth_V_dout.read().range(55, 48);
        tmp_17_reg_386 = from_eth_V_dout.read().range(31, 24);
        tmp_18_reg_391 = from_eth_V_dout.read().range(47, 40);
        tmp_last_V_reg_351 = from_eth_V_dout.read().range(64, 64);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dest_V = from_eth_V_dout.read().range(55, 48);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        state_V_1_load_reg_339 = state_V_1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op15_read_state1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_11_reg_356 = tmp_11_fu_222_p1.read();
        tmp_12_reg_361 = from_eth_V_dout.read().range(63, 56);
        tmp_19_reg_396 = tmp_19_fu_242_p4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,3,3>(state_V_1.read(), ap_const_lv3_3) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_2_reg_347 =  (sc_lv<1>) (from_eth_V_empty_n.read());
    }
}

void eth_to_app::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void eth_to_app::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void eth_to_app::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_logic_0, mac_address_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op15_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_logic_0, to_app_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void eth_to_app::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_logic_0, mac_address_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op15_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_logic_0, to_app_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void eth_to_app::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || 
   esl_seteq<1,1,1>(ap_const_logic_0, mac_address_V_empty_n.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op15_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_read_state1.read())) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
    esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_read_state1.read())) || 
   esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || (esl_seteq<1,1,1>(ap_const_logic_0, to_app_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void eth_to_app::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, mac_address_V_empty_n.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op15_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_read_state1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, from_eth_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void eth_to_app::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_logic_0, to_app_V_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read()));
}

void eth_to_app::thread_ap_condition_102() {
    ap_condition_102 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void eth_to_app::thread_ap_condition_200() {
    ap_condition_200 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,3,3>(state_V_1.read(), ap_const_lv3_3) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0));
}

void eth_to_app::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void eth_to_app::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void eth_to_app::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void eth_to_app::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void eth_to_app::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void eth_to_app::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void eth_to_app::thread_ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4() {
    if (esl_seteq<1,1,1>(ap_condition_200.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(grp_nbreadreq_fu_98_p3.read(), ap_const_lv1_0)) {
            ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4 = app_packet_out_last_s.read();
        } else if (esl_seteq<1,1,1>(grp_nbreadreq_fu_98_p3.read(), ap_const_lv1_1)) {
            ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4 = from_eth_V_dout.read().range(64, 64);
        } else {
            ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4 = ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_119.read();
        }
    } else {
        ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4 = ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_119.read();
    }
}

void eth_to_app::thread_ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_119() {
    ap_phi_reg_pp0_iter0_app_packet_out_last_2_reg_119 = "X";
}

void eth_to_app::thread_ap_predicate_op15_read_state1() {
    ap_predicate_op15_read_state1 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_98_p3.read(), ap_const_lv1_1) && esl_seteq<1,3,3>(state_V_1.read(), ap_const_lv3_3));
}

void eth_to_app::thread_ap_predicate_op32_read_state1() {
    ap_predicate_op32_read_state1 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_98_p3.read(), ap_const_lv1_1) && esl_seteq<1,3,3>(state_V_1.read(), ap_const_lv3_2));
}

void eth_to_app::thread_ap_predicate_op37_read_state1() {
    ap_predicate_op37_read_state1 = (esl_seteq<1,1,1>(grp_nbreadreq_fu_98_p3.read(), ap_const_lv1_1) && esl_seteq<1,3,3>(state_V_1.read(), ap_const_lv3_0));
}

void eth_to_app::thread_ap_predicate_op59_write_state2() {
    ap_predicate_op59_write_state2 = (esl_seteq<1,3,3>(ap_const_lv3_3, state_V_1_load_reg_339.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_2_reg_347.read()));
}

void eth_to_app::thread_ap_predicate_op7_read_state1() {
    ap_predicate_op7_read_state1 = (esl_seteq<1,3,3>(state_V_1.read(), ap_const_lv3_1) && esl_seteq<1,1,1>(grp_nbreadreq_fu_98_p3.read(), ap_const_lv1_1));
}

void eth_to_app::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void eth_to_app::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void eth_to_app::thread_from_eth_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op15_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        from_eth_V_blk_n = from_eth_V_empty_n.read();
    } else {
        from_eth_V_blk_n = ap_const_logic_1;
    }
}

void eth_to_app::thread_from_eth_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op15_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op7_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op32_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op37_read_state1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        from_eth_V_read = ap_const_logic_1;
    } else {
        from_eth_V_read = ap_const_logic_0;
    }
}

void eth_to_app::thread_grp_fu_128_p3() {
    grp_fu_128_p3 = from_eth_V_dout.read().range(64, 64);
}

void eth_to_app::thread_grp_fu_137_p4() {
    grp_fu_137_p4 = from_eth_V_dout.read().range(15, 8);
}

void eth_to_app::thread_grp_fu_147_p4() {
    grp_fu_147_p4 = from_eth_V_dout.read().range(23, 16);
}

void eth_to_app::thread_grp_fu_157_p4() {
    grp_fu_157_p4 = from_eth_V_dout.read().range(39, 32);
}

void eth_to_app::thread_grp_fu_177_p4() {
    grp_fu_177_p4 = from_eth_V_dout.read().range(31, 24);
}

void eth_to_app::thread_grp_fu_187_p4() {
    grp_fu_187_p4 = from_eth_V_dout.read().range(47, 40);
}

void eth_to_app::thread_grp_nbreadreq_fu_98_p3() {
    grp_nbreadreq_fu_98_p3 =  (sc_lv<1>) (from_eth_V_empty_n.read());
}

void eth_to_app::thread_mac_address_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        mac_address_V_blk_n = mac_address_V_empty_n.read();
    } else {
        mac_address_V_blk_n = ap_const_logic_1;
    }
}

void eth_to_app::thread_mac_address_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        mac_address_V_read = ap_const_logic_1;
    } else {
        mac_address_V_read = ap_const_logic_0;
    }
}

void eth_to_app::thread_not_tmp_last_V_4_loa_fu_201_p2() {
    not_tmp_last_V_4_loa_fu_201_p2 = (grp_fu_128_p3.read() ^ ap_const_lv1_1);
}

void eth_to_app::thread_observedAddress_V_fu_282_p7() {
    observedAddress_V_fu_282_p7 = esl_concat<40,8>(esl_concat<32,8>(esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(tmp_4_fu_278_p1.read(), grp_fu_137_p4.read()), grp_fu_147_p4.read()), grp_fu_177_p4.read()), grp_fu_157_p4.read()), grp_fu_187_p4.read());
}

void eth_to_app::thread_storemerge1_cast_i_c_fu_304_p3() {
    storemerge1_cast_i_c_fu_304_p3 = (!tmp_i_fu_298_p2.read()[0].is_01())? sc_lv<3>(): ((tmp_i_fu_298_p2.read()[0].to_bool())? ap_const_lv3_2: ap_const_lv3_1);
}

void eth_to_app::thread_storemerge2_cast_i_c_fu_252_p3() {
    storemerge2_cast_i_c_fu_252_p3 = (!ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4.read()[0].is_01())? sc_lv<3>(): ((ap_phi_mux_app_packet_out_last_2_phi_fu_122_p4.read()[0].to_bool())? ap_const_lv3_0: ap_const_lv3_3);
}

void eth_to_app::thread_storemerge_cast_i_fu_207_p1() {
    storemerge_cast_i_fu_207_p1 = esl_zext<3,1>(not_tmp_last_V_4_loa_fu_201_p2.read());
}

void eth_to_app::thread_tmp_11_fu_222_p1() {
    tmp_11_fu_222_p1 = from_eth_V_dout.read().range(8-1, 0);
}

void eth_to_app::thread_tmp_19_fu_242_p4() {
    tmp_19_fu_242_p4 = from_eth_V_dout.read().range(65, 72);
}

void eth_to_app::thread_tmp_4_fu_278_p1() {
    tmp_4_fu_278_p1 = from_eth_V_dout.read().range(8-1, 0);
}

void eth_to_app::thread_tmp_i_fu_298_p2() {
    tmp_i_fu_298_p2 = (!observedAddress_V_fu_282_p7.read().is_01() || !mac_address_V_dout.read().is_01())? sc_lv<1>(): sc_lv<1>(observedAddress_V_fu_282_p7.read() == mac_address_V_dout.read());
}

void eth_to_app::thread_to_app_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        to_app_V_blk_n = to_app_V_full_n.read();
    } else {
        to_app_V_blk_n = ap_const_logic_1;
    }
}

void eth_to_app::thread_to_app_V_din() {
    to_app_V_din = esl_concat<73,8>(esl_concat<65,8>(esl_concat<57,8>(esl_concat<49,8>(esl_concat<41,8>(esl_concat<33,8>(esl_concat<25,8>(esl_concat<17,8>(esl_concat<16,1>(esl_concat<8,8>(tmp_19_reg_396.read(), dest_V.read()), tmp_last_V_reg_351.read()), tmp_11_reg_356.read()), tmp_13_reg_366.read()), tmp_14_reg_371.read()), tmp_17_reg_386.read()), tmp_15_reg_376.read()), tmp_18_reg_391.read()), tmp_16_reg_381.read()), tmp_12_reg_361.read());
}

void eth_to_app::thread_to_app_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op59_write_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        to_app_V_write = ap_const_logic_1;
    } else {
        to_app_V_write = ap_const_logic_0;
    }
}

void eth_to_app::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

