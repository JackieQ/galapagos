// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module app_to_eth (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        from_app_V_dout,
        from_app_V_empty_n,
        from_app_V_read,
        src_mac_address_V_dout,
        src_mac_address_V_empty_n,
        src_mac_address_V_read,
        to_eth_V_din,
        to_eth_V_full_n,
        to_eth_V_write,
        mac_table_V_address0,
        mac_table_V_ce0,
        mac_table_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [80:0] from_app_V_dout;
input   from_app_V_empty_n;
output   from_app_V_read;
input  [47:0] src_mac_address_V_dout;
input   src_mac_address_V_empty_n;
output   src_mac_address_V_read;
output  [72:0] to_eth_V_din;
input   to_eth_V_full_n;
output   to_eth_V_write;
output  [7:0] mac_table_V_address0;
output   mac_table_V_ce0;
input  [47:0] mac_table_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg from_app_V_read;
reg src_mac_address_V_read;
reg[72:0] to_eth_V_din;
reg to_eth_V_write;
reg mac_table_V_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [2:0] state_V_load_load_fu_213_p1;
wire   [0:0] grp_nbreadreq_fu_128_p3;
reg    ap_predicate_op9_read_state1;
reg    ap_predicate_op34_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [2:0] state_V_load_reg_580;
reg   [0:0] tmp_4_reg_601;
reg    ap_predicate_op59_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [95:0] eth_dst_src_V;
reg   [2:0] state_V;
reg   [63:0] app_packet_in_data_V;
reg   [0:0] app_packet_in_last_V;
reg   [47:0] dest_mac_address_V;
reg   [7:0] app_packet_in_tkeep_s;
reg   [7:0] app_packet_in_tdest_s;
reg    from_app_V_blk_n;
wire    ap_block_pp0_stage0;
reg    to_eth_V_blk_n;
reg    src_mac_address_V_blk_n;
reg   [63:0] lhs_V_reg_584;
reg   [7:0] app_packet_in_tkeep_1_reg_596;
wire   [7:0] tmp_43_fu_239_p1;
reg   [7:0] tmp_43_reg_605;
reg   [7:0] tmp_27_reg_610;
reg   [7:0] tmp_28_reg_615;
reg   [7:0] tmp_29_reg_620;
reg   [7:0] tmp_30_reg_625;
reg   [7:0] tmp_31_reg_630;
reg   [7:0] tmp_32_reg_635;
reg   [7:0] tmp_33_reg_640;
reg   [7:0] tmp_34_fu_313_p4;
reg   [7:0] tmp_34_reg_645;
reg   [0:0] tmp_reg_650;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_i_fu_373_p1;
wire   [72:0] tmp_520_fu_396_p11;
reg    ap_block_pp0_stage0_01001;
wire   [72:0] tmp_3_fu_487_p11;
wire   [72:0] tmp_2_fu_530_p3;
wire   [72:0] tmp_1_fu_563_p4;
wire   [95:0] p_Result_s_fu_539_p3;
wire   [2:0] storemerge_i_fu_323_p3;
wire   [2:0] storemerge3_i_fu_337_p3;
wire   [63:0] lhs_V_1_fu_229_p1;
wire   [63:0] tmp_39_fu_363_p1;
wire   [0:0] grp_fu_167_p3;
wire   [7:0] grp_fu_181_p4;
reg   [7:0] tmp_26_fu_478_p4;
wire   [7:0] tmp_38_fu_412_p1;
wire   [7:0] tmp_20_fu_424_p4;
wire   [7:0] tmp_21_fu_433_p4;
wire   [7:0] tmp_24_fu_460_p4;
wire   [7:0] tmp_22_fu_442_p4;
wire   [7:0] tmp_25_fu_469_p4;
wire   [7:0] tmp_23_fu_451_p4;
wire   [7:0] tmp_s_fu_415_p4;
wire   [31:0] temp_V_fu_388_p1;
wire   [55:0] p_Result_1_fu_516_p4;
wire   [63:0] tmp_data_V_fu_526_p1;
wire   [15:0] tmp_5_i_fu_553_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_100;
reg    ap_condition_193;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 eth_dst_src_V = 96'd0;
#0 state_V = 3'd0;
#0 app_packet_in_data_V = 64'd0;
#0 app_packet_in_last_V = 1'd0;
#0 dest_mac_address_V = 48'd0;
#0 app_packet_in_tkeep_s = 8'd0;
#0 app_packet_in_tdest_s = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_100)) begin
        if ((ap_predicate_op34_read_state1 == 1'b1)) begin
            app_packet_in_data_V <= tmp_39_fu_363_p1;
        end else if ((ap_predicate_op9_read_state1 == 1'b1)) begin
            app_packet_in_data_V <= lhs_V_1_fu_229_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_100)) begin
        if ((ap_predicate_op34_read_state1 == 1'b1)) begin
            state_V <= 3'd1;
        end else if ((state_V_load_load_fu_213_p1 == 3'd1)) begin
            state_V <= 3'd2;
        end else if ((state_V_load_load_fu_213_p1 == 3'd2)) begin
            state_V <= 3'd3;
        end else if ((state_V_load_load_fu_213_p1 == 3'd3)) begin
            state_V <= storemerge3_i_fu_337_p3;
        end else if ((ap_predicate_op9_read_state1 == 1'b1)) begin
            state_V <= storemerge_i_fu_323_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1)))) begin
        app_packet_in_last_V <= from_app_V_dout[32'd64];
        app_packet_in_tdest_s <= {{from_app_V_dout[72:65]}};
        app_packet_in_tkeep_s <= {{from_app_V_dout[80:73]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        app_packet_in_tkeep_1_reg_596 <= app_packet_in_tkeep_s;
        lhs_V_reg_584 <= app_packet_in_data_V;
        state_V_load_reg_580 <= state_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (state_V_load_reg_580 == 3'd0) & (tmp_reg_650 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_mac_address_V <= mac_table_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (state_V_load_reg_580 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        eth_dst_src_V <= p_Result_s_fu_539_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1))) begin
        tmp_27_reg_610 <= {{from_app_V_dout[63:56]}};
        tmp_28_reg_615 <= {{from_app_V_dout[15:8]}};
        tmp_29_reg_620 <= {{from_app_V_dout[23:16]}};
        tmp_30_reg_625 <= {{from_app_V_dout[39:32]}};
        tmp_31_reg_630 <= {{from_app_V_dout[55:48]}};
        tmp_32_reg_635 <= {{from_app_V_dout[31:24]}};
        tmp_33_reg_640 <= {{from_app_V_dout[47:40]}};
        tmp_34_reg_645 <= tmp_34_fu_313_p4;
        tmp_43_reg_605 <= tmp_43_fu_239_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (state_V == 3'd4) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_601 <= from_app_V_empty_n;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (state_V == 3'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_650 <= from_app_V_empty_n;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        from_app_V_blk_n = from_app_V_empty_n;
    end else begin
        from_app_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1)))) begin
        from_app_V_read = 1'b1;
    end else begin
        from_app_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mac_table_V_ce0 = 1'b1;
    end else begin
        mac_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        src_mac_address_V_blk_n = src_mac_address_V_empty_n;
    end else begin
        src_mac_address_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_mac_address_V_read = 1'b1;
    end else begin
        src_mac_address_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((state_V_load_reg_580 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((state_V_load_reg_580 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((state_V_load_reg_580 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op59_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        to_eth_V_blk_n = to_eth_V_full_n;
    end else begin
        to_eth_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_193)) begin
        if ((state_V_load_reg_580 == 3'd1)) begin
            to_eth_V_din = tmp_1_fu_563_p4;
        end else if ((state_V_load_reg_580 == 3'd2)) begin
            to_eth_V_din = tmp_2_fu_530_p3;
        end else if ((state_V_load_reg_580 == 3'd3)) begin
            to_eth_V_din = tmp_3_fu_487_p11;
        end else if ((ap_predicate_op59_write_state2 == 1'b1)) begin
            to_eth_V_din = tmp_520_fu_396_p11;
        end else begin
            to_eth_V_din = 'bx;
        end
    end else begin
        to_eth_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (state_V_load_reg_580 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (state_V_load_reg_580 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (state_V_load_reg_580 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op59_write_state2 == 1'b1)))) begin
        to_eth_V_write = 1'b1;
    end else begin
        to_eth_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((src_mac_address_V_empty_n == 1'b0) | ((state_V_load_reg_580 == 3'd1) & (to_eth_V_full_n == 1'b0)) | ((state_V_load_reg_580 == 3'd2) & (to_eth_V_full_n == 1'b0)) | ((state_V_load_reg_580 == 3'd3) & (to_eth_V_full_n == 1'b0)) | ((to_eth_V_full_n == 1'b0) & (ap_predicate_op59_write_state2 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((from_app_V_empty_n == 1'b0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((from_app_V_empty_n == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((src_mac_address_V_empty_n == 1'b0) | ((state_V_load_reg_580 == 3'd1) & (to_eth_V_full_n == 1'b0)) | ((state_V_load_reg_580 == 3'd2) & (to_eth_V_full_n == 1'b0)) | ((state_V_load_reg_580 == 3'd3) & (to_eth_V_full_n == 1'b0)) | ((to_eth_V_full_n == 1'b0) & (ap_predicate_op59_write_state2 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((from_app_V_empty_n == 1'b0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((from_app_V_empty_n == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((src_mac_address_V_empty_n == 1'b0) | ((state_V_load_reg_580 == 3'd1) & (to_eth_V_full_n == 1'b0)) | ((state_V_load_reg_580 == 3'd2) & (to_eth_V_full_n == 1'b0)) | ((state_V_load_reg_580 == 3'd3) & (to_eth_V_full_n == 1'b0)) | ((to_eth_V_full_n == 1'b0) & (ap_predicate_op59_write_state2 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((from_app_V_empty_n == 1'b0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((from_app_V_empty_n == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((from_app_V_empty_n == 1'b0) & (ap_predicate_op34_read_state1 == 1'b1)) | ((from_app_V_empty_n == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((src_mac_address_V_empty_n == 1'b0) | ((state_V_load_reg_580 == 3'd1) & (to_eth_V_full_n == 1'b0)) | ((state_V_load_reg_580 == 3'd2) & (to_eth_V_full_n == 1'b0)) | ((state_V_load_reg_580 == 3'd3) & (to_eth_V_full_n == 1'b0)) | ((to_eth_V_full_n == 1'b0) & (ap_predicate_op59_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_condition_100 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_193 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op34_read_state1 = ((grp_nbreadreq_fu_128_p3 == 1'd1) & (state_V == 3'd0));
end

always @ (*) begin
    ap_predicate_op59_write_state2 = ((tmp_4_reg_601 == 1'd1) & (state_V_load_reg_580 == 3'd4));
end

always @ (*) begin
    ap_predicate_op9_read_state1 = ((grp_nbreadreq_fu_128_p3 == 1'd1) & (state_V == 3'd4));
end

assign grp_fu_167_p3 = from_app_V_dout[32'd64];

assign grp_fu_181_p4 = {{from_app_V_dout[72:65]}};

assign grp_nbreadreq_fu_128_p3 = from_app_V_empty_n;

assign lhs_V_1_fu_229_p1 = from_app_V_dout[63:0];

assign mac_table_V_address0 = tmp_i_fu_373_p1;

assign p_Result_1_fu_516_p4 = {{{temp_V_fu_388_p1}, {16'd29696}}, {app_packet_in_tdest_s}};

assign p_Result_s_fu_539_p3 = {{dest_mac_address_V}, {src_mac_address_V_dout}};

assign state_V_load_load_fu_213_p1 = state_V;

assign storemerge3_i_fu_337_p3 = ((app_packet_in_last_V[0:0] === 1'b1) ? 3'd0 : 3'd4);

assign storemerge_i_fu_323_p3 = ((grp_fu_167_p3[0:0] === 1'b1) ? 3'd0 : 3'd4);

assign temp_V_fu_388_p1 = eth_dst_src_V[31:0];

assign tmp_1_fu_563_p4 = {{{{9'd510}, {dest_mac_address_V}}}, {tmp_5_i_fu_553_p4}};

assign tmp_20_fu_424_p4 = {{lhs_V_reg_584[15:8]}};

assign tmp_21_fu_433_p4 = {{lhs_V_reg_584[23:16]}};

assign tmp_22_fu_442_p4 = {{lhs_V_reg_584[39:32]}};

assign tmp_23_fu_451_p4 = {{lhs_V_reg_584[55:48]}};

assign tmp_24_fu_460_p4 = {{lhs_V_reg_584[31:24]}};

assign tmp_25_fu_469_p4 = {{lhs_V_reg_584[47:40]}};

integer ap_tvar_int_0;

always @ (app_packet_in_tkeep_1_reg_596) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 7 - 0) begin
            tmp_26_fu_478_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_26_fu_478_p4[ap_tvar_int_0] = app_packet_in_tkeep_1_reg_596[7 - ap_tvar_int_0];
        end
    end
end

assign tmp_2_fu_530_p3 = {{9'd510}, {tmp_data_V_fu_526_p1}};

integer ap_tvar_int_1;

always @ (from_app_V_dout) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 80 - 73) begin
            tmp_34_fu_313_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_34_fu_313_p4[ap_tvar_int_1] = from_app_V_dout[80 - ap_tvar_int_1];
        end
    end
end

assign tmp_38_fu_412_p1 = lhs_V_reg_584[7:0];

assign tmp_39_fu_363_p1 = from_app_V_dout[63:0];

assign tmp_3_fu_487_p11 = {{{{{{{{{{tmp_26_fu_478_p4}, {1'd0}}, {tmp_38_fu_412_p1}}, {tmp_20_fu_424_p4}}, {tmp_21_fu_433_p4}}, {tmp_24_fu_460_p4}}, {tmp_22_fu_442_p4}}, {tmp_25_fu_469_p4}}, {tmp_23_fu_451_p4}}, {tmp_s_fu_415_p4}};

assign tmp_43_fu_239_p1 = from_app_V_dout[7:0];

assign tmp_520_fu_396_p11 = {{{{{{{{{{tmp_34_reg_645}, {1'd0}}, {tmp_43_reg_605}}, {tmp_28_reg_615}}, {tmp_29_reg_620}}, {tmp_32_reg_635}}, {tmp_30_reg_625}}, {tmp_33_reg_640}}, {tmp_31_reg_630}}, {tmp_27_reg_610}};

assign tmp_5_i_fu_553_p4 = {{src_mac_address_V_dout[47:32]}};

assign tmp_data_V_fu_526_p1 = p_Result_1_fu_516_p4;

assign tmp_i_fu_373_p1 = grp_fu_181_p4;

assign tmp_s_fu_415_p4 = {{lhs_V_reg_584[63:56]}};

endmodule //app_to_eth
