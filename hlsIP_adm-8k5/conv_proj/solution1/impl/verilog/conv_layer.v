// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_layer,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=57,HLS_SYN_FF=6712,HLS_SYN_LUT=4836}" *)

module conv_layer (
        ap_clk,
        ap_rst_n,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 64'd1;
parameter    ap_ST_fsm_state2 = 64'd2;
parameter    ap_ST_fsm_state3 = 64'd4;
parameter    ap_ST_fsm_state4 = 64'd8;
parameter    ap_ST_fsm_state5 = 64'd16;
parameter    ap_ST_fsm_state6 = 64'd32;
parameter    ap_ST_fsm_state7 = 64'd64;
parameter    ap_ST_fsm_state8 = 64'd128;
parameter    ap_ST_fsm_state9 = 64'd256;
parameter    ap_ST_fsm_state10 = 64'd512;
parameter    ap_ST_fsm_state11 = 64'd1024;
parameter    ap_ST_fsm_state12 = 64'd2048;
parameter    ap_ST_fsm_state13 = 64'd4096;
parameter    ap_ST_fsm_state14 = 64'd8192;
parameter    ap_ST_fsm_state15 = 64'd16384;
parameter    ap_ST_fsm_state16 = 64'd32768;
parameter    ap_ST_fsm_state17 = 64'd65536;
parameter    ap_ST_fsm_state18 = 64'd131072;
parameter    ap_ST_fsm_state19 = 64'd262144;
parameter    ap_ST_fsm_state20 = 64'd524288;
parameter    ap_ST_fsm_state21 = 64'd1048576;
parameter    ap_ST_fsm_state22 = 64'd2097152;
parameter    ap_ST_fsm_state23 = 64'd4194304;
parameter    ap_ST_fsm_state24 = 64'd8388608;
parameter    ap_ST_fsm_state25 = 64'd16777216;
parameter    ap_ST_fsm_state26 = 64'd33554432;
parameter    ap_ST_fsm_state27 = 64'd67108864;
parameter    ap_ST_fsm_state28 = 64'd134217728;
parameter    ap_ST_fsm_state29 = 64'd268435456;
parameter    ap_ST_fsm_state30 = 64'd536870912;
parameter    ap_ST_fsm_state31 = 64'd1073741824;
parameter    ap_ST_fsm_state32 = 64'd2147483648;
parameter    ap_ST_fsm_state33 = 64'd4294967296;
parameter    ap_ST_fsm_state34 = 64'd8589934592;
parameter    ap_ST_fsm_state35 = 64'd17179869184;
parameter    ap_ST_fsm_state36 = 64'd34359738368;
parameter    ap_ST_fsm_state37 = 64'd68719476736;
parameter    ap_ST_fsm_state38 = 64'd137438953472;
parameter    ap_ST_fsm_state39 = 64'd274877906944;
parameter    ap_ST_fsm_state40 = 64'd549755813888;
parameter    ap_ST_fsm_state41 = 64'd1099511627776;
parameter    ap_ST_fsm_state42 = 64'd2199023255552;
parameter    ap_ST_fsm_state43 = 64'd4398046511104;
parameter    ap_ST_fsm_state44 = 64'd8796093022208;
parameter    ap_ST_fsm_state45 = 64'd17592186044416;
parameter    ap_ST_fsm_state46 = 64'd35184372088832;
parameter    ap_ST_fsm_state47 = 64'd70368744177664;
parameter    ap_ST_fsm_state48 = 64'd140737488355328;
parameter    ap_ST_fsm_state49 = 64'd281474976710656;
parameter    ap_ST_fsm_state50 = 64'd562949953421312;
parameter    ap_ST_fsm_state51 = 64'd1125899906842624;
parameter    ap_ST_fsm_state52 = 64'd2251799813685248;
parameter    ap_ST_fsm_state53 = 64'd4503599627370496;
parameter    ap_ST_fsm_state54 = 64'd9007199254740992;
parameter    ap_ST_fsm_state55 = 64'd18014398509481984;
parameter    ap_ST_fsm_state56 = 64'd36028797018963968;
parameter    ap_ST_fsm_state57 = 64'd72057594037927936;
parameter    ap_ST_fsm_state58 = 64'd144115188075855872;
parameter    ap_ST_fsm_state59 = 64'd288230376151711744;
parameter    ap_ST_fsm_state60 = 64'd576460752303423488;
parameter    ap_ST_fsm_state61 = 64'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 64'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 64'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 64'd9223372036854775808;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [63:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_offset;
wire   [31:0] output_offset;
wire   [31:0] b;
wire   [31:0] od;
wire   [31:0] ox;
wire   [31:0] oy;
wire   [31:0] id;
wire   [31:0] ix;
wire   [31:0] iy;
wire   [31:0] s;
wire   [31:0] k;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state17;
wire   [0:0] tmp_17_fu_699_p2;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state43;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state58;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state59;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state64;
reg    mem_AWVALID;
wire    mem_AWREADY;
reg    mem_WVALID;
wire    mem_WREADY;
reg    mem_ARVALID;
wire    mem_ARREADY;
reg   [63:0] mem_ARADDR;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [31:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
reg    mem_BREADY;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
reg  signed [31:0] k_read_reg_957;
reg   [31:0] s_read_reg_970;
reg  signed [31:0] iy_read_reg_976;
reg  signed [31:0] ix_read_reg_982;
reg  signed [31:0] id_read_reg_989;
reg   [31:0] oy_read_reg_997;
reg  signed [31:0] ox_read_reg_1004;
reg  signed [31:0] od_read_reg_1012;
reg   [31:0] b_read_reg_1020;
reg   [29:0] tmp_6_reg_1025;
reg   [29:0] tmp_4_reg_1030;
wire  signed [31:0] grp_fu_478_p2;
reg  signed [31:0] tmp1_reg_1035;
wire    ap_CS_fsm_state4;
wire  signed [31:0] grp_fu_482_p2;
reg  signed [31:0] tmp2_reg_1040;
wire   [31:0] grp_fu_486_p2;
reg   [31:0] num_weights_reg_1045;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_3_fu_505_p1;
reg   [63:0] tmp_3_reg_1050;
wire    ap_CS_fsm_state8;
wire  signed [32:0] tmp_4_cast_fu_509_p1;
reg  signed [32:0] tmp_4_cast_reg_1056;
wire   [63:0] tmp_7_fu_518_p1;
reg   [63:0] tmp_7_reg_1061;
wire  signed [31:0] grp_fu_490_p2;
reg  signed [31:0] tmp3_reg_1066;
wire  signed [31:0] grp_fu_494_p2;
reg  signed [31:0] tmp5_reg_1071;
wire  signed [31:0] grp_fu_498_p2;
reg  signed [31:0] tmp8_reg_1076;
wire   [63:0] tmp4_fu_532_p2;
reg   [63:0] tmp4_reg_1081;
wire   [31:0] next_mul1_fu_538_p2;
reg   [31:0] next_mul1_reg_1086;
wire    ap_CS_fsm_state9;
wire   [31:0] next_mul3_fu_543_p2;
reg   [31:0] next_mul3_reg_1091;
wire   [30:0] b_1_fu_557_p2;
reg   [30:0] b_1_reg_1099;
wire  signed [32:0] tmp_11_cast_fu_573_p1;
reg  signed [32:0] tmp_11_cast_reg_1104;
wire    ap_CS_fsm_state11;
wire  signed [32:0] tmp_15_cast_fu_577_p1;
reg  signed [32:0] tmp_15_cast_reg_1109;
wire   [31:0] next_mul5_fu_581_p2;
reg   [31:0] next_mul5_reg_1114;
wire    ap_CS_fsm_state12;
wire   [31:0] next_mul7_fu_586_p2;
reg   [31:0] next_mul7_reg_1119;
wire   [30:0] o_d_1_fu_600_p2;
reg   [30:0] o_d_1_reg_1127;
reg   [63:0] mem_addr_reg_1132;
wire   [0:0] tmp_2_fu_595_p2;
wire   [31:0] grp_fu_630_p2;
reg   [31:0] tmp_11_reg_1138;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_635_p2;
reg   [31:0] tmp_13_reg_1143;
wire   [63:0] tmp6_fu_646_p2;
reg   [63:0] tmp6_reg_1148;
wire    ap_CS_fsm_state15;
wire   [63:0] tmp9_fu_651_p2;
reg   [63:0] tmp9_reg_1153;
wire   [31:0] next_mul9_fu_656_p2;
reg   [31:0] next_mul9_reg_1158;
wire    ap_CS_fsm_state16;
wire   [31:0] next_mul8_fu_661_p2;
reg   [31:0] next_mul8_reg_1163;
wire   [30:0] o_y_1_fu_675_p2;
reg   [30:0] o_y_1_reg_1171;
wire   [31:0] tmp_16_fu_681_p2;
reg   [31:0] tmp_16_reg_1176;
wire   [0:0] tmp_15_fu_670_p2;
wire  signed [33:0] tmp_30_cast_fu_686_p1;
reg  signed [33:0] tmp_30_cast_reg_1181;
wire   [31:0] next_mul6_fu_690_p2;
reg   [31:0] next_mul6_reg_1186;
reg    ap_sig_ioackin_mem_ARREADY;
reg    ap_block_state17_io;
wire   [30:0] o_x_1_fu_704_p2;
reg   [30:0] o_x_1_reg_1194;
reg   [31:0] output_element_reg_1199;
wire   [31:0] tmp_18_fu_710_p2;
reg   [31:0] tmp_18_reg_1204;
wire    ap_CS_fsm_state25;
wire   [31:0] next_mul4_fu_715_p2;
reg   [31:0] next_mul4_reg_1209;
wire    ap_CS_fsm_state26;
wire   [31:0] next_mul2_fu_720_p2;
reg   [31:0] next_mul2_reg_1214;
wire   [30:0] i_d_1_fu_734_p2;
reg   [30:0] i_d_1_reg_1222;
wire   [33:0] tmp22_fu_758_p2;
reg   [33:0] tmp22_reg_1227;
wire   [0:0] tmp_20_fu_729_p2;
wire   [31:0] grp_fu_740_p2;
reg   [31:0] tmp_21_reg_1232;
wire    ap_CS_fsm_state28;
wire  signed [33:0] tmp_40_cast_fu_771_p1;
reg  signed [33:0] tmp_40_cast_reg_1237;
wire    ap_CS_fsm_state29;
wire  signed [33:0] tmp16_cast_fu_780_p1;
reg  signed [33:0] tmp16_cast_reg_1242;
wire   [31:0] next_mul_fu_784_p2;
reg   [31:0] next_mul_reg_1247;
wire    ap_CS_fsm_state30;
wire  signed [32:0] tmp_51_cast_fu_799_p1;
reg  signed [32:0] tmp_51_cast_reg_1255;
wire    ap_CS_fsm_state32;
wire  signed [32:0] tmp_53_cast_fu_803_p1;
reg  signed [32:0] tmp_53_cast_reg_1260;
wire   [31:0] iix_1_fu_812_p2;
reg   [31:0] iix_1_reg_1268;
wire    ap_CS_fsm_state33;
wire   [33:0] tmp15_fu_831_p2;
reg   [33:0] tmp15_reg_1273;
wire   [0:0] tmp_34_fu_807_p2;
wire   [33:0] tmp19_fu_849_p2;
reg   [33:0] tmp19_reg_1278;
wire   [31:0] i_x_1_fu_854_p2;
reg   [31:0] i_x_1_reg_1283;
wire   [31:0] i_y_1_fu_860_p2;
reg   [63:0] mem_addr_2_reg_1293;
wire    ap_CS_fsm_state34;
reg   [63:0] mem_addr_3_reg_1299;
reg   [31:0] mem_addr_2_read_reg_1305;
reg   [31:0] mem_addr_3_read_reg_1310;
wire   [31:0] grp_fu_448_p2;
reg   [31:0] tmp_37_reg_1315;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_443_p2;
wire    ap_CS_fsm_state56;
wire   [0:0] tmp_26_fu_452_p2;
reg   [0:0] tmp_26_reg_1325;
wire    ap_CS_fsm_state57;
reg   [63:0] mem_addr_1_reg_1330;
wire   [31:0] tmp_28_fu_949_p3;
reg   [31:0] tmp_28_reg_1336;
reg    ap_sig_ioackin_mem_AWREADY;
reg   [30:0] b_s_reg_202;
reg  signed [31:0] phi_mul2_reg_213;
reg  signed [31:0] phi_mul4_reg_225;
reg   [30:0] o_d_reg_237;
reg  signed [31:0] phi_mul6_reg_248;
reg  signed [31:0] phi_mul8_reg_260;
reg   [30:0] o_y_reg_272;
reg   [31:0] i_y_reg_283;
reg  signed [31:0] phi_mul9_reg_295;
reg   [30:0] o_x_reg_306;
reg   [31:0] i_x_reg_318;
reg   [31:0] tmp_19_reg_330;
wire   [0:0] tmp_31_fu_789_p2;
reg   [30:0] i_d_reg_340;
reg  signed [31:0] phi_mul1_reg_351;
reg  signed [31:0] phi_mul3_reg_363;
reg   [31:0] tmp_30_reg_375;
reg  signed [31:0] i_y1_reg_387;
reg  signed [31:0] phi_mul_reg_398;
reg   [31:0] tmp_33_reg_410;
reg  signed [31:0] i_x1_reg_422;
reg  signed [31:0] iix_reg_432;
wire   [63:0] tmp_10_fu_619_p2;
wire   [63:0] tmp_35_fu_869_p2;
wire   [63:0] tmp_36_fu_883_p2;
wire   [63:0] tmp_29_fu_897_p2;
reg    ap_reg_ioackin_mem_ARREADY;
reg    ap_reg_ioackin_mem_AWREADY;
reg    ap_reg_ioackin_mem_WREADY;
reg    ap_sig_ioackin_mem_WREADY;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire  signed [61:0] tmp_s_fu_502_p1;
wire  signed [61:0] tmp_5_fu_515_p1;
wire  signed [32:0] tmp_5_cast_fu_512_p1;
wire   [32:0] tmp_fu_522_p2;
wire  signed [63:0] tmp14_cast_fu_528_p1;
wire   [31:0] b_cast_fu_548_p1;
wire   [31:0] grp_fu_563_p2;
wire   [31:0] grp_fu_568_p2;
wire   [31:0] o_d_cast_fu_591_p1;
wire   [32:0] tmp_17_cast_fu_606_p1;
wire   [32:0] tmp7_fu_610_p2;
wire  signed [63:0] tmp7_cast_fu_615_p1;
wire  signed [63:0] tmp_12_fu_640_p1;
wire  signed [63:0] tmp_14_fu_643_p1;
wire   [31:0] o_y_cast_fu_666_p1;
wire   [31:0] o_x_cast_fu_695_p1;
wire   [31:0] i_d_cast_fu_725_p1;
wire   [32:0] tmp_43_cast_fu_745_p1;
wire   [32:0] tmp21_fu_749_p2;
wire  signed [33:0] tmp23_cast_fu_754_p1;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_763_p2;
wire  signed [32:0] tmp_37_cast_fu_768_p1;
wire   [32:0] tmp10_fu_775_p2;
wire   [31:0] grp_fu_794_p2;
wire  signed [32:0] tmp_56_cast_fu_818_p1;
wire   [32:0] tmp17_fu_822_p2;
wire  signed [33:0] tmp17_cast_fu_827_p1;
wire  signed [32:0] tmp_63_cast_fu_836_p1;
wire   [32:0] tmp20_fu_840_p2;
wire  signed [33:0] tmp20_cast_fu_845_p1;
wire  signed [63:0] tmp15_cast_fu_866_p1;
wire  signed [63:0] tmp19_cast_fu_880_p1;
wire  signed [63:0] tmp22_cast_fu_894_p1;
wire   [31:0] tmp_33_to_int_fu_908_p1;
wire   [7:0] tmp_23_fu_912_p4;
wire   [22:0] tmp_24_fu_922_p1;
wire   [0:0] notrhs_fu_932_p2;
wire   [0:0] notlhs_fu_926_p2;
wire   [0:0] tmp_25_fu_938_p2;
wire   [0:0] tmp_27_fu_944_p2;
wire   [0:0] tmp_8_fu_552_p2;
reg   [63:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 64'd1;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_mem_WREADY = 1'b0;
end

conv_layer_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
conv_layer_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_offset(input_offset),
    .output_offset(output_offset),
    .b(b),
    .od(od),
    .ox(ox),
    .oy(oy),
    .id(id),
    .ix(ix),
    .iy(iy),
    .s(s),
    .k(k)
);

conv_layer_mem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
conv_layer_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(mem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(mem_addr_1_reg_1330),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(tmp_28_reg_1336),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(mem_BVALID),
    .I_BREADY(mem_BREADY),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

conv_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_fadd_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_33_reg_410),
    .din1(tmp_37_reg_1315),
    .ce(1'b1),
    .dout(grp_fu_443_p2)
);

conv_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_fmul_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mem_addr_2_read_reg_1305),
    .din1(mem_addr_3_read_reg_1310),
    .ce(1'b1),
    .dout(grp_fu_448_p2)
);

conv_layer_fcmp_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_layer_fcmp_3dEe_U3(
    .din0(tmp_19_reg_330),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_26_fu_452_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(od_read_reg_1012),
    .din1(id_read_reg_989),
    .ce(1'b1),
    .dout(grp_fu_478_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(k_read_reg_957),
    .din1(k_read_reg_957),
    .ce(1'b1),
    .dout(grp_fu_482_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp2_reg_1040),
    .din1(tmp1_reg_1035),
    .ce(1'b1),
    .dout(grp_fu_486_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ix_read_reg_982),
    .din1(id_read_reg_989),
    .ce(1'b1),
    .dout(grp_fu_490_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ox_read_reg_1004),
    .din1(od_read_reg_1012),
    .ce(1'b1),
    .dout(grp_fu_494_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(id_read_reg_989),
    .din1(k_read_reg_957),
    .ce(1'b1),
    .dout(grp_fu_498_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul2_reg_213),
    .din1(tmp3_reg_1066),
    .ce(1'b1),
    .dout(grp_fu_563_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul4_reg_225),
    .din1(tmp5_reg_1071),
    .ce(1'b1),
    .dout(grp_fu_568_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul6_reg_248),
    .din1(tmp8_reg_1076),
    .ce(1'b1),
    .dout(grp_fu_630_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul8_reg_260),
    .din1(ox_read_reg_1004),
    .ce(1'b1),
    .dout(grp_fu_635_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul1_reg_351),
    .din1(iy_read_reg_976),
    .ce(1'b1),
    .dout(grp_fu_740_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(phi_mul3_reg_363),
    .din1(k_read_reg_957),
    .ce(1'b1),
    .dout(grp_fu_763_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32eOg_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_y1_reg_387),
    .din1(ix_read_reg_982),
    .ce(1'b1),
    .dout(grp_fu_794_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((ap_sig_ioackin_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17) & (tmp_17_fu_699_p2 == 1'd1)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b0;
        end else if ((((mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17) & (tmp_17_fu_699_p2 == 1'd1)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state58)) begin
            if ((ap_sig_ioackin_mem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b0;
            end else if ((mem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state59)) begin
            if ((ap_sig_ioackin_mem_WREADY == 1'b1)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b0;
            end else if ((mem_WREADY == 1'b1)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_595_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        b_s_reg_202 <= b_1_reg_1099;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        b_s_reg_202 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_31_fu_789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        i_d_reg_340 <= i_d_1_reg_1222;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i_d_reg_340 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_x1_reg_422 <= i_x_1_reg_1283;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        i_x1_reg_422 <= i_x_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_15_fu_670_p2 == 1'd1))) begin
        i_x_reg_318 <= 32'd0;
    end else if (((mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        i_x_reg_318 <= next_mul6_reg_1186;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_fu_807_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        i_y1_reg_387 <= i_y_1_fu_860_p2;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        i_y1_reg_387 <= i_y_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17) & (tmp_17_fu_699_p2 == 1'd0))) begin
        i_y_reg_283 <= next_mul8_reg_1163;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_y_reg_283 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        iix_reg_432 <= iix_1_reg_1268;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        iix_reg_432 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_fu_670_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        o_d_reg_237 <= o_d_1_reg_1127;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        o_d_reg_237 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_15_fu_670_p2 == 1'd1))) begin
        o_x_reg_306 <= 31'd0;
    end else if (((mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        o_x_reg_306 <= o_x_1_reg_1194;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17) & (tmp_17_fu_699_p2 == 1'd0))) begin
        o_y_reg_272 <= o_y_1_reg_1171;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        o_y_reg_272 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_31_fu_789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        phi_mul1_reg_351 <= next_mul2_reg_1214;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        phi_mul1_reg_351 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_595_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        phi_mul2_reg_213 <= next_mul3_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul2_reg_213 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_31_fu_789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        phi_mul3_reg_363 <= next_mul4_reg_1209;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        phi_mul3_reg_363 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_595_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        phi_mul4_reg_225 <= next_mul1_reg_1086;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul4_reg_225 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_fu_670_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        phi_mul6_reg_248 <= next_mul7_reg_1119;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_mul6_reg_248 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_fu_670_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        phi_mul8_reg_260 <= next_mul5_reg_1114;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_mul8_reg_260 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17) & (tmp_17_fu_699_p2 == 1'd0))) begin
        phi_mul9_reg_295 <= next_mul9_reg_1158;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        phi_mul9_reg_295 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_fu_807_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        phi_mul_reg_398 <= next_mul_reg_1247;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        phi_mul_reg_398 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_31_fu_789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        tmp_19_reg_330 <= tmp_30_reg_375;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_19_reg_330 <= output_element_reg_1199;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_fu_807_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        tmp_30_reg_375 <= tmp_33_reg_410;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_30_reg_375 <= tmp_19_reg_330;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        tmp_33_reg_410 <= grp_fu_443_p2;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_33_reg_410 <= tmp_30_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        b_1_reg_1099 <= b_1_fu_557_p2;
        next_mul1_reg_1086 <= next_mul1_fu_538_p2;
        next_mul3_reg_1091 <= next_mul3_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_read_reg_1020 <= b;
        id_read_reg_989 <= id;
        ix_read_reg_982 <= ix;
        iy_read_reg_976 <= iy;
        k_read_reg_957 <= k;
        od_read_reg_1012 <= od;
        ox_read_reg_1004 <= ox;
        oy_read_reg_997 <= oy;
        s_read_reg_970 <= s;
        tmp_4_reg_1030 <= {{output_offset[31:2]}};
        tmp_6_reg_1025 <= {{input_offset[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_d_1_reg_1222 <= i_d_1_fu_734_p2;
        next_mul2_reg_1214 <= next_mul2_fu_720_p2;
        next_mul4_reg_1209 <= next_mul4_fu_715_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (tmp_34_fu_807_p2 == 1'd1))) begin
        i_x_1_reg_1283 <= i_x_1_fu_854_p2;
        tmp15_reg_1273 <= tmp15_fu_831_p2;
        tmp19_reg_1278 <= tmp19_fu_849_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        iix_1_reg_1268 <= iix_1_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        mem_addr_1_reg_1330 <= tmp_29_fu_897_p2;
        tmp_26_reg_1325 <= tmp_26_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        mem_addr_2_read_reg_1305 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        mem_addr_2_reg_1293 <= tmp_35_fu_869_p2;
        mem_addr_3_reg_1299 <= tmp_36_fu_883_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        mem_addr_3_read_reg_1310 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (tmp_2_fu_595_p2 == 1'd1))) begin
        mem_addr_reg_1132 <= tmp_10_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        next_mul5_reg_1114 <= next_mul5_fu_581_p2;
        next_mul7_reg_1119 <= next_mul7_fu_586_p2;
        o_d_1_reg_1127 <= o_d_1_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17))) begin
        next_mul6_reg_1186 <= next_mul6_fu_690_p2;
        o_x_1_reg_1194 <= o_x_1_fu_704_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        next_mul8_reg_1163 <= next_mul8_fu_661_p2;
        next_mul9_reg_1158 <= next_mul9_fu_656_p2;
        o_y_1_reg_1171 <= o_y_1_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        next_mul_reg_1247 <= next_mul_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        num_weights_reg_1045 <= grp_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        output_element_reg_1199 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp16_cast_reg_1242 <= tmp16_cast_fu_780_p1;
        tmp_40_cast_reg_1237 <= tmp_40_cast_fu_771_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp1_reg_1035 <= grp_fu_478_p2;
        tmp2_reg_1040 <= grp_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_fu_729_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        tmp22_reg_1227 <= tmp22_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp3_reg_1066 <= grp_fu_490_p2;
        tmp4_reg_1081 <= tmp4_fu_532_p2;
        tmp5_reg_1071 <= grp_fu_494_p2;
        tmp8_reg_1076 <= grp_fu_498_p2;
        tmp_3_reg_1050[61 : 0] <= tmp_3_fu_505_p1[61 : 0];
        tmp_4_cast_reg_1056 <= tmp_4_cast_fu_509_p1;
        tmp_7_reg_1061[61 : 0] <= tmp_7_fu_518_p1[61 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp6_reg_1148 <= tmp6_fu_646_p2;
        tmp9_reg_1153 <= tmp9_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_11_cast_reg_1104 <= tmp_11_cast_fu_573_p1;
        tmp_15_cast_reg_1109 <= tmp_15_cast_fu_577_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_11_reg_1138 <= grp_fu_630_p2;
        tmp_13_reg_1143 <= grp_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_15_fu_670_p2 == 1'd1))) begin
        tmp_16_reg_1176 <= tmp_16_fu_681_p2;
        tmp_30_cast_reg_1181 <= tmp_30_cast_fu_686_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_18_reg_1204 <= tmp_18_fu_710_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_21_reg_1232 <= grp_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        tmp_28_reg_1336 <= tmp_28_fu_949_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_37_reg_1315 <= grp_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        tmp_51_cast_reg_1255 <= tmp_51_cast_fu_799_p1;
        tmp_53_cast_reg_1260 <= tmp_53_cast_fu_803_p1;
    end
end

always @ (*) begin
    if (((tmp_8_fu_552_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_8_fu_552_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY;
    end else begin
        ap_sig_ioackin_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mem_WREADY == 1'b0)) begin
        ap_sig_ioackin_mem_WREADY = mem_WREADY;
    end else begin
        ap_sig_ioackin_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_mem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state36)) begin
            mem_ARADDR = mem_addr_3_reg_1299;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            mem_ARADDR = mem_addr_2_reg_1293;
        end else if (((1'b1 == ap_CS_fsm_state17) & (tmp_17_fu_699_p2 == 1'd1))) begin
            mem_ARADDR = mem_addr_reg_1132;
        end else begin
            mem_ARADDR = 'bx;
        end
    end else begin
        mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_mem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state36)) | ((ap_reg_ioackin_mem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state35)) | ((ap_reg_ioackin_mem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17) & (tmp_17_fu_699_p2 == 1'd1)))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_mem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state58))) begin
        mem_AWVALID = 1'b1;
    end else begin
        mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        mem_BREADY = 1'b1;
    end else begin
        mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24)))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_mem_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state59))) begin
        mem_WVALID = 1'b1;
    end else begin
        mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | ((1'b1 == ap_CS_fsm_state17) & (tmp_17_fu_699_p2 == 1'd1)))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state24))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_8_fu_552_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((tmp_2_fu_595_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((tmp_15_fu_670_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17) & (tmp_17_fu_699_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b0 == ap_block_state17_io) & (1'b1 == ap_CS_fsm_state17) & (tmp_17_fu_699_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((tmp_20_fu_729_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((tmp_31_fu_789_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((tmp_34_fu_807_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((ap_sig_ioackin_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((ap_sig_ioackin_mem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((mem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((ap_sig_ioackin_mem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((ap_sig_ioackin_mem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((mem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state17_io = ((ap_sig_ioackin_mem_ARREADY == 1'b0) & (tmp_17_fu_699_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_1_fu_557_p2 = (b_s_reg_202 + 31'd1);

assign b_cast_fu_548_p1 = b_s_reg_202;

assign i_d_1_fu_734_p2 = (i_d_reg_340 + 31'd1);

assign i_d_cast_fu_725_p1 = i_d_reg_340;

assign i_x_1_fu_854_p2 = ($signed(i_x1_reg_422) + $signed(32'd1));

assign i_y_1_fu_860_p2 = ($signed(i_y1_reg_387) + $signed(32'd1));

assign iix_1_fu_812_p2 = ($signed(iix_reg_432) + $signed(32'd1));

assign next_mul1_fu_538_p2 = ($signed(phi_mul4_reg_225) + $signed(oy_read_reg_997));

assign next_mul2_fu_720_p2 = ($signed(phi_mul1_reg_351) + $signed(ix_read_reg_982));

assign next_mul3_fu_543_p2 = ($signed(phi_mul2_reg_213) + $signed(iy_read_reg_976));

assign next_mul4_fu_715_p2 = ($signed(phi_mul3_reg_363) + $signed(k_read_reg_957));

assign next_mul5_fu_581_p2 = ($signed(phi_mul8_reg_260) + $signed(oy_read_reg_997));

assign next_mul6_fu_690_p2 = (i_x_reg_318 + s_read_reg_970);

assign next_mul7_fu_586_p2 = ($signed(phi_mul6_reg_248) + $signed(k_read_reg_957));

assign next_mul8_fu_661_p2 = (i_y_reg_283 + s_read_reg_970);

assign next_mul9_fu_656_p2 = ($signed(phi_mul9_reg_295) + $signed(ox_read_reg_1004));

assign next_mul_fu_784_p2 = ($signed(phi_mul_reg_398) + $signed(k_read_reg_957));

assign notlhs_fu_926_p2 = ((tmp_23_fu_912_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_932_p2 = ((tmp_24_fu_922_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_d_1_fu_600_p2 = (o_d_reg_237 + 31'd1);

assign o_d_cast_fu_591_p1 = o_d_reg_237;

assign o_x_1_fu_704_p2 = (o_x_reg_306 + 31'd1);

assign o_x_cast_fu_695_p1 = o_x_reg_306;

assign o_y_1_fu_675_p2 = (o_y_reg_272 + 31'd1);

assign o_y_cast_fu_666_p1 = o_y_reg_272;

assign tmp10_fu_775_p2 = ($signed(tmp_11_cast_reg_1104) + $signed(tmp_37_cast_fu_768_p1));

assign tmp14_cast_fu_528_p1 = $signed(tmp_fu_522_p2);

assign tmp15_cast_fu_866_p1 = $signed(tmp15_reg_1273);

assign tmp15_fu_831_p2 = ($signed(tmp17_cast_fu_827_p1) + $signed(tmp16_cast_reg_1242));

assign tmp16_cast_fu_780_p1 = $signed(tmp10_fu_775_p2);

assign tmp17_cast_fu_827_p1 = $signed(tmp17_fu_822_p2);

assign tmp17_fu_822_p2 = ($signed(tmp_51_cast_reg_1255) + $signed(tmp_56_cast_fu_818_p1));

assign tmp19_cast_fu_880_p1 = $signed(tmp19_reg_1278);

assign tmp19_fu_849_p2 = ($signed(tmp20_cast_fu_845_p1) + $signed(tmp_40_cast_reg_1237));

assign tmp20_cast_fu_845_p1 = $signed(tmp20_fu_840_p2);

assign tmp20_fu_840_p2 = ($signed(tmp_53_cast_reg_1260) + $signed(tmp_63_cast_fu_836_p1));

assign tmp21_fu_749_p2 = ($signed(tmp_15_cast_reg_1109) + $signed(tmp_43_cast_fu_745_p1));

assign tmp22_cast_fu_894_p1 = $signed(tmp22_reg_1227);

assign tmp22_fu_758_p2 = ($signed(tmp23_cast_fu_754_p1) + $signed(tmp_30_cast_reg_1181));

assign tmp23_cast_fu_754_p1 = $signed(tmp21_fu_749_p2);

assign tmp4_fu_532_p2 = ($signed(tmp14_cast_fu_528_p1) + $signed(tmp_3_fu_505_p1));

assign tmp6_fu_646_p2 = ($signed(tmp_3_reg_1050) + $signed(tmp_12_fu_640_p1));

assign tmp7_cast_fu_615_p1 = $signed(tmp7_fu_610_p2);

assign tmp7_fu_610_p2 = ($signed(tmp_4_cast_reg_1056) + $signed(tmp_17_cast_fu_606_p1));

assign tmp9_fu_651_p2 = ($signed(tmp_7_reg_1061) + $signed(tmp_14_fu_643_p1));

assign tmp_10_fu_619_p2 = ($signed(tmp7_cast_fu_615_p1) + $signed(tmp_3_reg_1050));

assign tmp_11_cast_fu_573_p1 = $signed(grp_fu_563_p2);

assign tmp_12_fu_640_p1 = $signed(tmp_11_reg_1138);

assign tmp_14_fu_643_p1 = $signed(tmp_13_reg_1143);

assign tmp_15_cast_fu_577_p1 = $signed(grp_fu_568_p2);

assign tmp_15_fu_670_p2 = (($signed(o_y_cast_fu_666_p1) < $signed(oy_read_reg_997)) ? 1'b1 : 1'b0);

assign tmp_16_fu_681_p2 = ($signed(i_y_reg_283) + $signed(k_read_reg_957));

assign tmp_17_cast_fu_606_p1 = o_d_reg_237;

assign tmp_17_fu_699_p2 = (($signed(o_x_cast_fu_695_p1) < $signed(ox_read_reg_1004)) ? 1'b1 : 1'b0);

assign tmp_18_fu_710_p2 = ($signed(i_x_reg_318) + $signed(k_read_reg_957));

assign tmp_20_fu_729_p2 = (($signed(i_d_cast_fu_725_p1) < $signed(id_read_reg_989)) ? 1'b1 : 1'b0);

assign tmp_23_fu_912_p4 = {{tmp_33_to_int_fu_908_p1[30:23]}};

assign tmp_24_fu_922_p1 = tmp_33_to_int_fu_908_p1[22:0];

assign tmp_25_fu_938_p2 = (notrhs_fu_932_p2 | notlhs_fu_926_p2);

assign tmp_27_fu_944_p2 = (tmp_26_reg_1325 & tmp_25_fu_938_p2);

assign tmp_28_fu_949_p3 = ((tmp_27_fu_944_p2[0:0] === 1'b1) ? tmp_19_reg_330 : 32'd0);

assign tmp_29_fu_897_p2 = ($signed(tmp22_cast_fu_894_p1) + $signed(tmp9_reg_1153));

assign tmp_2_fu_595_p2 = (($signed(o_d_cast_fu_591_p1) < $signed(od_read_reg_1012)) ? 1'b1 : 1'b0);

assign tmp_30_cast_fu_686_p1 = phi_mul9_reg_295;

assign tmp_31_fu_789_p2 = (($signed(i_y1_reg_387) < $signed(tmp_16_reg_1176)) ? 1'b1 : 1'b0);

assign tmp_33_to_int_fu_908_p1 = tmp_19_reg_330;

assign tmp_34_fu_807_p2 = (($signed(i_x1_reg_422) < $signed(tmp_18_reg_1204)) ? 1'b1 : 1'b0);

assign tmp_35_fu_869_p2 = ($signed(tmp15_cast_fu_866_p1) + $signed(tmp4_reg_1081));

assign tmp_36_fu_883_p2 = ($signed(tmp19_cast_fu_880_p1) + $signed(tmp6_reg_1148));

assign tmp_37_cast_fu_768_p1 = $signed(tmp_21_reg_1232);

assign tmp_3_fu_505_p1 = $unsigned(tmp_s_fu_502_p1);

assign tmp_40_cast_fu_771_p1 = $signed(grp_fu_763_p2);

assign tmp_43_cast_fu_745_p1 = o_x_reg_306;

assign tmp_4_cast_fu_509_p1 = $signed(num_weights_reg_1045);

assign tmp_51_cast_fu_799_p1 = $signed(grp_fu_794_p2);

assign tmp_53_cast_fu_803_p1 = phi_mul_reg_398;

assign tmp_56_cast_fu_818_p1 = i_x1_reg_422;

assign tmp_5_cast_fu_512_p1 = od_read_reg_1012;

assign tmp_5_fu_515_p1 = $signed(tmp_4_reg_1030);

assign tmp_63_cast_fu_836_p1 = iix_reg_432;

assign tmp_7_fu_518_p1 = $unsigned(tmp_5_fu_515_p1);

assign tmp_8_fu_552_p2 = (($signed(b_cast_fu_548_p1) < $signed(b_read_reg_1020)) ? 1'b1 : 1'b0);

assign tmp_fu_522_p2 = ($signed(tmp_5_cast_fu_512_p1) + $signed(tmp_4_cast_fu_509_p1));

assign tmp_s_fu_502_p1 = $signed(tmp_6_reg_1025);

always @ (posedge ap_clk) begin
    tmp_3_reg_1050[63:62] <= 2'b00;
    tmp_7_reg_1061[63:62] <= 2'b00;
end

endmodule //conv_layer
