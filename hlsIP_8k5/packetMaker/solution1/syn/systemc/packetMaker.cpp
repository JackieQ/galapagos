// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "packetMaker.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic packetMaker::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic packetMaker::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> packetMaker::ap_ST_fsm_state1 = "1";
const sc_lv<4> packetMaker::ap_ST_fsm_state2 = "10";
const sc_lv<4> packetMaker::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> packetMaker::ap_ST_fsm_state6 = "1000";
const sc_lv<32> packetMaker::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> packetMaker::ap_const_lv1_1 = "1";
const sc_lv<1> packetMaker::ap_const_lv1_0 = "0";
const sc_lv<2> packetMaker::ap_const_lv2_0 = "00";
const sc_lv<2> packetMaker::ap_const_lv2_2 = "10";
const sc_lv<2> packetMaker::ap_const_lv2_3 = "11";
const sc_lv<2> packetMaker::ap_const_lv2_1 = "1";
const sc_lv<32> packetMaker::ap_const_lv32_2 = "10";
const sc_lv<32> packetMaker::ap_const_lv32_1 = "1";
const sc_lv<5> packetMaker::ap_const_lv5_0 = "00000";
const sc_lv<8> packetMaker::ap_const_lv8_0 = "00000000";
const sc_lv<5> packetMaker::ap_const_lv5_19 = "11001";
const sc_lv<5> packetMaker::ap_const_lv5_1 = "1";
const sc_lv<5> packetMaker::ap_const_lv5_18 = "11000";

packetMaker::packetMaker(sc_module_name name) : sc_module(name), mVcdFile(0) {
    packet1_U = new packetMaker_packet1("packet1_U");
    packet1_U->clk(ap_clk);
    packet1_U->reset(ap_rst_n_inv);
    packet1_U->address0(packet1_address0);
    packet1_U->ce0(packet1_ce0);
    packet1_U->q0(packet1_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond_fu_101_p2);
    sensitive << ( packetOut_V_packet_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_129 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_reg_129 );
    sensitive << ( i_reg_90 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_1_fu_107_p2);
    sensitive << ( i_reg_90 );

    SC_METHOD(thread_packet1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_fu_113_p1 );

    SC_METHOD(thread_packet1_ce0);
    sensitive << ( packetOut_V_packet_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_129 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_reg_129 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_packetOut_TDATA);
    sensitive << ( packetOut_V_packet_V_1_data_out );

    SC_METHOD(thread_packetOut_TDATA_blk_n);
    sensitive << ( packetOut_V_packet_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_129 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_reg_129 );

    SC_METHOD(thread_packetOut_TDEST);
    sensitive << ( packetOut_V_dest_V_1_data_out );

    SC_METHOD(thread_packetOut_TLAST);
    sensitive << ( packetOut_V_last_V_1_data_out );

    SC_METHOD(thread_packetOut_TVALID);
    sensitive << ( packetOut_V_dest_V_1_state );

    SC_METHOD(thread_packetOut_V_dest_V_1_ack_out);
    sensitive << ( packetOut_TREADY );

    SC_METHOD(thread_packetOut_V_dest_V_1_data_out);
    sensitive << ( packetOut_V_dest_V_1_sel );

    SC_METHOD(thread_packetOut_V_dest_V_1_sel);
    sensitive << ( packetOut_V_dest_V_1_sel_rd );

    SC_METHOD(thread_packetOut_V_dest_V_1_vld_in);
    sensitive << ( packetOut_V_packet_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_129 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_reg_129 );

    SC_METHOD(thread_packetOut_V_dest_V_1_vld_out);
    sensitive << ( packetOut_V_dest_V_1_state );

    SC_METHOD(thread_packetOut_V_last_V_1_ack_in);
    sensitive << ( packetOut_V_last_V_1_state );

    SC_METHOD(thread_packetOut_V_last_V_1_ack_out);
    sensitive << ( packetOut_TREADY );

    SC_METHOD(thread_packetOut_V_last_V_1_data_out);
    sensitive << ( packetOut_V_last_V_1_payload_A );
    sensitive << ( packetOut_V_last_V_1_payload_B );
    sensitive << ( packetOut_V_last_V_1_sel );

    SC_METHOD(thread_packetOut_V_last_V_1_load_A);
    sensitive << ( packetOut_V_last_V_1_sel_wr );
    sensitive << ( packetOut_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_last_V_1_load_B);
    sensitive << ( packetOut_V_last_V_1_sel_wr );
    sensitive << ( packetOut_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_last_V_1_sel);
    sensitive << ( packetOut_V_last_V_1_sel_rd );

    SC_METHOD(thread_packetOut_V_last_V_1_state_cmp_full);
    sensitive << ( packetOut_V_last_V_1_state );

    SC_METHOD(thread_packetOut_V_last_V_1_vld_in);
    sensitive << ( packetOut_V_packet_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_129 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_reg_129 );

    SC_METHOD(thread_packetOut_V_last_V_1_vld_out);
    sensitive << ( packetOut_V_last_V_1_state );

    SC_METHOD(thread_packetOut_V_packet_V_1_ack_in);
    sensitive << ( packetOut_V_packet_V_1_state );

    SC_METHOD(thread_packetOut_V_packet_V_1_ack_out);
    sensitive << ( packetOut_TREADY );

    SC_METHOD(thread_packetOut_V_packet_V_1_data_out);
    sensitive << ( packetOut_V_packet_V_1_payload_A );
    sensitive << ( packetOut_V_packet_V_1_payload_B );
    sensitive << ( packetOut_V_packet_V_1_sel );

    SC_METHOD(thread_packetOut_V_packet_V_1_load_A);
    sensitive << ( packetOut_V_packet_V_1_sel_wr );
    sensitive << ( packetOut_V_packet_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_packet_V_1_load_B);
    sensitive << ( packetOut_V_packet_V_1_sel_wr );
    sensitive << ( packetOut_V_packet_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_packet_V_1_sel);
    sensitive << ( packetOut_V_packet_V_1_sel_rd );

    SC_METHOD(thread_packetOut_V_packet_V_1_state_cmp_full);
    sensitive << ( packetOut_V_packet_V_1_state );

    SC_METHOD(thread_packetOut_V_packet_V_1_vld_in);
    sensitive << ( packetOut_V_packet_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_129 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_reg_129 );

    SC_METHOD(thread_packetOut_V_packet_V_1_vld_out);
    sensitive << ( packetOut_V_packet_V_1_state );

    SC_METHOD(thread_tmp_fu_113_p1);
    sensitive << ( i_reg_90 );

    SC_METHOD(thread_tmp_last_V_fu_118_p2);
    sensitive << ( packetOut_V_packet_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_129 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_reg_129 );
    sensitive << ( i_reg_90 );
    sensitive << ( exitcond_fu_101_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_tmp_packet_V_fu_124_p1);
    sensitive << ( packet1_q0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( packetOut_V_packet_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_129 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_reg_129 );
    sensitive << ( exitcond_fu_101_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    packetOut_V_packet_V_1_sel_rd = SC_LOGIC_0;
    packetOut_V_packet_V_1_sel_wr = SC_LOGIC_0;
    packetOut_V_packet_V_1_state = "00";
    packetOut_V_last_V_1_sel_rd = SC_LOGIC_0;
    packetOut_V_last_V_1_sel_wr = SC_LOGIC_0;
    packetOut_V_last_V_1_state = "00";
    packetOut_V_dest_V_1_sel_rd = SC_LOGIC_0;
    packetOut_V_dest_V_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "packetMaker_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, packetOut_TDATA, "(port)packetOut_TDATA");
    sc_trace(mVcdFile, packetOut_TVALID, "(port)packetOut_TVALID");
    sc_trace(mVcdFile, packetOut_TREADY, "(port)packetOut_TREADY");
    sc_trace(mVcdFile, packetOut_TLAST, "(port)packetOut_TLAST");
    sc_trace(mVcdFile, packetOut_TDEST, "(port)packetOut_TDEST");
    sc_trace(mVcdFile, id_V, "(port)id_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_data_out, "packetOut_V_packet_V_1_data_out");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_vld_in, "packetOut_V_packet_V_1_vld_in");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_vld_out, "packetOut_V_packet_V_1_vld_out");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_ack_in, "packetOut_V_packet_V_1_ack_in");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_ack_out, "packetOut_V_packet_V_1_ack_out");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_payload_A, "packetOut_V_packet_V_1_payload_A");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_payload_B, "packetOut_V_packet_V_1_payload_B");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_sel_rd, "packetOut_V_packet_V_1_sel_rd");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_sel_wr, "packetOut_V_packet_V_1_sel_wr");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_sel, "packetOut_V_packet_V_1_sel");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_load_A, "packetOut_V_packet_V_1_load_A");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_load_B, "packetOut_V_packet_V_1_load_B");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_state, "packetOut_V_packet_V_1_state");
    sc_trace(mVcdFile, packetOut_V_packet_V_1_state_cmp_full, "packetOut_V_packet_V_1_state_cmp_full");
    sc_trace(mVcdFile, packetOut_V_last_V_1_data_out, "packetOut_V_last_V_1_data_out");
    sc_trace(mVcdFile, packetOut_V_last_V_1_vld_in, "packetOut_V_last_V_1_vld_in");
    sc_trace(mVcdFile, packetOut_V_last_V_1_vld_out, "packetOut_V_last_V_1_vld_out");
    sc_trace(mVcdFile, packetOut_V_last_V_1_ack_in, "packetOut_V_last_V_1_ack_in");
    sc_trace(mVcdFile, packetOut_V_last_V_1_ack_out, "packetOut_V_last_V_1_ack_out");
    sc_trace(mVcdFile, packetOut_V_last_V_1_payload_A, "packetOut_V_last_V_1_payload_A");
    sc_trace(mVcdFile, packetOut_V_last_V_1_payload_B, "packetOut_V_last_V_1_payload_B");
    sc_trace(mVcdFile, packetOut_V_last_V_1_sel_rd, "packetOut_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, packetOut_V_last_V_1_sel_wr, "packetOut_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, packetOut_V_last_V_1_sel, "packetOut_V_last_V_1_sel");
    sc_trace(mVcdFile, packetOut_V_last_V_1_load_A, "packetOut_V_last_V_1_load_A");
    sc_trace(mVcdFile, packetOut_V_last_V_1_load_B, "packetOut_V_last_V_1_load_B");
    sc_trace(mVcdFile, packetOut_V_last_V_1_state, "packetOut_V_last_V_1_state");
    sc_trace(mVcdFile, packetOut_V_last_V_1_state_cmp_full, "packetOut_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, packetOut_V_dest_V_1_data_out, "packetOut_V_dest_V_1_data_out");
    sc_trace(mVcdFile, packetOut_V_dest_V_1_vld_in, "packetOut_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, packetOut_V_dest_V_1_vld_out, "packetOut_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, packetOut_V_dest_V_1_ack_out, "packetOut_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, packetOut_V_dest_V_1_sel_rd, "packetOut_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, packetOut_V_dest_V_1_sel, "packetOut_V_dest_V_1_sel");
    sc_trace(mVcdFile, packetOut_V_dest_V_1_state, "packetOut_V_dest_V_1_state");
    sc_trace(mVcdFile, packet1_address0, "packet1_address0");
    sc_trace(mVcdFile, packet1_ce0, "packet1_ce0");
    sc_trace(mVcdFile, packet1_q0, "packet1_q0");
    sc_trace(mVcdFile, packetOut_TDATA_blk_n, "packetOut_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_reg_129, "exitcond_reg_129");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_exitcond_reg_129, "ap_pipeline_reg_pp0_iter1_exitcond_reg_129");
    sc_trace(mVcdFile, i_reg_90, "i_reg_90");
    sc_trace(mVcdFile, exitcond_fu_101_p2, "exitcond_fu_101_p2");
    sc_trace(mVcdFile, i_1_fu_107_p2, "i_1_fu_107_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_last_V_fu_118_p2, "tmp_last_V_fu_118_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_143, "tmp_last_V_reg_143");
    sc_trace(mVcdFile, tmp_packet_V_fu_124_p1, "tmp_packet_V_fu_124_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_113_p1, "tmp_fu_113_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("packetMaker.hdltvin.dat");
    mHdltvoutHandle.open("packetMaker.hdltvout.dat");
}

packetMaker::~packetMaker() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete packet1_U;
}

void packetMaker::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_101_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_101_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                     !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_101_p2.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_101_p2.read()))) {
        i_reg_90 = i_1_fu_107_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        i_reg_90 = ap_const_lv5_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_dest_V_1_vld_out.read()))) {
            packetOut_V_dest_V_1_sel_rd =  (sc_logic) (~packetOut_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_dest_V_1_state.read())))) {
            packetOut_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_dest_V_1_state.read())))) {
            packetOut_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_dest_V_1_ack_out.read()))))) {
            packetOut_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            packetOut_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_out.read()))) {
            packetOut_V_last_V_1_sel_rd =  (sc_logic) (~packetOut_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_in.read()))) {
            packetOut_V_last_V_1_sel_wr =  (sc_logic) (~packetOut_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_last_V_1_state.read())))) {
            packetOut_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_last_V_1_state.read())))) {
            packetOut_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()))))) {
            packetOut_V_last_V_1_state = ap_const_lv2_3;
        } else {
            packetOut_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_packet_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_vld_out.read()))) {
            packetOut_V_packet_V_1_sel_rd =  (sc_logic) (~packetOut_V_packet_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_packet_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_ack_in.read()))) {
            packetOut_V_packet_V_1_sel_wr =  (sc_logic) (~packetOut_V_packet_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_packet_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(packetOut_V_packet_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(packetOut_V_packet_V_1_state.read(), ap_const_lv2_2)))) {
            packetOut_V_packet_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(packetOut_V_packet_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(packetOut_V_packet_V_1_state.read(), ap_const_lv2_1)))) {
            packetOut_V_packet_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(packetOut_V_packet_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(packetOut_V_packet_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(packetOut_V_packet_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_ack_out.read()))))) {
            packetOut_V_packet_V_1_state = ap_const_lv2_3;
        } else {
            packetOut_V_packet_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))))) {
        ap_pipeline_reg_pp0_iter1_exitcond_reg_129 = exitcond_reg_129.read();
        exitcond_reg_129 = exitcond_fu_101_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_load_A.read())) {
        packetOut_V_last_V_1_payload_A = tmp_last_V_reg_143.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_load_B.read())) {
        packetOut_V_last_V_1_payload_B = tmp_last_V_reg_143.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_load_A.read())) {
        packetOut_V_packet_V_1_payload_A = tmp_packet_V_fu_124_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_load_B.read())) {
        packetOut_V_packet_V_1_payload_B = tmp_packet_V_fu_124_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_101_p2.read()))) {
        tmp_last_V_reg_143 = tmp_last_V_fu_118_p2.read();
    }
}

void packetMaker::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(2, 2);
}

void packetMaker::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void packetMaker::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void packetMaker::thread_ap_done() {
    ap_done = ap_const_logic_0;
}

void packetMaker::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void packetMaker::thread_ap_ready() {
    ap_ready = ap_const_logic_0;
}

void packetMaker::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void packetMaker::thread_exitcond_fu_101_p2() {
    exitcond_fu_101_p2 = (!i_reg_90.read().is_01() || !ap_const_lv5_19.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_90.read() == ap_const_lv5_19);
}

void packetMaker::thread_i_1_fu_107_p2() {
    i_1_fu_107_p2 = (!i_reg_90.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_90.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void packetMaker::thread_packet1_address0() {
    packet1_address0 =  (sc_lv<5>) (tmp_fu_113_p1.read());
}

void packetMaker::thread_packet1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        packet1_ce0 = ap_const_logic_1;
    } else {
        packet1_ce0 = ap_const_logic_0;
    }
}

void packetMaker::thread_packetOut_TDATA() {
    packetOut_TDATA = packetOut_V_packet_V_1_data_out.read();
}

void packetMaker::thread_packetOut_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read())))) {
        packetOut_TDATA_blk_n =  (sc_logic) (packetOut_V_packet_V_1_state.read()[1]);
    } else {
        packetOut_TDATA_blk_n = ap_const_logic_1;
    }
}

void packetMaker::thread_packetOut_TDEST() {
    packetOut_TDEST = packetOut_V_dest_V_1_data_out.read();
}

void packetMaker::thread_packetOut_TLAST() {
    packetOut_TLAST = packetOut_V_last_V_1_data_out.read();
}

void packetMaker::thread_packetOut_TVALID() {
    packetOut_TVALID =  (sc_logic) (packetOut_V_dest_V_1_state.read()[0]);
}

void packetMaker::thread_packetOut_V_dest_V_1_ack_out() {
    packetOut_V_dest_V_1_ack_out = packetOut_TREADY.read();
}

void packetMaker::thread_packetOut_V_dest_V_1_data_out() {
    packetOut_V_dest_V_1_data_out = ap_const_lv8_0;
}

void packetMaker::thread_packetOut_V_dest_V_1_sel() {
    packetOut_V_dest_V_1_sel = packetOut_V_dest_V_1_sel_rd.read();
}

void packetMaker::thread_packetOut_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))))) {
        packetOut_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        packetOut_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void packetMaker::thread_packetOut_V_dest_V_1_vld_out() {
    packetOut_V_dest_V_1_vld_out =  (sc_logic) (packetOut_V_dest_V_1_state.read()[0]);
}

void packetMaker::thread_packetOut_V_last_V_1_ack_in() {
    packetOut_V_last_V_1_ack_in =  (sc_logic) (packetOut_V_last_V_1_state.read()[1]);
}

void packetMaker::thread_packetOut_V_last_V_1_ack_out() {
    packetOut_V_last_V_1_ack_out = packetOut_TREADY.read();
}

void packetMaker::thread_packetOut_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_sel.read())) {
        packetOut_V_last_V_1_data_out = packetOut_V_last_V_1_payload_B.read();
    } else {
        packetOut_V_last_V_1_data_out = packetOut_V_last_V_1_payload_A.read();
    }
}

void packetMaker::thread_packetOut_V_last_V_1_load_A() {
    packetOut_V_last_V_1_load_A = (packetOut_V_last_V_1_state_cmp_full.read() & ~packetOut_V_last_V_1_sel_wr.read());
}

void packetMaker::thread_packetOut_V_last_V_1_load_B() {
    packetOut_V_last_V_1_load_B = (packetOut_V_last_V_1_sel_wr.read() & packetOut_V_last_V_1_state_cmp_full.read());
}

void packetMaker::thread_packetOut_V_last_V_1_sel() {
    packetOut_V_last_V_1_sel = packetOut_V_last_V_1_sel_rd.read();
}

void packetMaker::thread_packetOut_V_last_V_1_state_cmp_full() {
    packetOut_V_last_V_1_state_cmp_full =  (sc_logic) ((!packetOut_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetOut_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void packetMaker::thread_packetOut_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))))) {
        packetOut_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        packetOut_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void packetMaker::thread_packetOut_V_last_V_1_vld_out() {
    packetOut_V_last_V_1_vld_out =  (sc_logic) (packetOut_V_last_V_1_state.read()[0]);
}

void packetMaker::thread_packetOut_V_packet_V_1_ack_in() {
    packetOut_V_packet_V_1_ack_in =  (sc_logic) (packetOut_V_packet_V_1_state.read()[1]);
}

void packetMaker::thread_packetOut_V_packet_V_1_ack_out() {
    packetOut_V_packet_V_1_ack_out = packetOut_TREADY.read();
}

void packetMaker::thread_packetOut_V_packet_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_packet_V_1_sel.read())) {
        packetOut_V_packet_V_1_data_out = packetOut_V_packet_V_1_payload_B.read();
    } else {
        packetOut_V_packet_V_1_data_out = packetOut_V_packet_V_1_payload_A.read();
    }
}

void packetMaker::thread_packetOut_V_packet_V_1_load_A() {
    packetOut_V_packet_V_1_load_A = (packetOut_V_packet_V_1_state_cmp_full.read() & ~packetOut_V_packet_V_1_sel_wr.read());
}

void packetMaker::thread_packetOut_V_packet_V_1_load_B() {
    packetOut_V_packet_V_1_load_B = (packetOut_V_packet_V_1_sel_wr.read() & packetOut_V_packet_V_1_state_cmp_full.read());
}

void packetMaker::thread_packetOut_V_packet_V_1_sel() {
    packetOut_V_packet_V_1_sel = packetOut_V_packet_V_1_sel_rd.read();
}

void packetMaker::thread_packetOut_V_packet_V_1_state_cmp_full() {
    packetOut_V_packet_V_1_state_cmp_full =  (sc_logic) ((!packetOut_V_packet_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetOut_V_packet_V_1_state.read() != ap_const_lv2_1))[0];
}

void packetMaker::thread_packetOut_V_packet_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))))) {
        packetOut_V_packet_V_1_vld_in = ap_const_logic_1;
    } else {
        packetOut_V_packet_V_1_vld_in = ap_const_logic_0;
    }
}

void packetMaker::thread_packetOut_V_packet_V_1_vld_out() {
    packetOut_V_packet_V_1_vld_out =  (sc_logic) (packetOut_V_packet_V_1_state.read()[0]);
}

void packetMaker::thread_tmp_fu_113_p1() {
    tmp_fu_113_p1 = esl_zext<64,5>(i_reg_90.read());
}

void packetMaker::thread_tmp_last_V_fu_118_p2() {
    tmp_last_V_fu_118_p2 = (!i_reg_90.read().is_01() || !ap_const_lv5_18.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_90.read() == ap_const_lv5_18);
}

void packetMaker::thread_tmp_packet_V_fu_124_p1() {
    tmp_packet_V_fu_124_p1 = esl_sext<64,32>(packet1_q0.read());
}

void packetMaker::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) && !(!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_101_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_reg_129.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_packet_V_1_ack_in.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_101_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void packetMaker::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TDATA\" :  \"" << packetOut_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TVALID\" :  \"" << packetOut_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetOut_TREADY\" :  \"" << packetOut_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TLAST\" :  \"" << packetOut_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TDEST\" :  \"" << packetOut_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"id_V\" :  \"" << id_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

