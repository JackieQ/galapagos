// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __packetMaker_packet1_H__
#define __packetMaker_packet1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct packetMaker_packet1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 25;
  static const unsigned AddressWidth = 5;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(packetMaker_packet1_ram) {
        ram[0] = "0b00000110000001010000010000000011";
        ram[1] = "0b00000110000001010000001000000001";
        ram[2] = "0b00000000000000110000010000000101";
        ram[3] = "0b10101011110011010101011000000000";
        ram[4] = "0b00010111000101100001010100010100";
        ram[5] = "0b00011011000110100001100100011000";
        ram[6] = "0b00011111000111100001110100011100";
        ram[7] = "0b00100011001000100010000100100000";
        ram[8] = "0b00100111001001100010010100100100";
        ram[9] = "0b00101011001010100010100100101000";
        ram[10] = "0b00101111001011100010110100101100";
        ram[11] = "0b00110011001100100011000100110000";
        ram[12] = "0b00110111001101100011010100110100";
        ram[13] = "0b00111011001110100011100100111000";
        ram[14] = "0b00111111001111100011110100111100";
        ram[15] = "0b01000011010000100100000101000000";
        ram[16] = "0b01000111010001100100010101000100";
        ram[17] = "0b01001011010010100100100101001000";
        ram[18] = "0b01001111010011100100110101001100";
        ram[19] = "0b01010011010100100101000101010000";
        ram[20] = "0b01010111010101100101010101010100";
        ram[21] = "0b01011011010110100101100101011000";
        ram[22] = "0b01011111010111100101110101011100";
        ram[23] = "0b01100011011000100110000101100000";
        ram[24] = "0b11111111101010101100110011101110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(packetMaker_packet1) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 25;
static const unsigned AddressWidth = 5;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


packetMaker_packet1_ram* meminst;


SC_CTOR(packetMaker_packet1) {
meminst = new packetMaker_packet1_ram("packetMaker_packet1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~packetMaker_packet1() {
    delete meminst;
}


};//endmodule
#endif
