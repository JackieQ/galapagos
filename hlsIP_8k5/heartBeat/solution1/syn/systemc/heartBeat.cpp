// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "heartBeat.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic heartBeat::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic heartBeat::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> heartBeat::ap_ST_fsm_state1 = "1";
const sc_lv<5> heartBeat::ap_ST_fsm_state2 = "10";
const sc_lv<5> heartBeat::ap_ST_fsm_state3 = "100";
const sc_lv<5> heartBeat::ap_ST_fsm_state4 = "1000";
const sc_lv<5> heartBeat::ap_ST_fsm_state5 = "10000";
const bool heartBeat::ap_const_boolean_1 = true;
const sc_lv<1> heartBeat::ap_const_lv1_0 = "0";
const sc_lv<1> heartBeat::ap_const_lv1_1 = "1";
const sc_lv<2> heartBeat::ap_const_lv2_0 = "00";
const sc_lv<2> heartBeat::ap_const_lv2_2 = "10";
const sc_lv<2> heartBeat::ap_const_lv2_3 = "11";
const sc_lv<2> heartBeat::ap_const_lv2_1 = "1";
const sc_lv<32> heartBeat::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> heartBeat::ap_const_lv32_1 = "1";
const sc_lv<32> heartBeat::ap_const_lv32_2 = "10";
const sc_lv<32> heartBeat::ap_const_lv32_3 = "11";
const sc_lv<32> heartBeat::ap_const_lv32_4 = "100";
const sc_lv<64> heartBeat::ap_const_lv64_FFFFFFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<8> heartBeat::ap_const_lv8_FF = "11111111";
const sc_lv<32> heartBeat::ap_const_lv32_20 = "100000";
const sc_lv<32> heartBeat::ap_const_lv32_2F = "101111";
const sc_lv<48> heartBeat::ap_const_lv48_FFFFFFFFFFFF = "111111111111111111111111111111111111111111111111";
const sc_lv<32> heartBeat::ap_const_lv32_74000000 = "1110100000000000000000000000000";

heartBeat::heartBeat(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_270);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( stream_out_V_last_V_1_ack_in );
    sensitive << ( stream_out_V_keep_V_1_ack_in );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_p_Result_s_fu_105_p3);
    sensitive << ( temp_V_reg_118 );

    SC_METHOD(thread_stream_out_TDATA);
    sensitive << ( stream_out_V_data_V_1_data_out );

    SC_METHOD(thread_stream_out_TDATA_blk_n);
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_stream_out_TKEEP);
    sensitive << ( stream_out_V_keep_V_1_data_out );

    SC_METHOD(thread_stream_out_TLAST);
    sensitive << ( stream_out_V_last_V_1_data_out );

    SC_METHOD(thread_stream_out_TVALID);
    sensitive << ( stream_out_V_keep_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_ack_in);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_data_V_1_data_in);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_data_V_fu_92_p3 );
    sensitive << ( p_Result_s_fu_105_p3 );

    SC_METHOD(thread_stream_out_V_data_V_1_data_out);
    sensitive << ( stream_out_V_data_V_1_payload_A );
    sensitive << ( stream_out_V_data_V_1_payload_B );
    sensitive << ( stream_out_V_data_V_1_sel );

    SC_METHOD(thread_stream_out_V_data_V_1_load_A);
    sensitive << ( stream_out_V_data_V_1_sel_wr );
    sensitive << ( stream_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_data_V_1_load_B);
    sensitive << ( stream_out_V_data_V_1_sel_wr );
    sensitive << ( stream_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_data_V_1_sel);
    sensitive << ( stream_out_V_data_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_data_V_1_state_cmp_full);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_vld_in);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_stream_out_V_data_V_1_vld_out);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_keep_V_1_ack_in);
    sensitive << ( stream_out_V_keep_V_1_state );

    SC_METHOD(thread_stream_out_V_keep_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_keep_V_1_data_out);
    sensitive << ( stream_out_V_keep_V_1_sel );

    SC_METHOD(thread_stream_out_V_keep_V_1_sel);
    sensitive << ( stream_out_V_keep_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_keep_V_1_vld_in);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_stream_out_V_keep_V_1_vld_out);
    sensitive << ( stream_out_V_keep_V_1_state );

    SC_METHOD(thread_stream_out_V_last_V_1_ack_in);
    sensitive << ( stream_out_V_last_V_1_state );

    SC_METHOD(thread_stream_out_V_last_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_last_V_1_data_in);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_stream_out_V_last_V_1_data_out);
    sensitive << ( stream_out_V_last_V_1_payload_A );
    sensitive << ( stream_out_V_last_V_1_payload_B );
    sensitive << ( stream_out_V_last_V_1_sel );

    SC_METHOD(thread_stream_out_V_last_V_1_load_A);
    sensitive << ( stream_out_V_last_V_1_sel_wr );
    sensitive << ( stream_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_last_V_1_load_B);
    sensitive << ( stream_out_V_last_V_1_sel_wr );
    sensitive << ( stream_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_last_V_1_sel);
    sensitive << ( stream_out_V_last_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_last_V_1_state_cmp_full);
    sensitive << ( stream_out_V_last_V_1_state );

    SC_METHOD(thread_stream_out_V_last_V_1_vld_in);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_stream_out_V_last_V_1_vld_out);
    sensitive << ( stream_out_V_last_V_1_state );

    SC_METHOD(thread_temp_V_fu_101_p1);
    sensitive << ( eth_address_V );

    SC_METHOD(thread_tmp_data_V_fu_92_p3);
    sensitive << ( tmp_fu_82_p4 );

    SC_METHOD(thread_tmp_fu_82_p4);
    sensitive << ( eth_address_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_condition_270 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    stream_out_V_data_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_data_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_data_V_1_state = "00";
    stream_out_V_last_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_last_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_last_V_1_state = "00";
    stream_out_V_keep_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_keep_V_1_state = "00";
    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "heartBeat_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, eth_address_V, "(port)eth_address_V");
    sc_trace(mVcdFile, stream_out_TDATA, "(port)stream_out_TDATA");
    sc_trace(mVcdFile, stream_out_TVALID, "(port)stream_out_TVALID");
    sc_trace(mVcdFile, stream_out_TREADY, "(port)stream_out_TREADY");
    sc_trace(mVcdFile, stream_out_TLAST, "(port)stream_out_TLAST");
    sc_trace(mVcdFile, stream_out_TKEEP, "(port)stream_out_TKEEP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, stream_out_V_data_V_1_data_in, "stream_out_V_data_V_1_data_in");
    sc_trace(mVcdFile, stream_out_V_data_V_1_data_out, "stream_out_V_data_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_vld_in, "stream_out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_data_V_1_vld_out, "stream_out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_ack_in, "stream_out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_data_V_1_ack_out, "stream_out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_payload_A, "stream_out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_data_V_1_payload_B, "stream_out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel_rd, "stream_out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel_wr, "stream_out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel, "stream_out_V_data_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_data_V_1_load_A, "stream_out_V_data_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_data_V_1_load_B, "stream_out_V_data_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_data_V_1_state, "stream_out_V_data_V_1_state");
    sc_trace(mVcdFile, stream_out_V_data_V_1_state_cmp_full, "stream_out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_last_V_1_data_in, "stream_out_V_last_V_1_data_in");
    sc_trace(mVcdFile, stream_out_V_last_V_1_data_out, "stream_out_V_last_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_last_V_1_vld_in, "stream_out_V_last_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_last_V_1_vld_out, "stream_out_V_last_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_last_V_1_ack_in, "stream_out_V_last_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_last_V_1_ack_out, "stream_out_V_last_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_last_V_1_payload_A, "stream_out_V_last_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_last_V_1_payload_B, "stream_out_V_last_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_last_V_1_sel_rd, "stream_out_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_last_V_1_sel_wr, "stream_out_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_last_V_1_sel, "stream_out_V_last_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_last_V_1_load_A, "stream_out_V_last_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_last_V_1_load_B, "stream_out_V_last_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_last_V_1_state, "stream_out_V_last_V_1_state");
    sc_trace(mVcdFile, stream_out_V_last_V_1_state_cmp_full, "stream_out_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_data_out, "stream_out_V_keep_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_vld_in, "stream_out_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_vld_out, "stream_out_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_ack_in, "stream_out_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_ack_out, "stream_out_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_sel_rd, "stream_out_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_sel, "stream_out_V_keep_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_state, "stream_out_V_keep_V_1_state");
    sc_trace(mVcdFile, stream_out_TDATA_blk_n, "stream_out_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_data_V_fu_92_p3, "tmp_data_V_fu_92_p3");
    sc_trace(mVcdFile, temp_V_fu_101_p1, "temp_V_fu_101_p1");
    sc_trace(mVcdFile, temp_V_reg_118, "temp_V_reg_118");
    sc_trace(mVcdFile, p_Result_s_fu_105_p3, "p_Result_s_fu_105_p3");
    sc_trace(mVcdFile, ap_condition_270, "ap_condition_270");
    sc_trace(mVcdFile, tmp_fu_82_p4, "tmp_fu_82_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("heartBeat.hdltvin.dat");
    mHdltvoutHandle.open("heartBeat.hdltvout.dat");
}

heartBeat::~heartBeat() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void heartBeat::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_out.read()))) {
            stream_out_V_data_V_1_sel_rd =  (sc_logic) (~stream_out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_in.read()))) {
            stream_out_V_data_V_1_sel_wr =  (sc_logic) (~stream_out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            stream_out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            stream_out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(stream_out_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()))))) {
            stream_out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_vld_out.read()))) {
            stream_out_V_keep_V_1_sel_rd =  (sc_logic) (~stream_out_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_keep_V_1_state.read())))) {
            stream_out_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read())))) {
            stream_out_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_ack_out.read()))))) {
            stream_out_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_out.read()))) {
            stream_out_V_last_V_1_sel_rd =  (sc_logic) (~stream_out_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_in.read()))) {
            stream_out_V_last_V_1_sel_wr =  (sc_logic) (~stream_out_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_last_V_1_state.read())))) {
            stream_out_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read())))) {
            stream_out_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()))))) {
            stream_out_V_last_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_load_A.read())) {
        stream_out_V_data_V_1_payload_A = stream_out_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_load_B.read())) {
        stream_out_V_data_V_1_payload_B = stream_out_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_load_A.read())) {
        stream_out_V_last_V_1_payload_A = stream_out_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_load_B.read())) {
        stream_out_V_last_V_1_payload_B = stream_out_V_last_V_1_data_in.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read()) && !esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) {
        temp_V_reg_118 = temp_V_fu_101_p1.read();
    }
}

void heartBeat::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void heartBeat::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void heartBeat::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void heartBeat::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void heartBeat::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void heartBeat::thread_ap_condition_270() {
    ap_condition_270 = (esl_seteq<1,1,1>(stream_out_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_out_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(stream_out_V_keep_V_1_ack_in.read(), ap_const_logic_0));
}

void heartBeat::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void heartBeat::thread_p_Result_s_fu_105_p3() {
    p_Result_s_fu_105_p3 = esl_concat<32,32>(temp_V_reg_118.read(), ap_const_lv32_74000000);
}

void heartBeat::thread_stream_out_TDATA() {
    stream_out_TDATA = stream_out_V_data_V_1_data_out.read();
}

void heartBeat::thread_stream_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())))) {
        stream_out_TDATA_blk_n =  (sc_logic) (stream_out_V_data_V_1_state.read()[1]);
    } else {
        stream_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void heartBeat::thread_stream_out_TKEEP() {
    stream_out_TKEEP = stream_out_V_keep_V_1_data_out.read();
}

void heartBeat::thread_stream_out_TLAST() {
    stream_out_TLAST = stream_out_V_last_V_1_data_out.read();
}

void heartBeat::thread_stream_out_TVALID() {
    stream_out_TVALID =  (sc_logic) (stream_out_V_keep_V_1_state.read()[0]);
}

void heartBeat::thread_stream_out_V_data_V_1_ack_in() {
    stream_out_V_data_V_1_ack_in =  (sc_logic) (stream_out_V_data_V_1_state.read()[1]);
}

void heartBeat::thread_stream_out_V_data_V_1_ack_out() {
    stream_out_V_data_V_1_ack_out = stream_out_TREADY.read();
}

void heartBeat::thread_stream_out_V_data_V_1_data_in() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())))) {
        stream_out_V_data_V_1_data_in = ap_const_lv64_FFFFFFFFFFFFFFFF;
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        stream_out_V_data_V_1_data_in = p_Result_s_fu_105_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read()))) {
        stream_out_V_data_V_1_data_in = tmp_data_V_fu_92_p3.read();
    } else {
        stream_out_V_data_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void heartBeat::thread_stream_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_sel.read())) {
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B.read();
    } else {
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A.read();
    }
}

void heartBeat::thread_stream_out_V_data_V_1_load_A() {
    stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full.read() & ~stream_out_V_data_V_1_sel_wr.read());
}

void heartBeat::thread_stream_out_V_data_V_1_load_B() {
    stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_sel_wr.read() & stream_out_V_data_V_1_state_cmp_full.read());
}

void heartBeat::thread_stream_out_V_data_V_1_sel() {
    stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd.read();
}

void heartBeat::thread_stream_out_V_data_V_1_state_cmp_full() {
    stream_out_V_data_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void heartBeat::thread_stream_out_V_data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))))) {
        stream_out_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void heartBeat::thread_stream_out_V_data_V_1_vld_out() {
    stream_out_V_data_V_1_vld_out =  (sc_logic) (stream_out_V_data_V_1_state.read()[0]);
}

void heartBeat::thread_stream_out_V_keep_V_1_ack_in() {
    stream_out_V_keep_V_1_ack_in =  (sc_logic) (stream_out_V_keep_V_1_state.read()[1]);
}

void heartBeat::thread_stream_out_V_keep_V_1_ack_out() {
    stream_out_V_keep_V_1_ack_out = stream_out_TREADY.read();
}

void heartBeat::thread_stream_out_V_keep_V_1_data_out() {
    stream_out_V_keep_V_1_data_out = ap_const_lv8_FF;
}

void heartBeat::thread_stream_out_V_keep_V_1_sel() {
    stream_out_V_keep_V_1_sel = stream_out_V_keep_V_1_sel_rd.read();
}

void heartBeat::thread_stream_out_V_keep_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))))) {
        stream_out_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void heartBeat::thread_stream_out_V_keep_V_1_vld_out() {
    stream_out_V_keep_V_1_vld_out =  (sc_logic) (stream_out_V_keep_V_1_state.read()[0]);
}

void heartBeat::thread_stream_out_V_last_V_1_ack_in() {
    stream_out_V_last_V_1_ack_in =  (sc_logic) (stream_out_V_last_V_1_state.read()[1]);
}

void heartBeat::thread_stream_out_V_last_V_1_ack_out() {
    stream_out_V_last_V_1_ack_out = stream_out_TREADY.read();
}

void heartBeat::thread_stream_out_V_last_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        stream_out_V_last_V_1_data_in = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())))) {
        stream_out_V_last_V_1_data_in = ap_const_lv1_0;
    } else {
        stream_out_V_last_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void heartBeat::thread_stream_out_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_sel.read())) {
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B.read();
    } else {
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A.read();
    }
}

void heartBeat::thread_stream_out_V_last_V_1_load_A() {
    stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full.read() & ~stream_out_V_last_V_1_sel_wr.read());
}

void heartBeat::thread_stream_out_V_last_V_1_load_B() {
    stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_sel_wr.read() & stream_out_V_last_V_1_state_cmp_full.read());
}

void heartBeat::thread_stream_out_V_last_V_1_sel() {
    stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd.read();
}

void heartBeat::thread_stream_out_V_last_V_1_state_cmp_full() {
    stream_out_V_last_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void heartBeat::thread_stream_out_V_last_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))))) {
        stream_out_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void heartBeat::thread_stream_out_V_last_V_1_vld_out() {
    stream_out_V_last_V_1_vld_out =  (sc_logic) (stream_out_V_last_V_1_state.read()[0]);
}

void heartBeat::thread_temp_V_fu_101_p1() {
    temp_V_fu_101_p1 = eth_address_V.read().range(32-1, 0);
}

void heartBeat::thread_tmp_data_V_fu_92_p3() {
    tmp_data_V_fu_92_p3 = esl_concat<48,16>(ap_const_lv48_FFFFFFFFFFFF, tmp_fu_82_p4.read());
}

void heartBeat::thread_tmp_fu_82_p4() {
    tmp_fu_82_p4 = eth_address_V.read().range(47, 32);
}

void heartBeat::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_condition_270.read(), ap_const_boolean_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void heartBeat::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_address_V\" :  \"" << eth_address_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"stream_out_TDATA\" :  \"" << stream_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TVALID\" :  \"" << stream_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_out_TREADY\" :  \"" << stream_out_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TLAST\" :  \"" << stream_out_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TKEEP\" :  \"" << stream_out_TKEEP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

