-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fireWall64 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    eth_address_V : IN STD_LOGIC_VECTOR (47 downto 0);
    stream_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TDEST : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    observedAddress_out_V : IN STD_LOGIC_VECTOR (47 downto 0);
    dest_out_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    dest_out_V_ap_vld : OUT STD_LOGIC;
    match_out_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    match_out_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fireWall64 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fireWall64,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku115-flva1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.509500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=354,HLS_SYN_LUT=242}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal stream_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal stream_in_V_data_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_data_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal stream_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal stream_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel : STD_LOGIC;
    signal stream_in_V_data_V_0_load_A : STD_LOGIC;
    signal stream_in_V_data_V_0_load_B : STD_LOGIC;
    signal stream_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_last_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_last_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_last_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_last_V_0_sel : STD_LOGIC;
    signal stream_in_V_last_V_0_load_A : STD_LOGIC;
    signal stream_in_V_last_V_0_load_B : STD_LOGIC;
    signal stream_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal stream_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal stream_out_V_data_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_data_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal stream_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal stream_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel : STD_LOGIC;
    signal stream_out_V_data_V_1_load_A : STD_LOGIC;
    signal stream_out_V_data_V_1_load_B : STD_LOGIC;
    signal stream_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_dest_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_out_V_dest_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_dest_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_dest_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_dest_V_1_sel : STD_LOGIC;
    signal stream_out_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_last_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel : STD_LOGIC;
    signal stream_out_V_last_V_1_load_A : STD_LOGIC;
    signal stream_out_V_last_V_1_load_B : STD_LOGIC;
    signal stream_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_1_fu_176_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_377 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_last_V_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_fu_347_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_155 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_s_fu_108 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_1_fu_251_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_192_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_182_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_212_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_202_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal observedAddress_V_fu_222_p6 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_6_fu_247_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_273_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_287_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_317_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_297_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_327_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_307_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_337_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_277_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_data_V_0_ack_out) and (ap_const_logic_1 = stream_in_V_data_V_0_vld_out))) then 
                                        stream_in_V_data_V_0_sel_rd <= not(stream_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_data_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_data_V_0_ack_in))) then 
                                        stream_in_V_data_V_0_sel_wr <= not(stream_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_in_V_data_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_data_V_0_ack_out) and (stream_in_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_in_V_data_V_0_vld_in) and (stream_in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_in_V_data_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_data_V_0_ack_out) and (stream_in_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = stream_in_V_data_V_0_ack_out) and (stream_in_V_data_V_0_state = ap_const_lv2_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_in_V_data_V_0_vld_in) and (stream_in_V_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = stream_in_V_data_V_0_ack_out) and (stream_in_V_data_V_0_state = ap_const_lv2_1)) or ((stream_in_V_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = stream_in_V_data_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = stream_in_V_data_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_data_V_0_ack_out)))))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_last_V_0_ack_out) and (ap_const_logic_1 = stream_in_V_last_V_0_vld_out))) then 
                                        stream_in_V_last_V_0_sel_rd <= not(stream_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_in_V_last_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_last_V_0_ack_in))) then 
                                        stream_in_V_last_V_0_sel_wr <= not(stream_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_in_V_last_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_last_V_0_ack_out) and (ap_const_lv2_3 = stream_in_V_last_V_0_state)) or ((ap_const_logic_0 = stream_in_V_last_V_0_vld_in) and (ap_const_lv2_2 = stream_in_V_last_V_0_state)))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_in_V_last_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_last_V_0_ack_out) and (ap_const_lv2_3 = stream_in_V_last_V_0_state)) or ((ap_const_logic_0 = stream_in_V_last_V_0_ack_out) and (ap_const_lv2_1 = stream_in_V_last_V_0_state)))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_in_V_last_V_0_vld_in) and (ap_const_lv2_2 = stream_in_V_last_V_0_state)) or ((ap_const_logic_1 = stream_in_V_last_V_0_ack_out) and (ap_const_lv2_1 = stream_in_V_last_V_0_state)) or ((ap_const_lv2_3 = stream_in_V_last_V_0_state) and not(((ap_const_logic_1 = stream_in_V_last_V_0_vld_in) and (ap_const_logic_0 = stream_in_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = stream_in_V_last_V_0_vld_in) and (ap_const_logic_1 = stream_in_V_last_V_0_ack_out)))))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_data_V_1_vld_out))) then 
                                        stream_out_V_data_V_1_sel_rd <= not(stream_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_in))) then 
                                        stream_out_V_data_V_1_sel_wr <= not(stream_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_data_V_1_state)) or ((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_data_V_1_state)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_data_V_1_state)) or ((ap_const_logic_0 = stream_out_V_data_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_data_V_1_state)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_data_V_1_state)) or ((ap_const_logic_1 = stream_out_V_data_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_data_V_1_state)) or ((ap_const_lv2_3 = stream_out_V_data_V_1_state) and not(((ap_const_logic_1 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_data_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_data_V_1_ack_out)))))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_dest_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_dest_V_1_vld_out))) then 
                                        stream_out_V_dest_V_1_sel_rd <= not(stream_out_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_dest_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_dest_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_dest_V_1_state)) or ((ap_const_logic_0 = stream_out_V_dest_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_dest_V_1_state)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_dest_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_dest_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_dest_V_1_state)) or ((ap_const_logic_0 = stream_out_V_dest_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_dest_V_1_state)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_dest_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_dest_V_1_state)) or ((ap_const_logic_1 = stream_out_V_dest_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_dest_V_1_state)) or ((ap_const_lv2_3 = stream_out_V_dest_V_1_state) and not(((ap_const_logic_1 = stream_out_V_dest_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_dest_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_dest_V_1_ack_out)))))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_logic_1 = stream_out_V_last_V_1_vld_out))) then 
                                        stream_out_V_last_V_1_sel_rd <= not(stream_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_in))) then 
                                        stream_out_V_last_V_1_sel_wr <= not(stream_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_last_V_1_state)) or ((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_last_V_1_state)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_3 = stream_out_V_last_V_1_state)) or ((ap_const_logic_0 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_last_V_1_state)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_lv2_2 = stream_out_V_last_V_1_state)) or ((ap_const_logic_1 = stream_out_V_last_V_1_ack_out) and (ap_const_lv2_1 = stream_out_V_last_V_1_state)) or ((ap_const_lv2_3 = stream_out_V_last_V_1_state) and not(((ap_const_logic_1 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_0 = stream_out_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = stream_out_V_last_V_1_vld_in) and (ap_const_logic_1 = stream_out_V_last_V_1_ack_out)))))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((stream_in_V_data_V_0_vld_out = ap_const_logic_0)))) then 
                i_reg_155 <= i_1_reg_377;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
                i_reg_155 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                i_1_reg_377 <= i_1_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((stream_in_V_data_V_0_vld_out = ap_const_logic_0)))) then
                p_Val2_s_fu_108 <= p_Val2_1_fu_251_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_data_V_0_load_A)) then
                stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_data_V_0_load_B)) then
                stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_last_V_0_load_A)) then
                stream_in_V_last_V_0_payload_A <= stream_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_in_V_last_V_0_load_B)) then
                stream_in_V_last_V_0_payload_B <= stream_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_data_V_1_load_A)) then
                stream_out_V_data_V_1_payload_A <= x_V_fu_347_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_data_V_1_load_B)) then
                stream_out_V_data_V_1_payload_B <= x_V_fu_347_p9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_last_V_1_load_A)) then
                stream_out_V_last_V_1_payload_A <= stream_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = stream_out_V_last_V_1_load_B)) then
                stream_out_V_last_V_1_payload_B <= stream_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_logic_0 = stream_out_V_data_V_1_ack_in))))) then
                tmp_last_V_reg_382 <= stream_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, ap_CS_fsm, tmp_last_V_reg_382, exitcond_fu_170_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_170_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((stream_in_V_data_V_0_vld_out = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_logic_0 = stream_out_V_data_V_1_ack_in)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not((ap_const_logic_0 = stream_out_V_data_V_1_ack_in)) and not((ap_const_lv1_0 = tmp_last_V_reg_382)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((ap_const_logic_0 = stream_out_V_data_V_1_ack_in)) and (ap_const_lv1_0 = tmp_last_V_reg_382))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    dest_out_V <= ap_const_lv16_0;

    dest_out_V_ap_vld_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_170_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond_fu_170_p2)))) then 
            dest_out_V_ap_vld <= ap_const_logic_1;
        else 
            dest_out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_170_p2 <= "1" when (i_reg_155 = ap_const_lv2_2) else "0";
    i_1_fu_176_p2 <= std_logic_vector(unsigned(i_reg_155) + unsigned(ap_const_lv2_1));
    match_out_V <= "1" when (observedAddress_V_fu_222_p6 = eth_address_V) else "0";

    match_out_V_ap_vld_assign_proc : process(ap_CS_fsm_state3, exitcond_fu_170_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond_fu_170_p2)))) then 
            match_out_V_ap_vld <= ap_const_logic_1;
        else 
            match_out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    observedAddress_V_fu_222_p6 <= ((((tmp_3_fu_192_p4 & tmp_2_fu_182_p4) & tmp_5_fu_212_p4) & tmp_4_fu_202_p4) & ap_const_lv16_0);
    p_Val2_1_fu_251_p3 <= 
        p_Val2_s_fu_108 when (tmp_6_fu_247_p1(0) = '1') else 
        stream_in_V_data_V_0_data_out;

    stream_in_TDATA_blk_n_assign_proc : process(stream_in_V_data_V_0_state, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)))) then 
            stream_in_TDATA_blk_n <= stream_in_V_data_V_0_state(0);
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_TREADY <= stream_in_V_last_V_0_state(1);
    stream_in_V_data_V_0_ack_in <= stream_in_V_data_V_0_state(1);

    stream_in_V_data_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5) and not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_logic_0 = stream_out_V_data_V_1_ack_in)))) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((stream_in_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_data_V_0_data_out_assign_proc : process(stream_in_V_data_V_0_payload_A, stream_in_V_data_V_0_payload_B, stream_in_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = stream_in_V_data_V_0_sel)) then 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_B;
        else 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_data_V_0_load_A <= (stream_in_V_data_V_0_state_cmp_full and not(stream_in_V_data_V_0_sel_wr));
    stream_in_V_data_V_0_load_B <= (stream_in_V_data_V_0_sel_wr and stream_in_V_data_V_0_state_cmp_full);
    stream_in_V_data_V_0_sel <= stream_in_V_data_V_0_sel_rd;
    stream_in_V_data_V_0_state_cmp_full <= '0' when (stream_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_data_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_data_V_0_vld_out <= stream_in_V_data_V_0_state(0);
    stream_in_V_last_V_0_ack_in <= stream_in_V_last_V_0_state(1);

    stream_in_V_last_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5) and not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_logic_0 = stream_out_V_data_V_1_ack_in)))) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((stream_in_V_data_V_0_vld_out = ap_const_logic_0))))) then 
            stream_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_last_V_0_data_out_assign_proc : process(stream_in_V_last_V_0_payload_A, stream_in_V_last_V_0_payload_B, stream_in_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = stream_in_V_last_V_0_sel)) then 
            stream_in_V_last_V_0_data_out <= stream_in_V_last_V_0_payload_B;
        else 
            stream_in_V_last_V_0_data_out <= stream_in_V_last_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_last_V_0_load_A <= (stream_in_V_last_V_0_state_cmp_full and not(stream_in_V_last_V_0_sel_wr));
    stream_in_V_last_V_0_load_B <= (stream_in_V_last_V_0_sel_wr and stream_in_V_last_V_0_state_cmp_full);
    stream_in_V_last_V_0_sel <= stream_in_V_last_V_0_sel_rd;
    stream_in_V_last_V_0_state_cmp_full <= '0' when (stream_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_last_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_last_V_0_vld_out <= stream_in_V_last_V_0_state(0);
    stream_out_TDATA <= stream_out_V_data_V_1_data_out;

    stream_out_TDATA_blk_n_assign_proc : process(stream_out_V_data_V_1_state, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state6)))) then 
            stream_out_TDATA_blk_n <= stream_out_V_data_V_1_state(1);
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TDEST <= stream_out_V_dest_V_1_data_out;
    stream_out_TLAST <= stream_out_V_last_V_1_data_out;
    stream_out_TVALID <= stream_out_V_last_V_1_state(0);
    stream_out_V_data_V_1_ack_in <= stream_out_V_data_V_1_state(1);
    stream_out_V_data_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_data_V_1_data_out_assign_proc : process(stream_out_V_data_V_1_payload_A, stream_out_V_data_V_1_payload_B, stream_out_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_data_V_1_sel)) then 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_B;
        else 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_data_V_1_load_A <= (stream_out_V_data_V_1_state_cmp_full and not(stream_out_V_data_V_1_sel_wr));
    stream_out_V_data_V_1_load_B <= (stream_out_V_data_V_1_sel_wr and stream_out_V_data_V_1_state_cmp_full);
    stream_out_V_data_V_1_sel <= stream_out_V_data_V_1_sel_rd;
    stream_out_V_data_V_1_state_cmp_full <= '0' when (stream_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_data_V_1_vld_in_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_logic_0 = stream_out_V_data_V_1_ack_in))))) then 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_data_V_1_vld_out <= stream_out_V_data_V_1_state(0);
    stream_out_V_dest_V_1_ack_out <= stream_out_TREADY;
    stream_out_V_dest_V_1_data_out <= ap_const_lv8_0;
    stream_out_V_dest_V_1_sel <= stream_out_V_dest_V_1_sel_rd;

    stream_out_V_dest_V_1_vld_in_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_logic_0 = stream_out_V_data_V_1_ack_in))))) then 
            stream_out_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_dest_V_1_vld_out <= stream_out_V_dest_V_1_state(0);
    stream_out_V_last_V_1_ack_in <= stream_out_V_last_V_1_state(1);
    stream_out_V_last_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_last_V_1_data_out_assign_proc : process(stream_out_V_last_V_1_payload_A, stream_out_V_last_V_1_payload_B, stream_out_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = stream_out_V_last_V_1_sel)) then 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_B;
        else 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_last_V_1_load_A <= (stream_out_V_last_V_1_state_cmp_full and not(stream_out_V_last_V_1_sel_wr));
    stream_out_V_last_V_1_load_B <= (stream_out_V_last_V_1_sel_wr and stream_out_V_last_V_1_state_cmp_full);
    stream_out_V_last_V_1_sel <= stream_out_V_last_V_1_sel_rd;
    stream_out_V_last_V_1_state_cmp_full <= '0' when (stream_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_last_V_1_vld_in_assign_proc : process(stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5) and not(((stream_in_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_logic_0 = stream_out_V_data_V_1_ack_in))))) then 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_last_V_1_vld_out <= stream_out_V_last_V_1_state(0);
    tmp_10_fu_317_p4 <= stream_in_V_data_V_0_data_out(23 downto 16);
    tmp_11_fu_327_p4 <= stream_in_V_data_V_0_data_out(39 downto 32);
    tmp_12_fu_337_p4 <= stream_in_V_data_V_0_data_out(55 downto 48);
    tmp_14_fu_273_p1 <= stream_in_V_data_V_0_data_out(8 - 1 downto 0);
    tmp_2_fu_182_p4 <= p_Val2_s_fu_108(47 downto 40);
    tmp_3_fu_192_p4 <= p_Val2_s_fu_108(39 downto 32);
    tmp_4_fu_202_p4 <= p_Val2_s_fu_108(63 downto 56);
    tmp_5_fu_212_p4 <= p_Val2_s_fu_108(55 downto 48);
    tmp_6_fu_247_p1 <= i_reg_155(1 - 1 downto 0);
    tmp_7_fu_277_p4 <= stream_in_V_data_V_0_data_out(63 downto 56);
    tmp_8_fu_287_p4 <= stream_in_V_data_V_0_data_out(15 downto 8);
    tmp_9_fu_297_p4 <= stream_in_V_data_V_0_data_out(31 downto 24);
    tmp_s_fu_307_p4 <= stream_in_V_data_V_0_data_out(47 downto 40);
    x_V_fu_347_p9 <= (((((((tmp_14_fu_273_p1 & tmp_8_fu_287_p4) & tmp_10_fu_317_p4) & tmp_9_fu_297_p4) & tmp_11_fu_327_p4) & tmp_s_fu_307_p4) & tmp_12_fu_337_p4) & tmp_7_fu_277_p4);
end behav;
