// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "reverseEndian64.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic reverseEndian64::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic reverseEndian64::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> reverseEndian64::ap_ST_fsm_state1 = "1";
const sc_lv<4> reverseEndian64::ap_ST_fsm_state2 = "10";
const sc_lv<4> reverseEndian64::ap_ST_fsm_state3 = "100";
const sc_lv<4> reverseEndian64::ap_ST_fsm_state4 = "1000";
const sc_lv<1> reverseEndian64::ap_const_lv1_0 = "0";
const sc_lv<1> reverseEndian64::ap_const_lv1_1 = "1";
const sc_lv<2> reverseEndian64::ap_const_lv2_0 = "00";
const sc_lv<2> reverseEndian64::ap_const_lv2_2 = "10";
const sc_lv<2> reverseEndian64::ap_const_lv2_3 = "11";
const sc_lv<2> reverseEndian64::ap_const_lv2_1 = "1";
const sc_lv<32> reverseEndian64::ap_const_lv32_2 = "10";
const sc_lv<32> reverseEndian64::ap_const_lv32_3 = "11";
const sc_lv<32> reverseEndian64::ap_const_lv32_38 = "111000";
const sc_lv<32> reverseEndian64::ap_const_lv32_3F = "111111";
const sc_lv<32> reverseEndian64::ap_const_lv32_8 = "1000";
const sc_lv<32> reverseEndian64::ap_const_lv32_F = "1111";
const sc_lv<32> reverseEndian64::ap_const_lv32_18 = "11000";
const sc_lv<32> reverseEndian64::ap_const_lv32_1F = "11111";
const sc_lv<32> reverseEndian64::ap_const_lv32_28 = "101000";
const sc_lv<32> reverseEndian64::ap_const_lv32_2F = "101111";
const sc_lv<32> reverseEndian64::ap_const_lv32_10 = "10000";
const sc_lv<32> reverseEndian64::ap_const_lv32_17 = "10111";
const sc_lv<32> reverseEndian64::ap_const_lv32_20 = "100000";
const sc_lv<32> reverseEndian64::ap_const_lv32_27 = "100111";
const sc_lv<32> reverseEndian64::ap_const_lv32_30 = "110000";
const sc_lv<32> reverseEndian64::ap_const_lv32_37 = "110111";

reverseEndian64::reverseEndian64(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_stream_in_TDATA_blk_n);
    sensitive << ( stream_in_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_stream_in_TREADY);
    sensitive << ( stream_in_V_tkeep_V_0_state );

    SC_METHOD(thread_stream_in_V_data_V_0_ack_in);
    sensitive << ( stream_in_V_data_V_0_state );

    SC_METHOD(thread_stream_in_V_data_V_0_ack_out);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_stream_in_V_data_V_0_data_out);
    sensitive << ( stream_in_V_data_V_0_payload_A );
    sensitive << ( stream_in_V_data_V_0_payload_B );
    sensitive << ( stream_in_V_data_V_0_sel );

    SC_METHOD(thread_stream_in_V_data_V_0_load_A);
    sensitive << ( stream_in_V_data_V_0_sel_wr );
    sensitive << ( stream_in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_data_V_0_load_B);
    sensitive << ( stream_in_V_data_V_0_sel_wr );
    sensitive << ( stream_in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_data_V_0_sel);
    sensitive << ( stream_in_V_data_V_0_sel_rd );

    SC_METHOD(thread_stream_in_V_data_V_0_state_cmp_full);
    sensitive << ( stream_in_V_data_V_0_state );

    SC_METHOD(thread_stream_in_V_data_V_0_vld_in);
    sensitive << ( stream_in_TVALID );

    SC_METHOD(thread_stream_in_V_data_V_0_vld_out);
    sensitive << ( stream_in_V_data_V_0_state );

    SC_METHOD(thread_stream_in_V_last_V_0_ack_in);
    sensitive << ( stream_in_V_last_V_0_state );

    SC_METHOD(thread_stream_in_V_last_V_0_ack_out);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_stream_in_V_last_V_0_data_out);
    sensitive << ( stream_in_V_last_V_0_payload_A );
    sensitive << ( stream_in_V_last_V_0_payload_B );
    sensitive << ( stream_in_V_last_V_0_sel );

    SC_METHOD(thread_stream_in_V_last_V_0_load_A);
    sensitive << ( stream_in_V_last_V_0_sel_wr );
    sensitive << ( stream_in_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_last_V_0_load_B);
    sensitive << ( stream_in_V_last_V_0_sel_wr );
    sensitive << ( stream_in_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_last_V_0_sel);
    sensitive << ( stream_in_V_last_V_0_sel_rd );

    SC_METHOD(thread_stream_in_V_last_V_0_state_cmp_full);
    sensitive << ( stream_in_V_last_V_0_state );

    SC_METHOD(thread_stream_in_V_last_V_0_vld_in);
    sensitive << ( stream_in_TVALID );

    SC_METHOD(thread_stream_in_V_last_V_0_vld_out);
    sensitive << ( stream_in_V_last_V_0_state );

    SC_METHOD(thread_stream_in_V_tkeep_V_0_ack_in);
    sensitive << ( stream_in_V_tkeep_V_0_state );

    SC_METHOD(thread_stream_in_V_tkeep_V_0_ack_out);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_stream_in_V_tkeep_V_0_data_out);
    sensitive << ( stream_in_V_tkeep_V_0_payload_A );
    sensitive << ( stream_in_V_tkeep_V_0_payload_B );
    sensitive << ( stream_in_V_tkeep_V_0_sel );

    SC_METHOD(thread_stream_in_V_tkeep_V_0_load_A);
    sensitive << ( stream_in_V_tkeep_V_0_sel_wr );
    sensitive << ( stream_in_V_tkeep_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_tkeep_V_0_load_B);
    sensitive << ( stream_in_V_tkeep_V_0_sel_wr );
    sensitive << ( stream_in_V_tkeep_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_tkeep_V_0_sel);
    sensitive << ( stream_in_V_tkeep_V_0_sel_rd );

    SC_METHOD(thread_stream_in_V_tkeep_V_0_state_cmp_full);
    sensitive << ( stream_in_V_tkeep_V_0_state );

    SC_METHOD(thread_stream_in_V_tkeep_V_0_vld_in);
    sensitive << ( stream_in_TVALID );

    SC_METHOD(thread_stream_in_V_tkeep_V_0_vld_out);
    sensitive << ( stream_in_V_tkeep_V_0_state );

    SC_METHOD(thread_stream_out_TDATA);
    sensitive << ( stream_out_V_data_V_1_data_out );

    SC_METHOD(thread_stream_out_TDATA_blk_n);
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_stream_out_TKEEP);
    sensitive << ( stream_out_V_tkeep_V_1_data_out );

    SC_METHOD(thread_stream_out_TLAST);
    sensitive << ( stream_out_V_last_V_1_data_out );

    SC_METHOD(thread_stream_out_TVALID);
    sensitive << ( stream_out_V_tkeep_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_ack_in);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_data_V_1_data_out);
    sensitive << ( stream_out_V_data_V_1_payload_A );
    sensitive << ( stream_out_V_data_V_1_payload_B );
    sensitive << ( stream_out_V_data_V_1_sel );

    SC_METHOD(thread_stream_out_V_data_V_1_load_A);
    sensitive << ( stream_out_V_data_V_1_sel_wr );
    sensitive << ( stream_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_data_V_1_load_B);
    sensitive << ( stream_out_V_data_V_1_sel_wr );
    sensitive << ( stream_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_data_V_1_sel);
    sensitive << ( stream_out_V_data_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_data_V_1_state_cmp_full);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_vld_in);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_stream_out_V_data_V_1_vld_out);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_last_V_1_ack_in);
    sensitive << ( stream_out_V_last_V_1_state );

    SC_METHOD(thread_stream_out_V_last_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_last_V_1_data_out);
    sensitive << ( stream_out_V_last_V_1_payload_A );
    sensitive << ( stream_out_V_last_V_1_payload_B );
    sensitive << ( stream_out_V_last_V_1_sel );

    SC_METHOD(thread_stream_out_V_last_V_1_load_A);
    sensitive << ( stream_out_V_last_V_1_sel_wr );
    sensitive << ( stream_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_last_V_1_load_B);
    sensitive << ( stream_out_V_last_V_1_sel_wr );
    sensitive << ( stream_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_last_V_1_sel);
    sensitive << ( stream_out_V_last_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_last_V_1_state_cmp_full);
    sensitive << ( stream_out_V_last_V_1_state );

    SC_METHOD(thread_stream_out_V_last_V_1_vld_in);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_stream_out_V_last_V_1_vld_out);
    sensitive << ( stream_out_V_last_V_1_state );

    SC_METHOD(thread_stream_out_V_tkeep_V_1_ack_in);
    sensitive << ( stream_out_V_tkeep_V_1_state );

    SC_METHOD(thread_stream_out_V_tkeep_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_tkeep_V_1_data_out);
    sensitive << ( stream_out_V_tkeep_V_1_payload_A );
    sensitive << ( stream_out_V_tkeep_V_1_payload_B );
    sensitive << ( stream_out_V_tkeep_V_1_sel );

    SC_METHOD(thread_stream_out_V_tkeep_V_1_load_A);
    sensitive << ( stream_out_V_tkeep_V_1_sel_wr );
    sensitive << ( stream_out_V_tkeep_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_tkeep_V_1_load_B);
    sensitive << ( stream_out_V_tkeep_V_1_sel_wr );
    sensitive << ( stream_out_V_tkeep_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_tkeep_V_1_sel);
    sensitive << ( stream_out_V_tkeep_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_tkeep_V_1_state_cmp_full);
    sensitive << ( stream_out_V_tkeep_V_1_state );

    SC_METHOD(thread_stream_out_V_tkeep_V_1_vld_in);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_stream_out_V_tkeep_V_1_vld_out);
    sensitive << ( stream_out_V_tkeep_V_1_state );

    SC_METHOD(thread_tmp_1_fu_109_p4);
    sensitive << ( stream_in_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_2_fu_119_p4);
    sensitive << ( stream_in_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_3_fu_129_p4);
    sensitive << ( stream_in_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_4_fu_139_p4);
    sensitive << ( stream_in_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_5_fu_149_p4);
    sensitive << ( stream_in_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_6_fu_159_p4);
    sensitive << ( stream_in_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_7_fu_169_p4);
    sensitive << ( stream_in_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_fu_105_p1);
    sensitive << ( stream_in_V_data_V_0_data_out );

    SC_METHOD(thread_x_V_fu_179_p9);
    sensitive << ( tmp_fu_105_p1 );
    sensitive << ( tmp_2_fu_119_p4 );
    sensitive << ( tmp_5_fu_149_p4 );
    sensitive << ( tmp_3_fu_129_p4 );
    sensitive << ( tmp_6_fu_159_p4 );
    sensitive << ( tmp_4_fu_139_p4 );
    sensitive << ( tmp_7_fu_169_p4 );
    sensitive << ( tmp_1_fu_109_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    stream_in_V_data_V_0_sel_rd = SC_LOGIC_0;
    stream_in_V_data_V_0_sel_wr = SC_LOGIC_0;
    stream_in_V_data_V_0_state = "00";
    stream_in_V_last_V_0_sel_rd = SC_LOGIC_0;
    stream_in_V_last_V_0_sel_wr = SC_LOGIC_0;
    stream_in_V_last_V_0_state = "00";
    stream_in_V_tkeep_V_0_sel_rd = SC_LOGIC_0;
    stream_in_V_tkeep_V_0_sel_wr = SC_LOGIC_0;
    stream_in_V_tkeep_V_0_state = "00";
    stream_out_V_data_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_data_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_data_V_1_state = "00";
    stream_out_V_last_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_last_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_last_V_1_state = "00";
    stream_out_V_tkeep_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_tkeep_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_tkeep_V_1_state = "00";
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "reverseEndian64_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, stream_in_TDATA, "(port)stream_in_TDATA");
    sc_trace(mVcdFile, stream_in_TVALID, "(port)stream_in_TVALID");
    sc_trace(mVcdFile, stream_in_TREADY, "(port)stream_in_TREADY");
    sc_trace(mVcdFile, stream_in_TLAST, "(port)stream_in_TLAST");
    sc_trace(mVcdFile, stream_in_TKEEP, "(port)stream_in_TKEEP");
    sc_trace(mVcdFile, stream_out_TDATA, "(port)stream_out_TDATA");
    sc_trace(mVcdFile, stream_out_TVALID, "(port)stream_out_TVALID");
    sc_trace(mVcdFile, stream_out_TREADY, "(port)stream_out_TREADY");
    sc_trace(mVcdFile, stream_out_TLAST, "(port)stream_out_TLAST");
    sc_trace(mVcdFile, stream_out_TKEEP, "(port)stream_out_TKEEP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, stream_in_V_data_V_0_data_out, "stream_in_V_data_V_0_data_out");
    sc_trace(mVcdFile, stream_in_V_data_V_0_vld_in, "stream_in_V_data_V_0_vld_in");
    sc_trace(mVcdFile, stream_in_V_data_V_0_vld_out, "stream_in_V_data_V_0_vld_out");
    sc_trace(mVcdFile, stream_in_V_data_V_0_ack_in, "stream_in_V_data_V_0_ack_in");
    sc_trace(mVcdFile, stream_in_V_data_V_0_ack_out, "stream_in_V_data_V_0_ack_out");
    sc_trace(mVcdFile, stream_in_V_data_V_0_payload_A, "stream_in_V_data_V_0_payload_A");
    sc_trace(mVcdFile, stream_in_V_data_V_0_payload_B, "stream_in_V_data_V_0_payload_B");
    sc_trace(mVcdFile, stream_in_V_data_V_0_sel_rd, "stream_in_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, stream_in_V_data_V_0_sel_wr, "stream_in_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, stream_in_V_data_V_0_sel, "stream_in_V_data_V_0_sel");
    sc_trace(mVcdFile, stream_in_V_data_V_0_load_A, "stream_in_V_data_V_0_load_A");
    sc_trace(mVcdFile, stream_in_V_data_V_0_load_B, "stream_in_V_data_V_0_load_B");
    sc_trace(mVcdFile, stream_in_V_data_V_0_state, "stream_in_V_data_V_0_state");
    sc_trace(mVcdFile, stream_in_V_data_V_0_state_cmp_full, "stream_in_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_in_V_last_V_0_data_out, "stream_in_V_last_V_0_data_out");
    sc_trace(mVcdFile, stream_in_V_last_V_0_vld_in, "stream_in_V_last_V_0_vld_in");
    sc_trace(mVcdFile, stream_in_V_last_V_0_vld_out, "stream_in_V_last_V_0_vld_out");
    sc_trace(mVcdFile, stream_in_V_last_V_0_ack_in, "stream_in_V_last_V_0_ack_in");
    sc_trace(mVcdFile, stream_in_V_last_V_0_ack_out, "stream_in_V_last_V_0_ack_out");
    sc_trace(mVcdFile, stream_in_V_last_V_0_payload_A, "stream_in_V_last_V_0_payload_A");
    sc_trace(mVcdFile, stream_in_V_last_V_0_payload_B, "stream_in_V_last_V_0_payload_B");
    sc_trace(mVcdFile, stream_in_V_last_V_0_sel_rd, "stream_in_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, stream_in_V_last_V_0_sel_wr, "stream_in_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, stream_in_V_last_V_0_sel, "stream_in_V_last_V_0_sel");
    sc_trace(mVcdFile, stream_in_V_last_V_0_load_A, "stream_in_V_last_V_0_load_A");
    sc_trace(mVcdFile, stream_in_V_last_V_0_load_B, "stream_in_V_last_V_0_load_B");
    sc_trace(mVcdFile, stream_in_V_last_V_0_state, "stream_in_V_last_V_0_state");
    sc_trace(mVcdFile, stream_in_V_last_V_0_state_cmp_full, "stream_in_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_data_out, "stream_in_V_tkeep_V_0_data_out");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_vld_in, "stream_in_V_tkeep_V_0_vld_in");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_vld_out, "stream_in_V_tkeep_V_0_vld_out");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_ack_in, "stream_in_V_tkeep_V_0_ack_in");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_ack_out, "stream_in_V_tkeep_V_0_ack_out");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_payload_A, "stream_in_V_tkeep_V_0_payload_A");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_payload_B, "stream_in_V_tkeep_V_0_payload_B");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_sel_rd, "stream_in_V_tkeep_V_0_sel_rd");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_sel_wr, "stream_in_V_tkeep_V_0_sel_wr");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_sel, "stream_in_V_tkeep_V_0_sel");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_load_A, "stream_in_V_tkeep_V_0_load_A");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_load_B, "stream_in_V_tkeep_V_0_load_B");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_state, "stream_in_V_tkeep_V_0_state");
    sc_trace(mVcdFile, stream_in_V_tkeep_V_0_state_cmp_full, "stream_in_V_tkeep_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_data_V_1_data_out, "stream_out_V_data_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_vld_in, "stream_out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_data_V_1_vld_out, "stream_out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_ack_in, "stream_out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_data_V_1_ack_out, "stream_out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_payload_A, "stream_out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_data_V_1_payload_B, "stream_out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel_rd, "stream_out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel_wr, "stream_out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel, "stream_out_V_data_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_data_V_1_load_A, "stream_out_V_data_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_data_V_1_load_B, "stream_out_V_data_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_data_V_1_state, "stream_out_V_data_V_1_state");
    sc_trace(mVcdFile, stream_out_V_data_V_1_state_cmp_full, "stream_out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_last_V_1_data_out, "stream_out_V_last_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_last_V_1_vld_in, "stream_out_V_last_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_last_V_1_vld_out, "stream_out_V_last_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_last_V_1_ack_in, "stream_out_V_last_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_last_V_1_ack_out, "stream_out_V_last_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_last_V_1_payload_A, "stream_out_V_last_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_last_V_1_payload_B, "stream_out_V_last_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_last_V_1_sel_rd, "stream_out_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_last_V_1_sel_wr, "stream_out_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_last_V_1_sel, "stream_out_V_last_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_last_V_1_load_A, "stream_out_V_last_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_last_V_1_load_B, "stream_out_V_last_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_last_V_1_state, "stream_out_V_last_V_1_state");
    sc_trace(mVcdFile, stream_out_V_last_V_1_state_cmp_full, "stream_out_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_data_out, "stream_out_V_tkeep_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_vld_in, "stream_out_V_tkeep_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_vld_out, "stream_out_V_tkeep_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_ack_in, "stream_out_V_tkeep_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_ack_out, "stream_out_V_tkeep_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_payload_A, "stream_out_V_tkeep_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_payload_B, "stream_out_V_tkeep_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_sel_rd, "stream_out_V_tkeep_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_sel_wr, "stream_out_V_tkeep_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_sel, "stream_out_V_tkeep_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_load_A, "stream_out_V_tkeep_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_load_B, "stream_out_V_tkeep_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_state, "stream_out_V_tkeep_V_1_state");
    sc_trace(mVcdFile, stream_out_V_tkeep_V_1_state_cmp_full, "stream_out_V_tkeep_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_in_TDATA_blk_n, "stream_in_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, stream_out_TDATA_blk_n, "stream_out_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, x_V_fu_179_p9, "x_V_fu_179_p9");
    sc_trace(mVcdFile, tmp_fu_105_p1, "tmp_fu_105_p1");
    sc_trace(mVcdFile, tmp_2_fu_119_p4, "tmp_2_fu_119_p4");
    sc_trace(mVcdFile, tmp_5_fu_149_p4, "tmp_5_fu_149_p4");
    sc_trace(mVcdFile, tmp_3_fu_129_p4, "tmp_3_fu_129_p4");
    sc_trace(mVcdFile, tmp_6_fu_159_p4, "tmp_6_fu_159_p4");
    sc_trace(mVcdFile, tmp_4_fu_139_p4, "tmp_4_fu_139_p4");
    sc_trace(mVcdFile, tmp_7_fu_169_p4, "tmp_7_fu_169_p4");
    sc_trace(mVcdFile, tmp_1_fu_109_p4, "tmp_1_fu_109_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("reverseEndian64.hdltvin.dat");
    mHdltvoutHandle.open("reverseEndian64.hdltvout.dat");
}

reverseEndian64::~reverseEndian64() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void reverseEndian64::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_vld_out.read()))) {
            stream_in_V_data_V_0_sel_rd =  (sc_logic) (~stream_in_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_ack_in.read()))) {
            stream_in_V_data_V_0_sel_wr =  (sc_logic) (~stream_in_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            stream_in_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            stream_in_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_ack_out.read()))))) {
            stream_in_V_data_V_0_state = ap_const_lv2_3;
        } else {
            stream_in_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_vld_out.read()))) {
            stream_in_V_last_V_0_sel_rd =  (sc_logic) (~stream_in_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_ack_in.read()))) {
            stream_in_V_last_V_0_sel_wr =  (sc_logic) (~stream_in_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_last_V_0_state.read())))) {
            stream_in_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_last_V_0_state.read())))) {
            stream_in_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_ack_out.read()))))) {
            stream_in_V_last_V_0_state = ap_const_lv2_3;
        } else {
            stream_in_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_tkeep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_vld_out.read()))) {
            stream_in_V_tkeep_V_0_sel_rd =  (sc_logic) (~stream_in_V_tkeep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_tkeep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_ack_in.read()))) {
            stream_in_V_tkeep_V_0_sel_wr =  (sc_logic) (~stream_in_V_tkeep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_tkeep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_tkeep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_tkeep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_tkeep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_tkeep_V_0_state.read())))) {
            stream_in_V_tkeep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_tkeep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_tkeep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_tkeep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_tkeep_V_0_state.read())))) {
            stream_in_V_tkeep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_tkeep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_tkeep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_tkeep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_tkeep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_tkeep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_ack_out.read()))))) {
            stream_in_V_tkeep_V_0_state = ap_const_lv2_3;
        } else {
            stream_in_V_tkeep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_out.read()))) {
            stream_out_V_data_V_1_sel_rd =  (sc_logic) (~stream_out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_in.read()))) {
            stream_out_V_data_V_1_sel_wr =  (sc_logic) (~stream_out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_data_V_1_state.read())))) {
            stream_out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read())))) {
            stream_out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()))))) {
            stream_out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_out.read()))) {
            stream_out_V_last_V_1_sel_rd =  (sc_logic) (~stream_out_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_in.read()))) {
            stream_out_V_last_V_1_sel_wr =  (sc_logic) (~stream_out_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_last_V_1_state.read())))) {
            stream_out_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read())))) {
            stream_out_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()))))) {
            stream_out_V_last_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_tkeep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_vld_out.read()))) {
            stream_out_V_tkeep_V_1_sel_rd =  (sc_logic) (~stream_out_V_tkeep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_tkeep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_ack_in.read()))) {
            stream_out_V_tkeep_V_1_sel_wr =  (sc_logic) (~stream_out_V_tkeep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_tkeep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_tkeep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_tkeep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_tkeep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_tkeep_V_1_state.read())))) {
            stream_out_V_tkeep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_tkeep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_tkeep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_tkeep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_tkeep_V_1_state.read())))) {
            stream_out_V_tkeep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_tkeep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_tkeep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_tkeep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_tkeep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_tkeep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_ack_out.read()))))) {
            stream_out_V_tkeep_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_tkeep_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_load_A.read())) {
        stream_in_V_data_V_0_payload_A = stream_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_load_B.read())) {
        stream_in_V_data_V_0_payload_B = stream_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_load_A.read())) {
        stream_in_V_last_V_0_payload_A = stream_in_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_load_B.read())) {
        stream_in_V_last_V_0_payload_B = stream_in_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_load_A.read())) {
        stream_in_V_tkeep_V_0_payload_A = stream_in_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_load_B.read())) {
        stream_in_V_tkeep_V_0_payload_B = stream_in_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_load_A.read())) {
        stream_out_V_data_V_1_payload_A = x_V_fu_179_p9.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_load_B.read())) {
        stream_out_V_data_V_1_payload_B = x_V_fu_179_p9.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_load_A.read())) {
        stream_out_V_last_V_1_payload_A = stream_in_V_last_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_load_B.read())) {
        stream_out_V_last_V_1_payload_B = stream_in_V_last_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_load_A.read())) {
        stream_out_V_tkeep_V_1_payload_A = stream_in_V_tkeep_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_load_B.read())) {
        stream_out_V_tkeep_V_1_payload_B = stream_in_V_tkeep_V_0_data_out.read();
    }
}

void reverseEndian64::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void reverseEndian64::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void reverseEndian64::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void reverseEndian64::thread_stream_in_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        stream_in_TDATA_blk_n =  (sc_logic) (stream_in_V_data_V_0_state.read()[0]);
    } else {
        stream_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void reverseEndian64::thread_stream_in_TREADY() {
    stream_in_TREADY =  (sc_logic) (stream_in_V_tkeep_V_0_state.read()[1]);
}

void reverseEndian64::thread_stream_in_V_data_V_0_ack_in() {
    stream_in_V_data_V_0_ack_in =  (sc_logic) (stream_in_V_data_V_0_state.read()[1]);
}

void reverseEndian64::thread_stream_in_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(stream_in_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())))) {
        stream_in_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_in_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void reverseEndian64::thread_stream_in_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_sel.read())) {
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B.read();
    } else {
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A.read();
    }
}

void reverseEndian64::thread_stream_in_V_data_V_0_load_A() {
    stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full.read() & ~stream_in_V_data_V_0_sel_wr.read());
}

void reverseEndian64::thread_stream_in_V_data_V_0_load_B() {
    stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_sel_wr.read() & stream_in_V_data_V_0_state_cmp_full.read());
}

void reverseEndian64::thread_stream_in_V_data_V_0_sel() {
    stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd.read();
}

void reverseEndian64::thread_stream_in_V_data_V_0_state_cmp_full() {
    stream_in_V_data_V_0_state_cmp_full =  (sc_logic) ((!stream_in_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_in_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void reverseEndian64::thread_stream_in_V_data_V_0_vld_in() {
    stream_in_V_data_V_0_vld_in = stream_in_TVALID.read();
}

void reverseEndian64::thread_stream_in_V_data_V_0_vld_out() {
    stream_in_V_data_V_0_vld_out =  (sc_logic) (stream_in_V_data_V_0_state.read()[0]);
}

void reverseEndian64::thread_stream_in_V_last_V_0_ack_in() {
    stream_in_V_last_V_0_ack_in =  (sc_logic) (stream_in_V_last_V_0_state.read()[1]);
}

void reverseEndian64::thread_stream_in_V_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(stream_in_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())))) {
        stream_in_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_in_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void reverseEndian64::thread_stream_in_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_last_V_0_sel.read())) {
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_B.read();
    } else {
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_A.read();
    }
}

void reverseEndian64::thread_stream_in_V_last_V_0_load_A() {
    stream_in_V_last_V_0_load_A = (stream_in_V_last_V_0_state_cmp_full.read() & ~stream_in_V_last_V_0_sel_wr.read());
}

void reverseEndian64::thread_stream_in_V_last_V_0_load_B() {
    stream_in_V_last_V_0_load_B = (stream_in_V_last_V_0_sel_wr.read() & stream_in_V_last_V_0_state_cmp_full.read());
}

void reverseEndian64::thread_stream_in_V_last_V_0_sel() {
    stream_in_V_last_V_0_sel = stream_in_V_last_V_0_sel_rd.read();
}

void reverseEndian64::thread_stream_in_V_last_V_0_state_cmp_full() {
    stream_in_V_last_V_0_state_cmp_full =  (sc_logic) ((!stream_in_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_in_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void reverseEndian64::thread_stream_in_V_last_V_0_vld_in() {
    stream_in_V_last_V_0_vld_in = stream_in_TVALID.read();
}

void reverseEndian64::thread_stream_in_V_last_V_0_vld_out() {
    stream_in_V_last_V_0_vld_out =  (sc_logic) (stream_in_V_last_V_0_state.read()[0]);
}

void reverseEndian64::thread_stream_in_V_tkeep_V_0_ack_in() {
    stream_in_V_tkeep_V_0_ack_in =  (sc_logic) (stream_in_V_tkeep_V_0_state.read()[1]);
}

void reverseEndian64::thread_stream_in_V_tkeep_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(stream_in_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())))) {
        stream_in_V_tkeep_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_in_V_tkeep_V_0_ack_out = ap_const_logic_0;
    }
}

void reverseEndian64::thread_stream_in_V_tkeep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_tkeep_V_0_sel.read())) {
        stream_in_V_tkeep_V_0_data_out = stream_in_V_tkeep_V_0_payload_B.read();
    } else {
        stream_in_V_tkeep_V_0_data_out = stream_in_V_tkeep_V_0_payload_A.read();
    }
}

void reverseEndian64::thread_stream_in_V_tkeep_V_0_load_A() {
    stream_in_V_tkeep_V_0_load_A = (stream_in_V_tkeep_V_0_state_cmp_full.read() & ~stream_in_V_tkeep_V_0_sel_wr.read());
}

void reverseEndian64::thread_stream_in_V_tkeep_V_0_load_B() {
    stream_in_V_tkeep_V_0_load_B = (stream_in_V_tkeep_V_0_sel_wr.read() & stream_in_V_tkeep_V_0_state_cmp_full.read());
}

void reverseEndian64::thread_stream_in_V_tkeep_V_0_sel() {
    stream_in_V_tkeep_V_0_sel = stream_in_V_tkeep_V_0_sel_rd.read();
}

void reverseEndian64::thread_stream_in_V_tkeep_V_0_state_cmp_full() {
    stream_in_V_tkeep_V_0_state_cmp_full =  (sc_logic) ((!stream_in_V_tkeep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_in_V_tkeep_V_0_state.read() != ap_const_lv2_1))[0];
}

void reverseEndian64::thread_stream_in_V_tkeep_V_0_vld_in() {
    stream_in_V_tkeep_V_0_vld_in = stream_in_TVALID.read();
}

void reverseEndian64::thread_stream_in_V_tkeep_V_0_vld_out() {
    stream_in_V_tkeep_V_0_vld_out =  (sc_logic) (stream_in_V_tkeep_V_0_state.read()[0]);
}

void reverseEndian64::thread_stream_out_TDATA() {
    stream_out_TDATA = stream_out_V_data_V_1_data_out.read();
}

void reverseEndian64::thread_stream_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())))) {
        stream_out_TDATA_blk_n =  (sc_logic) (stream_out_V_data_V_1_state.read()[1]);
    } else {
        stream_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void reverseEndian64::thread_stream_out_TKEEP() {
    stream_out_TKEEP = stream_out_V_tkeep_V_1_data_out.read();
}

void reverseEndian64::thread_stream_out_TLAST() {
    stream_out_TLAST = stream_out_V_last_V_1_data_out.read();
}

void reverseEndian64::thread_stream_out_TVALID() {
    stream_out_TVALID =  (sc_logic) (stream_out_V_tkeep_V_1_state.read()[0]);
}

void reverseEndian64::thread_stream_out_V_data_V_1_ack_in() {
    stream_out_V_data_V_1_ack_in =  (sc_logic) (stream_out_V_data_V_1_state.read()[1]);
}

void reverseEndian64::thread_stream_out_V_data_V_1_ack_out() {
    stream_out_V_data_V_1_ack_out = stream_out_TREADY.read();
}

void reverseEndian64::thread_stream_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_sel.read())) {
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B.read();
    } else {
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A.read();
    }
}

void reverseEndian64::thread_stream_out_V_data_V_1_load_A() {
    stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full.read() & ~stream_out_V_data_V_1_sel_wr.read());
}

void reverseEndian64::thread_stream_out_V_data_V_1_load_B() {
    stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_sel_wr.read() & stream_out_V_data_V_1_state_cmp_full.read());
}

void reverseEndian64::thread_stream_out_V_data_V_1_sel() {
    stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd.read();
}

void reverseEndian64::thread_stream_out_V_data_V_1_state_cmp_full() {
    stream_out_V_data_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void reverseEndian64::thread_stream_out_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(stream_in_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())))) {
        stream_out_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void reverseEndian64::thread_stream_out_V_data_V_1_vld_out() {
    stream_out_V_data_V_1_vld_out =  (sc_logic) (stream_out_V_data_V_1_state.read()[0]);
}

void reverseEndian64::thread_stream_out_V_last_V_1_ack_in() {
    stream_out_V_last_V_1_ack_in =  (sc_logic) (stream_out_V_last_V_1_state.read()[1]);
}

void reverseEndian64::thread_stream_out_V_last_V_1_ack_out() {
    stream_out_V_last_V_1_ack_out = stream_out_TREADY.read();
}

void reverseEndian64::thread_stream_out_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_sel.read())) {
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B.read();
    } else {
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A.read();
    }
}

void reverseEndian64::thread_stream_out_V_last_V_1_load_A() {
    stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full.read() & ~stream_out_V_last_V_1_sel_wr.read());
}

void reverseEndian64::thread_stream_out_V_last_V_1_load_B() {
    stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_sel_wr.read() & stream_out_V_last_V_1_state_cmp_full.read());
}

void reverseEndian64::thread_stream_out_V_last_V_1_sel() {
    stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd.read();
}

void reverseEndian64::thread_stream_out_V_last_V_1_state_cmp_full() {
    stream_out_V_last_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void reverseEndian64::thread_stream_out_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(stream_in_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())))) {
        stream_out_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void reverseEndian64::thread_stream_out_V_last_V_1_vld_out() {
    stream_out_V_last_V_1_vld_out =  (sc_logic) (stream_out_V_last_V_1_state.read()[0]);
}

void reverseEndian64::thread_stream_out_V_tkeep_V_1_ack_in() {
    stream_out_V_tkeep_V_1_ack_in =  (sc_logic) (stream_out_V_tkeep_V_1_state.read()[1]);
}

void reverseEndian64::thread_stream_out_V_tkeep_V_1_ack_out() {
    stream_out_V_tkeep_V_1_ack_out = stream_out_TREADY.read();
}

void reverseEndian64::thread_stream_out_V_tkeep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_tkeep_V_1_sel.read())) {
        stream_out_V_tkeep_V_1_data_out = stream_out_V_tkeep_V_1_payload_B.read();
    } else {
        stream_out_V_tkeep_V_1_data_out = stream_out_V_tkeep_V_1_payload_A.read();
    }
}

void reverseEndian64::thread_stream_out_V_tkeep_V_1_load_A() {
    stream_out_V_tkeep_V_1_load_A = (stream_out_V_tkeep_V_1_state_cmp_full.read() & ~stream_out_V_tkeep_V_1_sel_wr.read());
}

void reverseEndian64::thread_stream_out_V_tkeep_V_1_load_B() {
    stream_out_V_tkeep_V_1_load_B = (stream_out_V_tkeep_V_1_sel_wr.read() & stream_out_V_tkeep_V_1_state_cmp_full.read());
}

void reverseEndian64::thread_stream_out_V_tkeep_V_1_sel() {
    stream_out_V_tkeep_V_1_sel = stream_out_V_tkeep_V_1_sel_rd.read();
}

void reverseEndian64::thread_stream_out_V_tkeep_V_1_state_cmp_full() {
    stream_out_V_tkeep_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_tkeep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_tkeep_V_1_state.read() != ap_const_lv2_1))[0];
}

void reverseEndian64::thread_stream_out_V_tkeep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(stream_in_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())))) {
        stream_out_V_tkeep_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_tkeep_V_1_vld_in = ap_const_logic_0;
    }
}

void reverseEndian64::thread_stream_out_V_tkeep_V_1_vld_out() {
    stream_out_V_tkeep_V_1_vld_out =  (sc_logic) (stream_out_V_tkeep_V_1_state.read()[0]);
}

void reverseEndian64::thread_tmp_1_fu_109_p4() {
    tmp_1_fu_109_p4 = stream_in_V_data_V_0_data_out.read().range(63, 56);
}

void reverseEndian64::thread_tmp_2_fu_119_p4() {
    tmp_2_fu_119_p4 = stream_in_V_data_V_0_data_out.read().range(15, 8);
}

void reverseEndian64::thread_tmp_3_fu_129_p4() {
    tmp_3_fu_129_p4 = stream_in_V_data_V_0_data_out.read().range(31, 24);
}

void reverseEndian64::thread_tmp_4_fu_139_p4() {
    tmp_4_fu_139_p4 = stream_in_V_data_V_0_data_out.read().range(47, 40);
}

void reverseEndian64::thread_tmp_5_fu_149_p4() {
    tmp_5_fu_149_p4 = stream_in_V_data_V_0_data_out.read().range(23, 16);
}

void reverseEndian64::thread_tmp_6_fu_159_p4() {
    tmp_6_fu_159_p4 = stream_in_V_data_V_0_data_out.read().range(39, 32);
}

void reverseEndian64::thread_tmp_7_fu_169_p4() {
    tmp_7_fu_169_p4 = stream_in_V_data_V_0_data_out.read().range(55, 48);
}

void reverseEndian64::thread_tmp_fu_105_p1() {
    tmp_fu_105_p1 = stream_in_V_data_V_0_data_out.read().range(8-1, 0);
}

void reverseEndian64::thread_x_V_fu_179_p9() {
    x_V_fu_179_p9 = esl_concat<56,8>(esl_concat<48,8>(esl_concat<40,8>(esl_concat<32,8>(esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(tmp_fu_105_p1.read(), tmp_2_fu_119_p4.read()), tmp_5_fu_149_p4.read()), tmp_3_fu_129_p4.read()), tmp_6_fu_159_p4.read()), tmp_4_fu_139_p4.read()), tmp_7_fu_169_p4.read()), tmp_1_fu_109_p4.read());
}

void reverseEndian64::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(stream_in_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read())) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void reverseEndian64::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TDATA\" :  \"" << stream_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TVALID\" :  \"" << stream_in_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"stream_in_TREADY\" :  \"" << stream_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TLAST\" :  \"" << stream_in_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TKEEP\" :  \"" << stream_in_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TDATA\" :  \"" << stream_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TVALID\" :  \"" << stream_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_out_TREADY\" :  \"" << stream_out_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TLAST\" :  \"" << stream_out_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TKEEP\" :  \"" << stream_out_TKEEP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

