// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "packetFormatter_hardcode_64.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic packetFormatter_hardcode_64::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic packetFormatter_hardcode_64::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> packetFormatter_hardcode_64::ap_ST_fsm_state1 = "1";
const sc_lv<7> packetFormatter_hardcode_64::ap_ST_fsm_state2 = "10";
const sc_lv<7> packetFormatter_hardcode_64::ap_ST_fsm_state3 = "100";
const sc_lv<7> packetFormatter_hardcode_64::ap_ST_fsm_state4 = "1000";
const sc_lv<7> packetFormatter_hardcode_64::ap_ST_fsm_state5 = "10000";
const sc_lv<7> packetFormatter_hardcode_64::ap_ST_fsm_state6 = "100000";
const sc_lv<7> packetFormatter_hardcode_64::ap_ST_fsm_state7 = "1000000";
const bool packetFormatter_hardcode_64::ap_const_boolean_1 = true;
const sc_lv<1> packetFormatter_hardcode_64::ap_const_lv1_0 = "0";
const sc_lv<1> packetFormatter_hardcode_64::ap_const_lv1_1 = "1";
const sc_lv<2> packetFormatter_hardcode_64::ap_const_lv2_0 = "00";
const sc_lv<2> packetFormatter_hardcode_64::ap_const_lv2_2 = "10";
const sc_lv<2> packetFormatter_hardcode_64::ap_const_lv2_3 = "11";
const sc_lv<2> packetFormatter_hardcode_64::ap_const_lv2_1 = "1";
const sc_lv<32> packetFormatter_hardcode_64::ap_const_lv32_1 = "1";
const sc_lv<32> packetFormatter_hardcode_64::ap_const_lv32_5 = "101";
const sc_lv<32> packetFormatter_hardcode_64::ap_const_lv32_2 = "10";
const sc_lv<32> packetFormatter_hardcode_64::ap_const_lv32_3 = "11";
const sc_lv<32> packetFormatter_hardcode_64::ap_const_lv32_4 = "100";
const sc_lv<32> packetFormatter_hardcode_64::ap_const_lv32_6 = "110";
const sc_lv<32> packetFormatter_hardcode_64::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<8> packetFormatter_hardcode_64::ap_const_lv8_FF = "11111111";
const sc_lv<32> packetFormatter_hardcode_64::ap_const_lv32_20 = "100000";
const sc_lv<32> packetFormatter_hardcode_64::ap_const_lv32_2F = "101111";
const sc_lv<24> packetFormatter_hardcode_64::ap_const_lv24_740000 = "11101000000000000000000";

packetFormatter_hardcode_64::packetFormatter_hardcode_64(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_547);
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( packetOut_V_last_V_1_ack_in );
    sensitive << ( packetOut_V_keep_V_1_ack_in );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_p_Result_s_fu_141_p4);
    sensitive << ( temp_V_reg_170 );
    sensitive << ( tmp_dest_V_reg_180 );

    SC_METHOD(thread_packetIn_TDATA_blk_n);
    sensitive << ( packetIn_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_packetIn_TREADY);
    sensitive << ( packetIn_V_keep_V_0_state );

    SC_METHOD(thread_packetIn_V_data_V_0_ack_in);
    sensitive << ( packetIn_V_data_V_0_state );

    SC_METHOD(thread_packetIn_V_data_V_0_ack_out);
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_packetIn_V_data_V_0_data_out);
    sensitive << ( packetIn_V_data_V_0_payload_A );
    sensitive << ( packetIn_V_data_V_0_payload_B );
    sensitive << ( packetIn_V_data_V_0_sel );

    SC_METHOD(thread_packetIn_V_data_V_0_load_A);
    sensitive << ( packetIn_V_data_V_0_sel_wr );
    sensitive << ( packetIn_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_packetIn_V_data_V_0_load_B);
    sensitive << ( packetIn_V_data_V_0_sel_wr );
    sensitive << ( packetIn_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_packetIn_V_data_V_0_sel);
    sensitive << ( packetIn_V_data_V_0_sel_rd );

    SC_METHOD(thread_packetIn_V_data_V_0_state_cmp_full);
    sensitive << ( packetIn_V_data_V_0_state );

    SC_METHOD(thread_packetIn_V_data_V_0_vld_in);
    sensitive << ( packetIn_TVALID );

    SC_METHOD(thread_packetIn_V_data_V_0_vld_out);
    sensitive << ( packetIn_V_data_V_0_state );

    SC_METHOD(thread_packetIn_V_dest_V_0_ack_in);
    sensitive << ( packetIn_V_dest_V_0_state );

    SC_METHOD(thread_packetIn_V_dest_V_0_ack_out);
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_packetIn_V_dest_V_0_data_out);
    sensitive << ( packetIn_V_dest_V_0_payload_A );
    sensitive << ( packetIn_V_dest_V_0_payload_B );
    sensitive << ( packetIn_V_dest_V_0_sel );

    SC_METHOD(thread_packetIn_V_dest_V_0_load_A);
    sensitive << ( packetIn_V_dest_V_0_sel_wr );
    sensitive << ( packetIn_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_packetIn_V_dest_V_0_load_B);
    sensitive << ( packetIn_V_dest_V_0_sel_wr );
    sensitive << ( packetIn_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_packetIn_V_dest_V_0_sel);
    sensitive << ( packetIn_V_dest_V_0_sel_rd );

    SC_METHOD(thread_packetIn_V_dest_V_0_state_cmp_full);
    sensitive << ( packetIn_V_dest_V_0_state );

    SC_METHOD(thread_packetIn_V_dest_V_0_vld_in);
    sensitive << ( packetIn_TVALID );

    SC_METHOD(thread_packetIn_V_dest_V_0_vld_out);
    sensitive << ( packetIn_V_dest_V_0_state );

    SC_METHOD(thread_packetIn_V_keep_V_0_ack_in);
    sensitive << ( packetIn_V_keep_V_0_state );

    SC_METHOD(thread_packetIn_V_keep_V_0_ack_out);
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_packetIn_V_keep_V_0_data_out);
    sensitive << ( packetIn_V_keep_V_0_payload_A );
    sensitive << ( packetIn_V_keep_V_0_payload_B );
    sensitive << ( packetIn_V_keep_V_0_sel );

    SC_METHOD(thread_packetIn_V_keep_V_0_load_A);
    sensitive << ( packetIn_V_keep_V_0_sel_wr );
    sensitive << ( packetIn_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_packetIn_V_keep_V_0_load_B);
    sensitive << ( packetIn_V_keep_V_0_sel_wr );
    sensitive << ( packetIn_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_packetIn_V_keep_V_0_sel);
    sensitive << ( packetIn_V_keep_V_0_sel_rd );

    SC_METHOD(thread_packetIn_V_keep_V_0_state_cmp_full);
    sensitive << ( packetIn_V_keep_V_0_state );

    SC_METHOD(thread_packetIn_V_keep_V_0_vld_in);
    sensitive << ( packetIn_TVALID );

    SC_METHOD(thread_packetIn_V_keep_V_0_vld_out);
    sensitive << ( packetIn_V_keep_V_0_state );

    SC_METHOD(thread_packetIn_V_last_V_0_ack_in);
    sensitive << ( packetIn_V_last_V_0_state );

    SC_METHOD(thread_packetIn_V_last_V_0_ack_out);
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_packetIn_V_last_V_0_data_out);
    sensitive << ( packetIn_V_last_V_0_payload_A );
    sensitive << ( packetIn_V_last_V_0_payload_B );
    sensitive << ( packetIn_V_last_V_0_sel );

    SC_METHOD(thread_packetIn_V_last_V_0_load_A);
    sensitive << ( packetIn_V_last_V_0_sel_wr );
    sensitive << ( packetIn_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_packetIn_V_last_V_0_load_B);
    sensitive << ( packetIn_V_last_V_0_sel_wr );
    sensitive << ( packetIn_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_packetIn_V_last_V_0_sel);
    sensitive << ( packetIn_V_last_V_0_sel_rd );

    SC_METHOD(thread_packetIn_V_last_V_0_state_cmp_full);
    sensitive << ( packetIn_V_last_V_0_state );

    SC_METHOD(thread_packetIn_V_last_V_0_vld_in);
    sensitive << ( packetIn_TVALID );

    SC_METHOD(thread_packetIn_V_last_V_0_vld_out);
    sensitive << ( packetIn_V_last_V_0_state );

    SC_METHOD(thread_packetOut_TDATA);
    sensitive << ( packetOut_V_data_V_1_data_out );

    SC_METHOD(thread_packetOut_TDATA_blk_n);
    sensitive << ( packetOut_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_packetOut_TKEEP);
    sensitive << ( packetOut_V_keep_V_1_data_out );

    SC_METHOD(thread_packetOut_TLAST);
    sensitive << ( packetOut_V_last_V_1_data_out );

    SC_METHOD(thread_packetOut_TVALID);
    sensitive << ( packetOut_V_keep_V_1_state );

    SC_METHOD(thread_packetOut_V_data_V_1_ack_in);
    sensitive << ( packetOut_V_data_V_1_state );

    SC_METHOD(thread_packetOut_V_data_V_1_ack_out);
    sensitive << ( packetOut_TREADY );

    SC_METHOD(thread_packetOut_V_data_V_1_data_in);
    sensitive << ( packetIn_V_data_V_0_data_out );
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( reg_111 );
    sensitive << ( tmp_data_V_1_fu_130_p3 );
    sensitive << ( p_Result_s_fu_141_p4 );

    SC_METHOD(thread_packetOut_V_data_V_1_data_out);
    sensitive << ( packetOut_V_data_V_1_payload_A );
    sensitive << ( packetOut_V_data_V_1_payload_B );
    sensitive << ( packetOut_V_data_V_1_sel );

    SC_METHOD(thread_packetOut_V_data_V_1_load_A);
    sensitive << ( packetOut_V_data_V_1_sel_wr );
    sensitive << ( packetOut_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_data_V_1_load_B);
    sensitive << ( packetOut_V_data_V_1_sel_wr );
    sensitive << ( packetOut_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_data_V_1_sel);
    sensitive << ( packetOut_V_data_V_1_sel_rd );

    SC_METHOD(thread_packetOut_V_data_V_1_state_cmp_full);
    sensitive << ( packetOut_V_data_V_1_state );

    SC_METHOD(thread_packetOut_V_data_V_1_vld_in);
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_packetOut_V_data_V_1_vld_out);
    sensitive << ( packetOut_V_data_V_1_state );

    SC_METHOD(thread_packetOut_V_keep_V_1_ack_in);
    sensitive << ( packetOut_V_keep_V_1_state );

    SC_METHOD(thread_packetOut_V_keep_V_1_ack_out);
    sensitive << ( packetOut_TREADY );

    SC_METHOD(thread_packetOut_V_keep_V_1_data_in);
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( packetIn_V_keep_V_0_data_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_packetOut_V_keep_V_1_data_out);
    sensitive << ( packetOut_V_keep_V_1_payload_A );
    sensitive << ( packetOut_V_keep_V_1_payload_B );
    sensitive << ( packetOut_V_keep_V_1_sel );

    SC_METHOD(thread_packetOut_V_keep_V_1_load_A);
    sensitive << ( packetOut_V_keep_V_1_sel_wr );
    sensitive << ( packetOut_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_keep_V_1_load_B);
    sensitive << ( packetOut_V_keep_V_1_sel_wr );
    sensitive << ( packetOut_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_keep_V_1_sel);
    sensitive << ( packetOut_V_keep_V_1_sel_rd );

    SC_METHOD(thread_packetOut_V_keep_V_1_state_cmp_full);
    sensitive << ( packetOut_V_keep_V_1_state );

    SC_METHOD(thread_packetOut_V_keep_V_1_vld_in);
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_packetOut_V_keep_V_1_vld_out);
    sensitive << ( packetOut_V_keep_V_1_state );

    SC_METHOD(thread_packetOut_V_last_V_1_ack_in);
    sensitive << ( packetOut_V_last_V_1_state );

    SC_METHOD(thread_packetOut_V_last_V_1_ack_out);
    sensitive << ( packetOut_TREADY );

    SC_METHOD(thread_packetOut_V_last_V_1_data_in);
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( packetIn_V_last_V_0_data_out );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_packetOut_V_last_V_1_data_out);
    sensitive << ( packetOut_V_last_V_1_payload_A );
    sensitive << ( packetOut_V_last_V_1_payload_B );
    sensitive << ( packetOut_V_last_V_1_sel );

    SC_METHOD(thread_packetOut_V_last_V_1_load_A);
    sensitive << ( packetOut_V_last_V_1_sel_wr );
    sensitive << ( packetOut_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_last_V_1_load_B);
    sensitive << ( packetOut_V_last_V_1_sel_wr );
    sensitive << ( packetOut_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_packetOut_V_last_V_1_sel);
    sensitive << ( packetOut_V_last_V_1_sel_rd );

    SC_METHOD(thread_packetOut_V_last_V_1_state_cmp_full);
    sensitive << ( packetOut_V_last_V_1_state );

    SC_METHOD(thread_packetOut_V_last_V_1_vld_in);
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_packetOut_V_last_V_1_vld_out);
    sensitive << ( packetOut_V_last_V_1_state );

    SC_METHOD(thread_temp_V_fu_126_p1);
    sensitive << ( eth_src_V );

    SC_METHOD(thread_tmp_data_V_1_fu_130_p3);
    sensitive << ( eth_dst_V );
    sensitive << ( tmp_reg_165 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( packetIn_V_data_V_0_vld_out );
    sensitive << ( packetOut_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_last_V_reg_190 );
    sensitive << ( ap_condition_547 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    packetIn_V_data_V_0_sel_rd = SC_LOGIC_0;
    packetIn_V_data_V_0_sel_wr = SC_LOGIC_0;
    packetIn_V_data_V_0_state = "00";
    packetIn_V_last_V_0_sel_rd = SC_LOGIC_0;
    packetIn_V_last_V_0_sel_wr = SC_LOGIC_0;
    packetIn_V_last_V_0_state = "00";
    packetIn_V_dest_V_0_sel_rd = SC_LOGIC_0;
    packetIn_V_dest_V_0_sel_wr = SC_LOGIC_0;
    packetIn_V_dest_V_0_state = "00";
    packetIn_V_keep_V_0_sel_rd = SC_LOGIC_0;
    packetIn_V_keep_V_0_sel_wr = SC_LOGIC_0;
    packetIn_V_keep_V_0_state = "00";
    packetOut_V_data_V_1_sel_rd = SC_LOGIC_0;
    packetOut_V_data_V_1_sel_wr = SC_LOGIC_0;
    packetOut_V_data_V_1_state = "00";
    packetOut_V_last_V_1_sel_rd = SC_LOGIC_0;
    packetOut_V_last_V_1_sel_wr = SC_LOGIC_0;
    packetOut_V_last_V_1_state = "00";
    packetOut_V_keep_V_1_sel_rd = SC_LOGIC_0;
    packetOut_V_keep_V_1_sel_wr = SC_LOGIC_0;
    packetOut_V_keep_V_1_state = "00";
    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "packetFormatter_hardcode_64_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, packetIn_TDATA, "(port)packetIn_TDATA");
    sc_trace(mVcdFile, packetIn_TVALID, "(port)packetIn_TVALID");
    sc_trace(mVcdFile, packetIn_TREADY, "(port)packetIn_TREADY");
    sc_trace(mVcdFile, packetIn_TLAST, "(port)packetIn_TLAST");
    sc_trace(mVcdFile, packetIn_TDEST, "(port)packetIn_TDEST");
    sc_trace(mVcdFile, packetIn_TKEEP, "(port)packetIn_TKEEP");
    sc_trace(mVcdFile, eth_dst_V, "(port)eth_dst_V");
    sc_trace(mVcdFile, eth_src_V, "(port)eth_src_V");
    sc_trace(mVcdFile, packetOut_TDATA, "(port)packetOut_TDATA");
    sc_trace(mVcdFile, packetOut_TVALID, "(port)packetOut_TVALID");
    sc_trace(mVcdFile, packetOut_TREADY, "(port)packetOut_TREADY");
    sc_trace(mVcdFile, packetOut_TLAST, "(port)packetOut_TLAST");
    sc_trace(mVcdFile, packetOut_TKEEP, "(port)packetOut_TKEEP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, packetIn_V_data_V_0_data_out, "packetIn_V_data_V_0_data_out");
    sc_trace(mVcdFile, packetIn_V_data_V_0_vld_in, "packetIn_V_data_V_0_vld_in");
    sc_trace(mVcdFile, packetIn_V_data_V_0_vld_out, "packetIn_V_data_V_0_vld_out");
    sc_trace(mVcdFile, packetIn_V_data_V_0_ack_in, "packetIn_V_data_V_0_ack_in");
    sc_trace(mVcdFile, packetIn_V_data_V_0_ack_out, "packetIn_V_data_V_0_ack_out");
    sc_trace(mVcdFile, packetIn_V_data_V_0_payload_A, "packetIn_V_data_V_0_payload_A");
    sc_trace(mVcdFile, packetIn_V_data_V_0_payload_B, "packetIn_V_data_V_0_payload_B");
    sc_trace(mVcdFile, packetIn_V_data_V_0_sel_rd, "packetIn_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, packetIn_V_data_V_0_sel_wr, "packetIn_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, packetIn_V_data_V_0_sel, "packetIn_V_data_V_0_sel");
    sc_trace(mVcdFile, packetIn_V_data_V_0_load_A, "packetIn_V_data_V_0_load_A");
    sc_trace(mVcdFile, packetIn_V_data_V_0_load_B, "packetIn_V_data_V_0_load_B");
    sc_trace(mVcdFile, packetIn_V_data_V_0_state, "packetIn_V_data_V_0_state");
    sc_trace(mVcdFile, packetIn_V_data_V_0_state_cmp_full, "packetIn_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, packetIn_V_last_V_0_data_out, "packetIn_V_last_V_0_data_out");
    sc_trace(mVcdFile, packetIn_V_last_V_0_vld_in, "packetIn_V_last_V_0_vld_in");
    sc_trace(mVcdFile, packetIn_V_last_V_0_vld_out, "packetIn_V_last_V_0_vld_out");
    sc_trace(mVcdFile, packetIn_V_last_V_0_ack_in, "packetIn_V_last_V_0_ack_in");
    sc_trace(mVcdFile, packetIn_V_last_V_0_ack_out, "packetIn_V_last_V_0_ack_out");
    sc_trace(mVcdFile, packetIn_V_last_V_0_payload_A, "packetIn_V_last_V_0_payload_A");
    sc_trace(mVcdFile, packetIn_V_last_V_0_payload_B, "packetIn_V_last_V_0_payload_B");
    sc_trace(mVcdFile, packetIn_V_last_V_0_sel_rd, "packetIn_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, packetIn_V_last_V_0_sel_wr, "packetIn_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, packetIn_V_last_V_0_sel, "packetIn_V_last_V_0_sel");
    sc_trace(mVcdFile, packetIn_V_last_V_0_load_A, "packetIn_V_last_V_0_load_A");
    sc_trace(mVcdFile, packetIn_V_last_V_0_load_B, "packetIn_V_last_V_0_load_B");
    sc_trace(mVcdFile, packetIn_V_last_V_0_state, "packetIn_V_last_V_0_state");
    sc_trace(mVcdFile, packetIn_V_last_V_0_state_cmp_full, "packetIn_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_data_out, "packetIn_V_dest_V_0_data_out");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_vld_in, "packetIn_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_vld_out, "packetIn_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_ack_in, "packetIn_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_ack_out, "packetIn_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_payload_A, "packetIn_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_payload_B, "packetIn_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_sel_rd, "packetIn_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_sel_wr, "packetIn_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_sel, "packetIn_V_dest_V_0_sel");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_load_A, "packetIn_V_dest_V_0_load_A");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_load_B, "packetIn_V_dest_V_0_load_B");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_state, "packetIn_V_dest_V_0_state");
    sc_trace(mVcdFile, packetIn_V_dest_V_0_state_cmp_full, "packetIn_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_data_out, "packetIn_V_keep_V_0_data_out");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_vld_in, "packetIn_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_vld_out, "packetIn_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_ack_in, "packetIn_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_ack_out, "packetIn_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_payload_A, "packetIn_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_payload_B, "packetIn_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_sel_rd, "packetIn_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_sel_wr, "packetIn_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_sel, "packetIn_V_keep_V_0_sel");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_load_A, "packetIn_V_keep_V_0_load_A");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_load_B, "packetIn_V_keep_V_0_load_B");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_state, "packetIn_V_keep_V_0_state");
    sc_trace(mVcdFile, packetIn_V_keep_V_0_state_cmp_full, "packetIn_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, packetOut_V_data_V_1_data_in, "packetOut_V_data_V_1_data_in");
    sc_trace(mVcdFile, packetOut_V_data_V_1_data_out, "packetOut_V_data_V_1_data_out");
    sc_trace(mVcdFile, packetOut_V_data_V_1_vld_in, "packetOut_V_data_V_1_vld_in");
    sc_trace(mVcdFile, packetOut_V_data_V_1_vld_out, "packetOut_V_data_V_1_vld_out");
    sc_trace(mVcdFile, packetOut_V_data_V_1_ack_in, "packetOut_V_data_V_1_ack_in");
    sc_trace(mVcdFile, packetOut_V_data_V_1_ack_out, "packetOut_V_data_V_1_ack_out");
    sc_trace(mVcdFile, packetOut_V_data_V_1_payload_A, "packetOut_V_data_V_1_payload_A");
    sc_trace(mVcdFile, packetOut_V_data_V_1_payload_B, "packetOut_V_data_V_1_payload_B");
    sc_trace(mVcdFile, packetOut_V_data_V_1_sel_rd, "packetOut_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, packetOut_V_data_V_1_sel_wr, "packetOut_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, packetOut_V_data_V_1_sel, "packetOut_V_data_V_1_sel");
    sc_trace(mVcdFile, packetOut_V_data_V_1_load_A, "packetOut_V_data_V_1_load_A");
    sc_trace(mVcdFile, packetOut_V_data_V_1_load_B, "packetOut_V_data_V_1_load_B");
    sc_trace(mVcdFile, packetOut_V_data_V_1_state, "packetOut_V_data_V_1_state");
    sc_trace(mVcdFile, packetOut_V_data_V_1_state_cmp_full, "packetOut_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, packetOut_V_last_V_1_data_in, "packetOut_V_last_V_1_data_in");
    sc_trace(mVcdFile, packetOut_V_last_V_1_data_out, "packetOut_V_last_V_1_data_out");
    sc_trace(mVcdFile, packetOut_V_last_V_1_vld_in, "packetOut_V_last_V_1_vld_in");
    sc_trace(mVcdFile, packetOut_V_last_V_1_vld_out, "packetOut_V_last_V_1_vld_out");
    sc_trace(mVcdFile, packetOut_V_last_V_1_ack_in, "packetOut_V_last_V_1_ack_in");
    sc_trace(mVcdFile, packetOut_V_last_V_1_ack_out, "packetOut_V_last_V_1_ack_out");
    sc_trace(mVcdFile, packetOut_V_last_V_1_payload_A, "packetOut_V_last_V_1_payload_A");
    sc_trace(mVcdFile, packetOut_V_last_V_1_payload_B, "packetOut_V_last_V_1_payload_B");
    sc_trace(mVcdFile, packetOut_V_last_V_1_sel_rd, "packetOut_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, packetOut_V_last_V_1_sel_wr, "packetOut_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, packetOut_V_last_V_1_sel, "packetOut_V_last_V_1_sel");
    sc_trace(mVcdFile, packetOut_V_last_V_1_load_A, "packetOut_V_last_V_1_load_A");
    sc_trace(mVcdFile, packetOut_V_last_V_1_load_B, "packetOut_V_last_V_1_load_B");
    sc_trace(mVcdFile, packetOut_V_last_V_1_state, "packetOut_V_last_V_1_state");
    sc_trace(mVcdFile, packetOut_V_last_V_1_state_cmp_full, "packetOut_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_data_in, "packetOut_V_keep_V_1_data_in");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_data_out, "packetOut_V_keep_V_1_data_out");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_vld_in, "packetOut_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_vld_out, "packetOut_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_ack_in, "packetOut_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_ack_out, "packetOut_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_payload_A, "packetOut_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_payload_B, "packetOut_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_sel_rd, "packetOut_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_sel_wr, "packetOut_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_sel, "packetOut_V_keep_V_1_sel");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_load_A, "packetOut_V_keep_V_1_load_A");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_load_B, "packetOut_V_keep_V_1_load_B");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_state, "packetOut_V_keep_V_1_state");
    sc_trace(mVcdFile, packetOut_V_keep_V_1_state_cmp_full, "packetOut_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, packetIn_TDATA_blk_n, "packetIn_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, packetOut_TDATA_blk_n, "packetOut_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, reg_111, "reg_111");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_reg_165, "tmp_reg_165");
    sc_trace(mVcdFile, temp_V_fu_126_p1, "temp_V_fu_126_p1");
    sc_trace(mVcdFile, temp_V_reg_170, "temp_V_reg_170");
    sc_trace(mVcdFile, tmp_data_V_1_fu_130_p3, "tmp_data_V_1_fu_130_p3");
    sc_trace(mVcdFile, tmp_dest_V_reg_180, "tmp_dest_V_reg_180");
    sc_trace(mVcdFile, p_Result_s_fu_141_p4, "p_Result_s_fu_141_p4");
    sc_trace(mVcdFile, tmp_last_V_reg_190, "tmp_last_V_reg_190");
    sc_trace(mVcdFile, ap_condition_547, "ap_condition_547");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("packetFormatter_hardcode_64.hdltvin.dat");
    mHdltvoutHandle.open("packetFormatter_hardcode_64.hdltvout.dat");
}

packetFormatter_hardcode_64::~packetFormatter_hardcode_64() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void packetFormatter_hardcode_64::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_vld_out.read()))) {
            packetIn_V_data_V_0_sel_rd =  (sc_logic) (~packetIn_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_ack_in.read()))) {
            packetIn_V_data_V_0_sel_wr =  (sc_logic) (~packetIn_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(packetIn_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(packetIn_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            packetIn_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(packetIn_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(packetIn_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            packetIn_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(packetIn_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(packetIn_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(packetIn_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_ack_out.read()))))) {
            packetIn_V_data_V_0_state = ap_const_lv2_3;
        } else {
            packetIn_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_vld_out.read()))) {
            packetIn_V_dest_V_0_sel_rd =  (sc_logic) (~packetIn_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_ack_in.read()))) {
            packetIn_V_dest_V_0_sel_wr =  (sc_logic) (~packetIn_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, packetIn_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, packetIn_V_dest_V_0_state.read())))) {
            packetIn_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, packetIn_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetIn_V_dest_V_0_state.read())))) {
            packetIn_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, packetIn_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetIn_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, packetIn_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_ack_out.read()))))) {
            packetIn_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            packetIn_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_vld_out.read()))) {
            packetIn_V_keep_V_0_sel_rd =  (sc_logic) (~packetIn_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_ack_in.read()))) {
            packetIn_V_keep_V_0_sel_wr =  (sc_logic) (~packetIn_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, packetIn_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, packetIn_V_keep_V_0_state.read())))) {
            packetIn_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, packetIn_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetIn_V_keep_V_0_state.read())))) {
            packetIn_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, packetIn_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetIn_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, packetIn_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_ack_out.read()))))) {
            packetIn_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            packetIn_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_vld_out.read()))) {
            packetIn_V_last_V_0_sel_rd =  (sc_logic) (~packetIn_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_ack_in.read()))) {
            packetIn_V_last_V_0_sel_wr =  (sc_logic) (~packetIn_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetIn_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, packetIn_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, packetIn_V_last_V_0_state.read())))) {
            packetIn_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, packetIn_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetIn_V_last_V_0_state.read())))) {
            packetIn_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, packetIn_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetIn_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, packetIn_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetIn_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_ack_out.read()))))) {
            packetIn_V_last_V_0_state = ap_const_lv2_3;
        } else {
            packetIn_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_vld_out.read()))) {
            packetOut_V_data_V_1_sel_rd =  (sc_logic) (~packetOut_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_ack_in.read()))) {
            packetOut_V_data_V_1_sel_wr =  (sc_logic) (~packetOut_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_data_V_1_state.read())))) {
            packetOut_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_data_V_1_state.read())))) {
            packetOut_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_ack_out.read()))))) {
            packetOut_V_data_V_1_state = ap_const_lv2_3;
        } else {
            packetOut_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_vld_out.read()))) {
            packetOut_V_keep_V_1_sel_rd =  (sc_logic) (~packetOut_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_ack_in.read()))) {
            packetOut_V_keep_V_1_sel_wr =  (sc_logic) (~packetOut_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_keep_V_1_state.read())))) {
            packetOut_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_keep_V_1_state.read())))) {
            packetOut_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_ack_out.read()))))) {
            packetOut_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            packetOut_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_out.read()))) {
            packetOut_V_last_V_1_sel_rd =  (sc_logic) (~packetOut_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_in.read()))) {
            packetOut_V_last_V_1_sel_wr =  (sc_logic) (~packetOut_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        packetOut_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_last_V_1_state.read())))) {
            packetOut_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_last_V_1_state.read())))) {
            packetOut_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, packetOut_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, packetOut_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, packetOut_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_ack_out.read()))))) {
            packetOut_V_last_V_1_state = ap_const_lv2_3;
        } else {
            packetOut_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_load_A.read())) {
        packetIn_V_data_V_0_payload_A = packetIn_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_load_B.read())) {
        packetIn_V_data_V_0_payload_B = packetIn_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_load_A.read())) {
        packetIn_V_dest_V_0_payload_A = packetIn_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_load_B.read())) {
        packetIn_V_dest_V_0_payload_B = packetIn_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_load_A.read())) {
        packetIn_V_keep_V_0_payload_A = packetIn_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_load_B.read())) {
        packetIn_V_keep_V_0_payload_B = packetIn_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_load_A.read())) {
        packetIn_V_last_V_0_payload_A = packetIn_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_load_B.read())) {
        packetIn_V_last_V_0_payload_B = packetIn_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_load_A.read())) {
        packetOut_V_data_V_1_payload_A = packetOut_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_load_B.read())) {
        packetOut_V_data_V_1_payload_B = packetOut_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_load_A.read())) {
        packetOut_V_keep_V_1_payload_A = packetOut_V_keep_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_load_B.read())) {
        packetOut_V_keep_V_1_payload_B = packetOut_V_keep_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_load_A.read())) {
        packetOut_V_last_V_1_payload_A = packetOut_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_load_B.read())) {
        packetOut_V_last_V_1_payload_B = packetOut_V_last_V_1_data_in.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
  !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
  !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))))) {
        reg_111 = packetIn_V_data_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state1.read()))) {
        temp_V_reg_170 = temp_V_fu_126_p1.read();
        tmp_reg_165 = eth_src_V.read().range(47, 32);
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read())))) {
        tmp_dest_V_reg_180 = packetIn_V_dest_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read())))) {
        tmp_last_V_reg_190 = packetIn_V_last_V_0_data_out.read();
    }
}

void packetFormatter_hardcode_64::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void packetFormatter_hardcode_64::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void packetFormatter_hardcode_64::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void packetFormatter_hardcode_64::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void packetFormatter_hardcode_64::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void packetFormatter_hardcode_64::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void packetFormatter_hardcode_64::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void packetFormatter_hardcode_64::thread_ap_condition_547() {
    ap_condition_547 = (esl_seteq<1,1,1>(packetOut_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(packetOut_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(packetOut_V_keep_V_1_ack_in.read(), ap_const_logic_0));
}

void packetFormatter_hardcode_64::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void packetFormatter_hardcode_64::thread_p_Result_s_fu_141_p4() {
    p_Result_s_fu_141_p4 = esl_concat<56,8>(esl_concat<32,24>(temp_V_reg_170.read(), ap_const_lv24_740000), tmp_dest_V_reg_180.read());
}

void packetFormatter_hardcode_64::thread_packetIn_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())))) {
        packetIn_TDATA_blk_n =  (sc_logic) (packetIn_V_data_V_0_state.read()[0]);
    } else {
        packetIn_TDATA_blk_n = ap_const_logic_1;
    }
}

void packetFormatter_hardcode_64::thread_packetIn_TREADY() {
    packetIn_TREADY =  (sc_logic) (packetIn_V_keep_V_0_state.read()[1]);
}

void packetFormatter_hardcode_64::thread_packetIn_V_data_V_0_ack_in() {
    packetIn_V_data_V_0_ack_in =  (sc_logic) (packetIn_V_data_V_0_state.read()[1]);
}

void packetFormatter_hardcode_64::thread_packetIn_V_data_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))))) {
        packetIn_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        packetIn_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void packetFormatter_hardcode_64::thread_packetIn_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_data_V_0_sel.read())) {
        packetIn_V_data_V_0_data_out = packetIn_V_data_V_0_payload_B.read();
    } else {
        packetIn_V_data_V_0_data_out = packetIn_V_data_V_0_payload_A.read();
    }
}

void packetFormatter_hardcode_64::thread_packetIn_V_data_V_0_load_A() {
    packetIn_V_data_V_0_load_A = (packetIn_V_data_V_0_state_cmp_full.read() & ~packetIn_V_data_V_0_sel_wr.read());
}

void packetFormatter_hardcode_64::thread_packetIn_V_data_V_0_load_B() {
    packetIn_V_data_V_0_load_B = (packetIn_V_data_V_0_sel_wr.read() & packetIn_V_data_V_0_state_cmp_full.read());
}

void packetFormatter_hardcode_64::thread_packetIn_V_data_V_0_sel() {
    packetIn_V_data_V_0_sel = packetIn_V_data_V_0_sel_rd.read();
}

void packetFormatter_hardcode_64::thread_packetIn_V_data_V_0_state_cmp_full() {
    packetIn_V_data_V_0_state_cmp_full =  (sc_logic) ((!packetIn_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetIn_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void packetFormatter_hardcode_64::thread_packetIn_V_data_V_0_vld_in() {
    packetIn_V_data_V_0_vld_in = packetIn_TVALID.read();
}

void packetFormatter_hardcode_64::thread_packetIn_V_data_V_0_vld_out() {
    packetIn_V_data_V_0_vld_out =  (sc_logic) (packetIn_V_data_V_0_state.read()[0]);
}

void packetFormatter_hardcode_64::thread_packetIn_V_dest_V_0_ack_in() {
    packetIn_V_dest_V_0_ack_in =  (sc_logic) (packetIn_V_dest_V_0_state.read()[1]);
}

void packetFormatter_hardcode_64::thread_packetIn_V_dest_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))))) {
        packetIn_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        packetIn_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void packetFormatter_hardcode_64::thread_packetIn_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_dest_V_0_sel.read())) {
        packetIn_V_dest_V_0_data_out = packetIn_V_dest_V_0_payload_B.read();
    } else {
        packetIn_V_dest_V_0_data_out = packetIn_V_dest_V_0_payload_A.read();
    }
}

void packetFormatter_hardcode_64::thread_packetIn_V_dest_V_0_load_A() {
    packetIn_V_dest_V_0_load_A = (packetIn_V_dest_V_0_state_cmp_full.read() & ~packetIn_V_dest_V_0_sel_wr.read());
}

void packetFormatter_hardcode_64::thread_packetIn_V_dest_V_0_load_B() {
    packetIn_V_dest_V_0_load_B = (packetIn_V_dest_V_0_sel_wr.read() & packetIn_V_dest_V_0_state_cmp_full.read());
}

void packetFormatter_hardcode_64::thread_packetIn_V_dest_V_0_sel() {
    packetIn_V_dest_V_0_sel = packetIn_V_dest_V_0_sel_rd.read();
}

void packetFormatter_hardcode_64::thread_packetIn_V_dest_V_0_state_cmp_full() {
    packetIn_V_dest_V_0_state_cmp_full =  (sc_logic) ((!packetIn_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetIn_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void packetFormatter_hardcode_64::thread_packetIn_V_dest_V_0_vld_in() {
    packetIn_V_dest_V_0_vld_in = packetIn_TVALID.read();
}

void packetFormatter_hardcode_64::thread_packetIn_V_dest_V_0_vld_out() {
    packetIn_V_dest_V_0_vld_out =  (sc_logic) (packetIn_V_dest_V_0_state.read()[0]);
}

void packetFormatter_hardcode_64::thread_packetIn_V_keep_V_0_ack_in() {
    packetIn_V_keep_V_0_ack_in =  (sc_logic) (packetIn_V_keep_V_0_state.read()[1]);
}

void packetFormatter_hardcode_64::thread_packetIn_V_keep_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))))) {
        packetIn_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        packetIn_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void packetFormatter_hardcode_64::thread_packetIn_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_keep_V_0_sel.read())) {
        packetIn_V_keep_V_0_data_out = packetIn_V_keep_V_0_payload_B.read();
    } else {
        packetIn_V_keep_V_0_data_out = packetIn_V_keep_V_0_payload_A.read();
    }
}

void packetFormatter_hardcode_64::thread_packetIn_V_keep_V_0_load_A() {
    packetIn_V_keep_V_0_load_A = (packetIn_V_keep_V_0_state_cmp_full.read() & ~packetIn_V_keep_V_0_sel_wr.read());
}

void packetFormatter_hardcode_64::thread_packetIn_V_keep_V_0_load_B() {
    packetIn_V_keep_V_0_load_B = (packetIn_V_keep_V_0_sel_wr.read() & packetIn_V_keep_V_0_state_cmp_full.read());
}

void packetFormatter_hardcode_64::thread_packetIn_V_keep_V_0_sel() {
    packetIn_V_keep_V_0_sel = packetIn_V_keep_V_0_sel_rd.read();
}

void packetFormatter_hardcode_64::thread_packetIn_V_keep_V_0_state_cmp_full() {
    packetIn_V_keep_V_0_state_cmp_full =  (sc_logic) ((!packetIn_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetIn_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void packetFormatter_hardcode_64::thread_packetIn_V_keep_V_0_vld_in() {
    packetIn_V_keep_V_0_vld_in = packetIn_TVALID.read();
}

void packetFormatter_hardcode_64::thread_packetIn_V_keep_V_0_vld_out() {
    packetIn_V_keep_V_0_vld_out =  (sc_logic) (packetIn_V_keep_V_0_state.read()[0]);
}

void packetFormatter_hardcode_64::thread_packetIn_V_last_V_0_ack_in() {
    packetIn_V_last_V_0_ack_in =  (sc_logic) (packetIn_V_last_V_0_state.read()[1]);
}

void packetFormatter_hardcode_64::thread_packetIn_V_last_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))))) {
        packetIn_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        packetIn_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void packetFormatter_hardcode_64::thread_packetIn_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetIn_V_last_V_0_sel.read())) {
        packetIn_V_last_V_0_data_out = packetIn_V_last_V_0_payload_B.read();
    } else {
        packetIn_V_last_V_0_data_out = packetIn_V_last_V_0_payload_A.read();
    }
}

void packetFormatter_hardcode_64::thread_packetIn_V_last_V_0_load_A() {
    packetIn_V_last_V_0_load_A = (packetIn_V_last_V_0_state_cmp_full.read() & ~packetIn_V_last_V_0_sel_wr.read());
}

void packetFormatter_hardcode_64::thread_packetIn_V_last_V_0_load_B() {
    packetIn_V_last_V_0_load_B = (packetIn_V_last_V_0_sel_wr.read() & packetIn_V_last_V_0_state_cmp_full.read());
}

void packetFormatter_hardcode_64::thread_packetIn_V_last_V_0_sel() {
    packetIn_V_last_V_0_sel = packetIn_V_last_V_0_sel_rd.read();
}

void packetFormatter_hardcode_64::thread_packetIn_V_last_V_0_state_cmp_full() {
    packetIn_V_last_V_0_state_cmp_full =  (sc_logic) ((!packetIn_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetIn_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void packetFormatter_hardcode_64::thread_packetIn_V_last_V_0_vld_in() {
    packetIn_V_last_V_0_vld_in = packetIn_TVALID.read();
}

void packetFormatter_hardcode_64::thread_packetIn_V_last_V_0_vld_out() {
    packetIn_V_last_V_0_vld_out =  (sc_logic) (packetIn_V_last_V_0_state.read()[0]);
}

void packetFormatter_hardcode_64::thread_packetOut_TDATA() {
    packetOut_TDATA = packetOut_V_data_V_1_data_out.read();
}

void packetFormatter_hardcode_64::thread_packetOut_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())))) {
        packetOut_TDATA_blk_n =  (sc_logic) (packetOut_V_data_V_1_state.read()[1]);
    } else {
        packetOut_TDATA_blk_n = ap_const_logic_1;
    }
}

void packetFormatter_hardcode_64::thread_packetOut_TKEEP() {
    packetOut_TKEEP = packetOut_V_keep_V_1_data_out.read();
}

void packetFormatter_hardcode_64::thread_packetOut_TLAST() {
    packetOut_TLAST = packetOut_V_last_V_1_data_out.read();
}

void packetFormatter_hardcode_64::thread_packetOut_TVALID() {
    packetOut_TVALID =  (sc_logic) (packetOut_V_keep_V_1_state.read()[0]);
}

void packetFormatter_hardcode_64::thread_packetOut_V_data_V_1_ack_in() {
    packetOut_V_data_V_1_ack_in =  (sc_logic) (packetOut_V_data_V_1_state.read()[1]);
}

void packetFormatter_hardcode_64::thread_packetOut_V_data_V_1_ack_out() {
    packetOut_V_data_V_1_ack_out = packetOut_TREADY.read();
}

void packetFormatter_hardcode_64::thread_packetOut_V_data_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
         !esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0))) {
        packetOut_V_data_V_1_data_in = packetIn_V_data_V_0_data_out.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        packetOut_V_data_V_1_data_in = reg_111.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        packetOut_V_data_V_1_data_in = p_Result_s_fu_141_p4.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                !esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0))) {
        packetOut_V_data_V_1_data_in = tmp_data_V_1_fu_130_p3.read();
    } else {
        packetOut_V_data_V_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void packetFormatter_hardcode_64::thread_packetOut_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_data_V_1_sel.read())) {
        packetOut_V_data_V_1_data_out = packetOut_V_data_V_1_payload_B.read();
    } else {
        packetOut_V_data_V_1_data_out = packetOut_V_data_V_1_payload_A.read();
    }
}

void packetFormatter_hardcode_64::thread_packetOut_V_data_V_1_load_A() {
    packetOut_V_data_V_1_load_A = (packetOut_V_data_V_1_state_cmp_full.read() & ~packetOut_V_data_V_1_sel_wr.read());
}

void packetFormatter_hardcode_64::thread_packetOut_V_data_V_1_load_B() {
    packetOut_V_data_V_1_load_B = (packetOut_V_data_V_1_sel_wr.read() & packetOut_V_data_V_1_state_cmp_full.read());
}

void packetFormatter_hardcode_64::thread_packetOut_V_data_V_1_sel() {
    packetOut_V_data_V_1_sel = packetOut_V_data_V_1_sel_rd.read();
}

void packetFormatter_hardcode_64::thread_packetOut_V_data_V_1_state_cmp_full() {
    packetOut_V_data_V_1_state_cmp_full =  (sc_logic) ((!packetOut_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetOut_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void packetFormatter_hardcode_64::thread_packetOut_V_data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))))) {
        packetOut_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        packetOut_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void packetFormatter_hardcode_64::thread_packetOut_V_data_V_1_vld_out() {
    packetOut_V_data_V_1_vld_out =  (sc_logic) (packetOut_V_data_V_1_state.read()[0]);
}

void packetFormatter_hardcode_64::thread_packetOut_V_keep_V_1_ack_in() {
    packetOut_V_keep_V_1_ack_in =  (sc_logic) (packetOut_V_keep_V_1_state.read()[1]);
}

void packetFormatter_hardcode_64::thread_packetOut_V_keep_V_1_ack_out() {
    packetOut_V_keep_V_1_ack_out = packetOut_TREADY.read();
}

void packetFormatter_hardcode_64::thread_packetOut_V_keep_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
         !esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0))) {
        packetOut_V_keep_V_1_data_in = packetIn_V_keep_V_0_data_out.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                 !esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0)))) {
        packetOut_V_keep_V_1_data_in = ap_const_lv8_FF;
    } else {
        packetOut_V_keep_V_1_data_in =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void packetFormatter_hardcode_64::thread_packetOut_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_keep_V_1_sel.read())) {
        packetOut_V_keep_V_1_data_out = packetOut_V_keep_V_1_payload_B.read();
    } else {
        packetOut_V_keep_V_1_data_out = packetOut_V_keep_V_1_payload_A.read();
    }
}

void packetFormatter_hardcode_64::thread_packetOut_V_keep_V_1_load_A() {
    packetOut_V_keep_V_1_load_A = (packetOut_V_keep_V_1_state_cmp_full.read() & ~packetOut_V_keep_V_1_sel_wr.read());
}

void packetFormatter_hardcode_64::thread_packetOut_V_keep_V_1_load_B() {
    packetOut_V_keep_V_1_load_B = (packetOut_V_keep_V_1_sel_wr.read() & packetOut_V_keep_V_1_state_cmp_full.read());
}

void packetFormatter_hardcode_64::thread_packetOut_V_keep_V_1_sel() {
    packetOut_V_keep_V_1_sel = packetOut_V_keep_V_1_sel_rd.read();
}

void packetFormatter_hardcode_64::thread_packetOut_V_keep_V_1_state_cmp_full() {
    packetOut_V_keep_V_1_state_cmp_full =  (sc_logic) ((!packetOut_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetOut_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void packetFormatter_hardcode_64::thread_packetOut_V_keep_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))))) {
        packetOut_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        packetOut_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void packetFormatter_hardcode_64::thread_packetOut_V_keep_V_1_vld_out() {
    packetOut_V_keep_V_1_vld_out =  (sc_logic) (packetOut_V_keep_V_1_state.read()[0]);
}

void packetFormatter_hardcode_64::thread_packetOut_V_last_V_1_ack_in() {
    packetOut_V_last_V_1_ack_in =  (sc_logic) (packetOut_V_last_V_1_state.read()[1]);
}

void packetFormatter_hardcode_64::thread_packetOut_V_last_V_1_ack_out() {
    packetOut_V_last_V_1_ack_out = packetOut_TREADY.read();
}

void packetFormatter_hardcode_64::thread_packetOut_V_last_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
         !esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0))) {
        packetOut_V_last_V_1_data_in = packetIn_V_last_V_0_data_out.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
                 !esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0)))) {
        packetOut_V_last_V_1_data_in = ap_const_lv1_0;
    } else {
        packetOut_V_last_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void packetFormatter_hardcode_64::thread_packetOut_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, packetOut_V_last_V_1_sel.read())) {
        packetOut_V_last_V_1_data_out = packetOut_V_last_V_1_payload_B.read();
    } else {
        packetOut_V_last_V_1_data_out = packetOut_V_last_V_1_payload_A.read();
    }
}

void packetFormatter_hardcode_64::thread_packetOut_V_last_V_1_load_A() {
    packetOut_V_last_V_1_load_A = (packetOut_V_last_V_1_state_cmp_full.read() & ~packetOut_V_last_V_1_sel_wr.read());
}

void packetFormatter_hardcode_64::thread_packetOut_V_last_V_1_load_B() {
    packetOut_V_last_V_1_load_B = (packetOut_V_last_V_1_sel_wr.read() & packetOut_V_last_V_1_state_cmp_full.read());
}

void packetFormatter_hardcode_64::thread_packetOut_V_last_V_1_sel() {
    packetOut_V_last_V_1_sel = packetOut_V_last_V_1_sel_rd.read();
}

void packetFormatter_hardcode_64::thread_packetOut_V_last_V_1_state_cmp_full() {
    packetOut_V_last_V_1_state_cmp_full =  (sc_logic) ((!packetOut_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(packetOut_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void packetFormatter_hardcode_64::thread_packetOut_V_last_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()) && 
          !(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))))) {
        packetOut_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        packetOut_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void packetFormatter_hardcode_64::thread_packetOut_V_last_V_1_vld_out() {
    packetOut_V_last_V_1_vld_out =  (sc_logic) (packetOut_V_last_V_1_state.read()[0]);
}

void packetFormatter_hardcode_64::thread_temp_V_fu_126_p1() {
    temp_V_fu_126_p1 = eth_src_V.read().range(32-1, 0);
}

void packetFormatter_hardcode_64::thread_tmp_data_V_1_fu_130_p3() {
    tmp_data_V_1_fu_130_p3 = esl_concat<48,16>(eth_dst_V.read(), tmp_reg_165.read());
}

void packetFormatter_hardcode_64::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read())) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if (!(esl_seteq<1,1,1>(packetIn_V_data_V_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_reg_190.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_condition_547.read(), ap_const_boolean_1)))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_reg_190.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, packetOut_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_condition_547.read(), ap_const_boolean_1)))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void packetFormatter_hardcode_64::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetIn_TDATA\" :  \"" << packetIn_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetIn_TVALID\" :  \"" << packetIn_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"packetIn_TREADY\" :  \"" << packetIn_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetIn_TLAST\" :  \"" << packetIn_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetIn_TDEST\" :  \"" << packetIn_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetIn_TKEEP\" :  \"" << packetIn_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_dst_V\" :  \"" << eth_dst_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_src_V\" :  \"" << eth_src_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TDATA\" :  \"" << packetOut_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TVALID\" :  \"" << packetOut_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packetOut_TREADY\" :  \"" << packetOut_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TLAST\" :  \"" << packetOut_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packetOut_TKEEP\" :  \"" << packetOut_TKEEP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

